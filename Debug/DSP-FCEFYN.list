
DSP-FCEFYN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a94c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00018704  0800aad4  0800aad4  0000bad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080231d8  080231d8  0002d948  2**0
                  CONTENTS
  4 .ARM          00000008  080231d8  080231d8  000241d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080231e0  080231e0  0002d948  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080231e0  080231e0  000241e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080231e4  080231e4  000241e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00008948  20000000  080231e8  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002d948  2**0
                  CONTENTS
 10 .bss          0000caf4  20008948  20008948  0002d948  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001543c  2001543c  0002d948  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002d948  2**0
                  CONTENTS, READONLY
 13 .debug_info   000290cd  00000000  00000000  0002d978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005cfd  00000000  00000000  00056a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f8  00000000  00000000  0005c748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e9c  00000000  00000000  0005dc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026a2b  00000000  00000000  0005eadc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021503  00000000  00000000  00085507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddae4  00000000  00000000  000a6a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  001844ee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054d0  00000000  00000000  001845ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00189a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0000826a  00000000  00000000  00189aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00001228  00000000  00000000  00191d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20008948 	.word	0x20008948
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800aabc 	.word	0x0800aabc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000894c 	.word	0x2000894c
 80001c4:	0800aabc 	.word	0x0800aabc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004be:	463b      	mov	r3, r7
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004ca:	4b22      	ldr	r3, [pc, #136]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004cc:	4a22      	ldr	r2, [pc, #136]	@ (8000558 <MX_ADC1_Init+0xa0>)
 80004ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004d0:	4b20      	ldr	r3, [pc, #128]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004de:	4b1d      	ldr	r3, [pc, #116]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80004f2:	4b18      	ldr	r3, [pc, #96]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80004f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80004fa:	4b16      	ldr	r3, [pc, #88]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004fc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000500:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000502:	4b14      	ldr	r3, [pc, #80]	@ (8000554 <MX_ADC1_Init+0x9c>)
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000508:	4b12      	ldr	r3, [pc, #72]	@ (8000554 <MX_ADC1_Init+0x9c>)
 800050a:	2201      	movs	r2, #1
 800050c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800050e:	4b11      	ldr	r3, [pc, #68]	@ (8000554 <MX_ADC1_Init+0x9c>)
 8000510:	2200      	movs	r2, #0
 8000512:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000516:	4b0f      	ldr	r3, [pc, #60]	@ (8000554 <MX_ADC1_Init+0x9c>)
 8000518:	2201      	movs	r2, #1
 800051a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800051c:	480d      	ldr	r0, [pc, #52]	@ (8000554 <MX_ADC1_Init+0x9c>)
 800051e:	f001 fc8b 	bl	8001e38 <HAL_ADC_Init>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000528:	f001 f9de 	bl	80018e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800052c:	2301      	movs	r3, #1
 800052e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000530:	2301      	movs	r3, #1
 8000532:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000538:	463b      	mov	r3, r7
 800053a:	4619      	mov	r1, r3
 800053c:	4805      	ldr	r0, [pc, #20]	@ (8000554 <MX_ADC1_Init+0x9c>)
 800053e:	f001 ff0b 	bl	8002358 <HAL_ADC_ConfigChannel>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000548:	f001 f9ce 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800054c:	bf00      	nop
 800054e:	3710      	adds	r7, #16
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20008964 	.word	0x20008964
 8000558:	40012000 	.word	0x40012000

0800055c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	@ 0x28
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	f107 0314 	add.w	r3, r7, #20
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a1b      	ldr	r2, [pc, #108]	@ (80005e8 <HAL_ADC_MspInit+0x8c>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d12f      	bne.n	80005de <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	613b      	str	r3, [r7, #16]
 8000582:	4b1a      	ldr	r3, [pc, #104]	@ (80005ec <HAL_ADC_MspInit+0x90>)
 8000584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000586:	4a19      	ldr	r2, [pc, #100]	@ (80005ec <HAL_ADC_MspInit+0x90>)
 8000588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800058c:	6453      	str	r3, [r2, #68]	@ 0x44
 800058e:	4b17      	ldr	r3, [pc, #92]	@ (80005ec <HAL_ADC_MspInit+0x90>)
 8000590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	4b13      	ldr	r3, [pc, #76]	@ (80005ec <HAL_ADC_MspInit+0x90>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	4a12      	ldr	r2, [pc, #72]	@ (80005ec <HAL_ADC_MspInit+0x90>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005aa:	4b10      	ldr	r3, [pc, #64]	@ (80005ec <HAL_ADC_MspInit+0x90>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005b6:	2302      	movs	r3, #2
 80005b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ba:	2303      	movs	r3, #3
 80005bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4619      	mov	r1, r3
 80005c8:	4809      	ldr	r0, [pc, #36]	@ (80005f0 <HAL_ADC_MspInit+0x94>)
 80005ca:	f002 f9ff 	bl	80029cc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	2012      	movs	r0, #18
 80005d4:	f002 f9c3 	bl	800295e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80005d8:	2012      	movs	r0, #18
 80005da:	f002 f9dc 	bl	8002996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005de:	bf00      	nop
 80005e0:	3728      	adds	r7, #40	@ 0x28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40012000 	.word	0x40012000
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40020000 	.word	0x40020000

080005f4 <isBufferEmpty>:
#include "main.h"


extern uint8_t FFT_flag;
/* Función auxiliar para determinar si el buffer está vacío */
static inline int isBufferEmpty(circularBuffer_t *buf) {
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
    return (buf->head == buf->tail);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	b29a      	uxth	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800060c:	885b      	ldrh	r3, [r3, #2]
 800060e:	b29b      	uxth	r3, r3
 8000610:	429a      	cmp	r2, r3
 8000612:	bf0c      	ite	eq
 8000614:	2301      	moveq	r3, #1
 8000616:	2300      	movne	r3, #0
 8000618:	b2db      	uxtb	r3, r3
}
 800061a:	4618      	mov	r0, r3
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <bufferWrite>:

/* Escribe un dato en el buffer circular */
void bufferWrite(circularBuffer_t *buf, q15_t *data) {
 8000626:	b480      	push	{r7}
 8000628:	b085      	sub	sp, #20
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
 800062e:	6039      	str	r1, [r7, #0]
    uint16_t next = (buf->head + 1) % buf->effective_size;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	b29b      	uxth	r3, r3
 800063a:	3301      	adds	r3, #1
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8000642:	8892      	ldrh	r2, [r2, #4]
 8000644:	b292      	uxth	r2, r2
 8000646:	fb93 f1f2 	sdiv	r1, r3, r2
 800064a:	fb01 f202 	mul.w	r2, r1, r2
 800064e:	1a9b      	subs	r3, r3, r2
 8000650:	81fb      	strh	r3, [r7, #14]
    if (next == buf->tail) {
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000658:	885b      	ldrh	r3, [r3, #2]
 800065a:	b29b      	uxth	r3, r3
 800065c:	89fa      	ldrh	r2, [r7, #14]
 800065e:	429a      	cmp	r2, r3
 8000660:	d012      	beq.n	8000688 <bufferWrite+0x62>
        // Buffer lleno: aquí podrías decidir sobrescribir, bloquear o simplemente ignorar el dato.
        return;
    }
    buf->buf[buf->head] = *data;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	b29b      	uxth	r3, r3
 800066c:	461a      	mov	r2, r3
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    buf->head = next;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000680:	461a      	mov	r2, r3
 8000682:	89fb      	ldrh	r3, [r7, #14]
 8000684:	8013      	strh	r3, [r2, #0]
 8000686:	e000      	b.n	800068a <bufferWrite+0x64>
        return;
 8000688:	bf00      	nop
}
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <bufferRead>:

/* Lee un dato del buffer circular */
void bufferRead(circularBuffer_t *buf, q15_t *data) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
    if (isBufferEmpty(buf)) {
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f7ff ffa8 	bl	80005f4 <isBufferEmpty>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d121      	bne.n	80006ee <bufferRead+0x5a>
        // Buffer vacío: no hay nada que leer.
        return;
    }
    *data = buf->buf[buf->tail];
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80006b0:	885b      	ldrh	r3, [r3, #2]
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	461a      	mov	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80006bc:	b21a      	sxth	r2, r3
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	801a      	strh	r2, [r3, #0]
    buf->tail = (buf->tail + 1) % buf->effective_size;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80006c8:	885b      	ldrh	r3, [r3, #2]
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	3301      	adds	r3, #1
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80006d4:	8892      	ldrh	r2, [r2, #4]
 80006d6:	b292      	uxth	r2, r2
 80006d8:	fb93 f1f2 	sdiv	r1, r3, r2
 80006dc:	fb01 f202 	mul.w	r2, r1, r2
 80006e0:	1a9b      	subs	r3, r3, r2
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80006ea:	805a      	strh	r2, [r3, #2]
 80006ec:	e000      	b.n	80006f0 <bufferRead+0x5c>
        return;
 80006ee:	bf00      	nop
}
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <availableBytes>:

/* Calcula el número de bytes disponibles en el buffer */
uint16_t availableBytes(circularBuffer_t *buf) {
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
    if (buf->head >= buf->tail)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	b29a      	uxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800070e:	885b      	ldrh	r3, [r3, #2]
 8000710:	b29b      	uxth	r3, r3
 8000712:	429a      	cmp	r2, r3
 8000714:	d30c      	bcc.n	8000730 <availableBytes+0x3a>
        return buf->head - buf->tail;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	b29a      	uxth	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000726:	885b      	ldrh	r3, [r3, #2]
 8000728:	b29b      	uxth	r3, r3
 800072a:	1ad3      	subs	r3, r2, r3
 800072c:	b29b      	uxth	r3, r3
 800072e:	e012      	b.n	8000756 <availableBytes+0x60>
    else
        return (buf->effective_size - buf->tail) + buf->head;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000736:	889b      	ldrh	r3, [r3, #4]
 8000738:	b29a      	uxth	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000740:	885b      	ldrh	r3, [r3, #2]
 8000742:	b29b      	uxth	r3, r3
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	b29a      	uxth	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	b29b      	uxth	r3, r3
 8000752:	4413      	add	r3, r2
 8000754:	b29b      	uxth	r3, r3
}
 8000756:	4618      	mov	r0, r3
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <sendBuffer2usb>:

/* Envía datos leídos desde el buffer circular a través del USB */
void sendBuffer2usb(circularBuffer_t *buf)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	b0b4      	sub	sp, #208	@ 0xd0
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
    q15_t tempBufferInput[USB_BUFFER_SIZE];
    uint8_t tempBufferOutput[USB_BUFFER_SIZE];
    uint16_t count = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
    uint16_t available = availableBytes(buf);
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f7ff ffc0 	bl	80006f6 <availableBytes>
 8000776:	4603      	mov	r3, r0
 8000778:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc

    // Si hay datos disponibles, extraer hasta USB_BUFFER_SIZE o hasta que se vacíe el buffer
    if(available >= USB_BUFFER_SIZE) {
 800077c:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8000780:	2b3f      	cmp	r3, #63	@ 0x3f
 8000782:	d941      	bls.n	8000808 <sendBuffer2usb+0xa6>
        while ((count < USB_BUFFER_SIZE) && (!isBufferEmpty(buf))) {
 8000784:	e02e      	b.n	80007e4 <sendBuffer2usb+0x82>
            bufferRead(buf, &tempBufferInput[count]);
 8000786:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800078a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	4413      	add	r3, r2
 8000792:	4619      	mov	r1, r3
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff ff7d 	bl	8000694 <bufferRead>
            tempBufferOutput[count] = (uint8_t)(((uint32_t)(tempBufferInput[count] + 32768)) >> 8);
 800079a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	33d0      	adds	r3, #208	@ 0xd0
 80007a2:	443b      	add	r3, r7
 80007a4:	f933 3c84 	ldrsh.w	r3, [r3, #-132]
 80007a8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80007ac:	0a1a      	lsrs	r2, r3, #8
 80007ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80007b2:	b2d2      	uxtb	r2, r2
 80007b4:	33d0      	adds	r3, #208	@ 0xd0
 80007b6:	443b      	add	r3, r7
 80007b8:	f803 2cc4 	strb.w	r2, [r3, #-196]
            if(tempBufferOutput[count] == 255){tempBufferOutput[count] = 254;}
 80007bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80007c0:	33d0      	adds	r3, #208	@ 0xd0
 80007c2:	443b      	add	r3, r7
 80007c4:	f813 3cc4 	ldrb.w	r3, [r3, #-196]
 80007c8:	2bff      	cmp	r3, #255	@ 0xff
 80007ca:	d106      	bne.n	80007da <sendBuffer2usb+0x78>
 80007cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80007d0:	33d0      	adds	r3, #208	@ 0xd0
 80007d2:	443b      	add	r3, r7
 80007d4:	22fe      	movs	r2, #254	@ 0xfe
 80007d6:	f803 2cc4 	strb.w	r2, [r3, #-196]
            count++;
 80007da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80007de:	3301      	adds	r3, #1
 80007e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
        while ((count < USB_BUFFER_SIZE) && (!isBufferEmpty(buf))) {
 80007e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80007e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80007ea:	d805      	bhi.n	80007f8 <sendBuffer2usb+0x96>
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff ff01 	bl	80005f4 <isBufferEmpty>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d0c6      	beq.n	8000786 <sendBuffer2usb+0x24>
        }
        // Se transmiten los datos disponibles vía USB, aunque sean menos de USB_BUFFER_SIZE
        if (CDC_Transmit_FS(tempBufferOutput, count) != USBD_OK) {
 80007f8:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	4611      	mov	r1, r2
 8000802:	4618      	mov	r0, r3
 8000804:	f008 fb3e 	bl	8008e84 <CDC_Transmit_FS>
            // Manejo de error: aquí podrías reintentar la transmisión o registrar el error.
        }
    }
}
 8000808:	bf00      	nop
 800080a:	37d0      	adds	r7, #208	@ 0xd0
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <initECG>:
6156, 6159, 6162, 6165, 6168, 6171, 6174, 6177, 6180, 6182};




void initECG(){
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0

    for (int i = 0; i < ecg_size; i++) {
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	e021      	b.n	8000860 <initECG+0x50>
    	bufferWrite(&ecgBuffer, &ecg[i]);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	4a14      	ldr	r2, [pc, #80]	@ (8000874 <initECG+0x64>)
 8000822:	4413      	add	r3, r2
 8000824:	4619      	mov	r1, r3
 8000826:	4814      	ldr	r0, [pc, #80]	@ (8000878 <initECG+0x68>)
 8000828:	f7ff fefd 	bl	8000626 <bufferWrite>
    	ecg_uint8_t[i] = (uint8_t)((ecg[i]) >> 7);
 800082c:	4a11      	ldr	r2, [pc, #68]	@ (8000874 <initECG+0x64>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000834:	11db      	asrs	r3, r3, #7
 8000836:	b21b      	sxth	r3, r3
 8000838:	b2d9      	uxtb	r1, r3
 800083a:	4a10      	ldr	r2, [pc, #64]	@ (800087c <initECG+0x6c>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4413      	add	r3, r2
 8000840:	460a      	mov	r2, r1
 8000842:	701a      	strb	r2, [r3, #0]
        if(ecg_uint8_t[i] == 255){ecg_uint8_t[i] = 254;}
 8000844:	4a0d      	ldr	r2, [pc, #52]	@ (800087c <initECG+0x6c>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4413      	add	r3, r2
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2bff      	cmp	r3, #255	@ 0xff
 800084e:	d104      	bne.n	800085a <initECG+0x4a>
 8000850:	4a0a      	ldr	r2, [pc, #40]	@ (800087c <initECG+0x6c>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4413      	add	r3, r2
 8000856:	22fe      	movs	r2, #254	@ 0xfe
 8000858:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < ecg_size; i++) {
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3301      	adds	r3, #1
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000866:	dbd9      	blt.n	800081c <initECG+0xc>
    }
};
 8000868:	bf00      	nop
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20002008 	.word	0x20002008
 8000878:	20000000 	.word	0x20000000
 800087c:	200089ac 	.word	0x200089ac

08000880 <initFiltros>:
};



void initFiltros(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af02      	add	r7, sp, #8
//**********************************************************************************************************************************************************************************

//*************************************************************LOWPASS***************************************************************************************************************************
//inicializo lowpass_96k
static q15_t pState_lowpass_96k[BLOCK_SIZE + lowpass_96k_orden - 1];
arm_fir_init_q15(&fir_instance[fs_96k][lp], lowpass_96k_orden, lowpass_96k, pState_lowpass_96k, BLOCK_SIZE);
 8000886:	2301      	movs	r3, #1
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	4b78      	ldr	r3, [pc, #480]	@ (8000a6c <initFiltros+0x1ec>)
 800088c:	4a78      	ldr	r2, [pc, #480]	@ (8000a70 <initFiltros+0x1f0>)
 800088e:	2164      	movs	r1, #100	@ 0x64
 8000890:	4878      	ldr	r0, [pc, #480]	@ (8000a74 <initFiltros+0x1f4>)
 8000892:	f009 fb29 	bl	8009ee8 <arm_fir_init_q15>

static q15_t pState_lowpass_48k[BLOCK_SIZE + lowpass_48k_orden - 1];
arm_fir_init_q15(&fir_instance[fs_48k][lp], lowpass_48k_orden, lowpass_48k, pState_lowpass_48k, BLOCK_SIZE);
 8000896:	2301      	movs	r3, #1
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	4b77      	ldr	r3, [pc, #476]	@ (8000a78 <initFiltros+0x1f8>)
 800089c:	4a77      	ldr	r2, [pc, #476]	@ (8000a7c <initFiltros+0x1fc>)
 800089e:	2196      	movs	r1, #150	@ 0x96
 80008a0:	4877      	ldr	r0, [pc, #476]	@ (8000a80 <initFiltros+0x200>)
 80008a2:	f009 fb21 	bl	8009ee8 <arm_fir_init_q15>

//inicializo lowpass_44k
static q15_t pState_lowpass_44k[BLOCK_SIZE + lowpass_44k_orden - 1];
arm_fir_init_q15(&fir_instance[fs_44k][lp], lowpass_44k_orden, lowpass_44k, pState_lowpass_44k, BLOCK_SIZE);
 80008a6:	2301      	movs	r3, #1
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	4b76      	ldr	r3, [pc, #472]	@ (8000a84 <initFiltros+0x204>)
 80008ac:	4a76      	ldr	r2, [pc, #472]	@ (8000a88 <initFiltros+0x208>)
 80008ae:	21c8      	movs	r1, #200	@ 0xc8
 80008b0:	4876      	ldr	r0, [pc, #472]	@ (8000a8c <initFiltros+0x20c>)
 80008b2:	f009 fb19 	bl	8009ee8 <arm_fir_init_q15>

//inicializo lowpass_22k
static q15_t pState_lowpass_22k[BLOCK_SIZE + lowpass_22k_orden - 1];
arm_fir_init_q15(&fir_instance[fs_22k][lp], lowpass_22k_orden, lowpass_22k, pState_lowpass_22k, BLOCK_SIZE);
 80008b6:	2301      	movs	r3, #1
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	4b75      	ldr	r3, [pc, #468]	@ (8000a90 <initFiltros+0x210>)
 80008bc:	4a75      	ldr	r2, [pc, #468]	@ (8000a94 <initFiltros+0x214>)
 80008be:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80008c2:	4875      	ldr	r0, [pc, #468]	@ (8000a98 <initFiltros+0x218>)
 80008c4:	f009 fb10 	bl	8009ee8 <arm_fir_init_q15>

//inicializo lowpass_16k
static q15_t pState_lowpass_16k[BLOCK_SIZE + lowpass_16k_orden - 1];
arm_fir_init_q15(&fir_instance[fs_16k][lp], lowpass_16k_orden, lowpass_16k, pState_lowpass_16k, BLOCK_SIZE);
 80008c8:	2301      	movs	r3, #1
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	4b73      	ldr	r3, [pc, #460]	@ (8000a9c <initFiltros+0x21c>)
 80008ce:	4a74      	ldr	r2, [pc, #464]	@ (8000aa0 <initFiltros+0x220>)
 80008d0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80008d4:	4873      	ldr	r0, [pc, #460]	@ (8000aa4 <initFiltros+0x224>)
 80008d6:	f009 fb07 	bl	8009ee8 <arm_fir_init_q15>

//inicializo lowpass_8k
static q15_t pState_lowpass_8k[BLOCK_SIZE + lowpass_8k_orden - 1];
arm_fir_init_q15(&fir_instance[fs_8k][lp], lowpass_8k_orden, lowpass_8k, pState_lowpass_8k, BLOCK_SIZE);
 80008da:	2301      	movs	r3, #1
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	4b72      	ldr	r3, [pc, #456]	@ (8000aa8 <initFiltros+0x228>)
 80008e0:	4a72      	ldr	r2, [pc, #456]	@ (8000aac <initFiltros+0x22c>)
 80008e2:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80008e6:	4872      	ldr	r0, [pc, #456]	@ (8000ab0 <initFiltros+0x230>)
 80008e8:	f009 fafe 	bl	8009ee8 <arm_fir_init_q15>

//inicializo lowpass_1k
static q15_t pState_lowpass_1k[BLOCK_SIZE + lowpass_1k_orden - 1];
arm_fir_init_q15(&fir_instance[fs_1k][lp], lowpass_1k_orden, lowpass_1k, pState_lowpass_1k, BLOCK_SIZE);
 80008ec:	2301      	movs	r3, #1
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	4b70      	ldr	r3, [pc, #448]	@ (8000ab4 <initFiltros+0x234>)
 80008f2:	4a71      	ldr	r2, [pc, #452]	@ (8000ab8 <initFiltros+0x238>)
 80008f4:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 80008f8:	4870      	ldr	r0, [pc, #448]	@ (8000abc <initFiltros+0x23c>)
 80008fa:	f009 faf5 	bl	8009ee8 <arm_fir_init_q15>


//*************************************************************HIGHPASS***************************************************************
//inicializo highpass_96k
static q15_t pState_highpass_96k[BLOCK_SIZE + highpass_96k_orden - 1];
arm_fir_init_q15(&fir_instance[fs_96k][hp], highpass_96k_orden, highpass_96k, pState_highpass_96k, BLOCK_SIZE);
 80008fe:	2301      	movs	r3, #1
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	4b6f      	ldr	r3, [pc, #444]	@ (8000ac0 <initFiltros+0x240>)
 8000904:	4a6f      	ldr	r2, [pc, #444]	@ (8000ac4 <initFiltros+0x244>)
 8000906:	2164      	movs	r1, #100	@ 0x64
 8000908:	486f      	ldr	r0, [pc, #444]	@ (8000ac8 <initFiltros+0x248>)
 800090a:	f009 faed 	bl	8009ee8 <arm_fir_init_q15>

static q15_t pState_highpass_48k[BLOCK_SIZE + highpass_48k_orden - 1];
arm_fir_init_q15(&fir_instance[fs_48k][hp], highpass_48k_orden, highpass_48k, pState_highpass_48k, BLOCK_SIZE);
 800090e:	2301      	movs	r3, #1
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	4b6e      	ldr	r3, [pc, #440]	@ (8000acc <initFiltros+0x24c>)
 8000914:	4a6e      	ldr	r2, [pc, #440]	@ (8000ad0 <initFiltros+0x250>)
 8000916:	2197      	movs	r1, #151	@ 0x97
 8000918:	486e      	ldr	r0, [pc, #440]	@ (8000ad4 <initFiltros+0x254>)
 800091a:	f009 fae5 	bl	8009ee8 <arm_fir_init_q15>

//inicializo highpass_44k
static q15_t pState_highpass_44k[BLOCK_SIZE + highpass_44k_orden - 1];
arm_fir_init_q15(&fir_instance[fs_44k][hp], highpass_44k_orden, highpass_44k, pState_highpass_44k, BLOCK_SIZE);
 800091e:	2301      	movs	r3, #1
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	4b6d      	ldr	r3, [pc, #436]	@ (8000ad8 <initFiltros+0x258>)
 8000924:	4a6d      	ldr	r2, [pc, #436]	@ (8000adc <initFiltros+0x25c>)
 8000926:	21c9      	movs	r1, #201	@ 0xc9
 8000928:	486d      	ldr	r0, [pc, #436]	@ (8000ae0 <initFiltros+0x260>)
 800092a:	f009 fadd 	bl	8009ee8 <arm_fir_init_q15>

//inicializo highpass_22k
static q15_t pState_highpass_22k[BLOCK_SIZE + highpass_22k_orden - 1];
arm_fir_init_q15(&fir_instance[fs_22k][hp], highpass_22k_orden, highpass_22k, pState_highpass_22k, BLOCK_SIZE);
 800092e:	2301      	movs	r3, #1
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	4b6c      	ldr	r3, [pc, #432]	@ (8000ae4 <initFiltros+0x264>)
 8000934:	4a6c      	ldr	r2, [pc, #432]	@ (8000ae8 <initFiltros+0x268>)
 8000936:	f240 1141 	movw	r1, #321	@ 0x141
 800093a:	486c      	ldr	r0, [pc, #432]	@ (8000aec <initFiltros+0x26c>)
 800093c:	f009 fad4 	bl	8009ee8 <arm_fir_init_q15>

//inicializo highpass_16k
static q15_t pState_highpass_16k[BLOCK_SIZE + highpass_16k_orden - 1];
arm_fir_init_q15(&fir_instance[fs_16k][hp], highpass_16k_orden, highpass_16k, pState_highpass_16k, BLOCK_SIZE);
 8000940:	2301      	movs	r3, #1
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	4b6a      	ldr	r3, [pc, #424]	@ (8000af0 <initFiltros+0x270>)
 8000946:	4a6b      	ldr	r2, [pc, #428]	@ (8000af4 <initFiltros+0x274>)
 8000948:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800094c:	486a      	ldr	r0, [pc, #424]	@ (8000af8 <initFiltros+0x278>)
 800094e:	f009 facb 	bl	8009ee8 <arm_fir_init_q15>

//inicializo highpass_8k
static q15_t pState_highpass_8k[BLOCK_SIZE + highpass_8k_orden - 1];
arm_fir_init_q15(&fir_instance[fs_8k][hp], highpass_8k_orden, highpass_8k, pState_highpass_8k, BLOCK_SIZE);
 8000952:	2301      	movs	r3, #1
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	4b69      	ldr	r3, [pc, #420]	@ (8000afc <initFiltros+0x27c>)
 8000958:	4a69      	ldr	r2, [pc, #420]	@ (8000b00 <initFiltros+0x280>)
 800095a:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800095e:	4869      	ldr	r0, [pc, #420]	@ (8000b04 <initFiltros+0x284>)
 8000960:	f009 fac2 	bl	8009ee8 <arm_fir_init_q15>

//inicializo highpass_1k
static q15_t pState_highpass_1k[BLOCK_SIZE + highpass_1k_orden - 1];
arm_fir_init_q15(&fir_instance[fs_1k][hp], highpass_1k_orden, highpass_1k, pState_highpass_1k, BLOCK_SIZE);
 8000964:	2301      	movs	r3, #1
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	4b67      	ldr	r3, [pc, #412]	@ (8000b08 <initFiltros+0x288>)
 800096a:	4a68      	ldr	r2, [pc, #416]	@ (8000b0c <initFiltros+0x28c>)
 800096c:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000970:	4867      	ldr	r0, [pc, #412]	@ (8000b10 <initFiltros+0x290>)
 8000972:	f009 fab9 	bl	8009ee8 <arm_fir_init_q15>


//*************************************************************BANDPASS***************************************************************
//inicializo bandpass_96k
static q15_t pState_bandpass_96k[BLOCK_SIZE + bandpass_96k_orden - 1];
arm_fir_init_q15(&fir_instance[fs_96k][bp], bandpass_96k_orden, bandpass_96k, pState_bandpass_96k, BLOCK_SIZE);
 8000976:	2301      	movs	r3, #1
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	4b66      	ldr	r3, [pc, #408]	@ (8000b14 <initFiltros+0x294>)
 800097c:	4a66      	ldr	r2, [pc, #408]	@ (8000b18 <initFiltros+0x298>)
 800097e:	2164      	movs	r1, #100	@ 0x64
 8000980:	4866      	ldr	r0, [pc, #408]	@ (8000b1c <initFiltros+0x29c>)
 8000982:	f009 fab1 	bl	8009ee8 <arm_fir_init_q15>

//inicializo bandpass_48k
static q15_t pState_bandpass_48k[BLOCK_SIZE + bandpass_48k_orden - 1];
arm_fir_init_q15(&fir_instance[fs_48k][bp], bandpass_48k_orden, bandpass_48k, pState_bandpass_48k, BLOCK_SIZE);
 8000986:	2301      	movs	r3, #1
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	4b65      	ldr	r3, [pc, #404]	@ (8000b20 <initFiltros+0x2a0>)
 800098c:	4a65      	ldr	r2, [pc, #404]	@ (8000b24 <initFiltros+0x2a4>)
 800098e:	2196      	movs	r1, #150	@ 0x96
 8000990:	4865      	ldr	r0, [pc, #404]	@ (8000b28 <initFiltros+0x2a8>)
 8000992:	f009 faa9 	bl	8009ee8 <arm_fir_init_q15>

//inicializo bandpass_44k
static q15_t pState_bandpass_44k[BLOCK_SIZE + bandpass_44k_orden - 1];
arm_fir_init_q15(&fir_instance[fs_44k][bp], bandpass_44k_orden, bandpass_44k, pState_bandpass_44k, BLOCK_SIZE);
 8000996:	2301      	movs	r3, #1
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	4b64      	ldr	r3, [pc, #400]	@ (8000b2c <initFiltros+0x2ac>)
 800099c:	4a64      	ldr	r2, [pc, #400]	@ (8000b30 <initFiltros+0x2b0>)
 800099e:	21c8      	movs	r1, #200	@ 0xc8
 80009a0:	4864      	ldr	r0, [pc, #400]	@ (8000b34 <initFiltros+0x2b4>)
 80009a2:	f009 faa1 	bl	8009ee8 <arm_fir_init_q15>

//inicializo bandpass_22k
static q15_t pState_bandpass_22k[BLOCK_SIZE + bandpass_22k_orden - 1];
arm_fir_init_q15(&fir_instance[fs_22k][bp], bandpass_22k_orden, bandpass_22k, pState_bandpass_22k, BLOCK_SIZE);
 80009a6:	2301      	movs	r3, #1
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	4b63      	ldr	r3, [pc, #396]	@ (8000b38 <initFiltros+0x2b8>)
 80009ac:	4a63      	ldr	r2, [pc, #396]	@ (8000b3c <initFiltros+0x2bc>)
 80009ae:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80009b2:	4863      	ldr	r0, [pc, #396]	@ (8000b40 <initFiltros+0x2c0>)
 80009b4:	f009 fa98 	bl	8009ee8 <arm_fir_init_q15>

//inicializo bandpass_16k
static q15_t pState_bandpass_16k[BLOCK_SIZE + bandpass_16k_orden - 1];
arm_fir_init_q15(&fir_instance[fs_16k][bp], bandpass_16k_orden, bandpass_16k, pState_bandpass_16k, BLOCK_SIZE);
 80009b8:	2301      	movs	r3, #1
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	4b61      	ldr	r3, [pc, #388]	@ (8000b44 <initFiltros+0x2c4>)
 80009be:	4a62      	ldr	r2, [pc, #392]	@ (8000b48 <initFiltros+0x2c8>)
 80009c0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80009c4:	4861      	ldr	r0, [pc, #388]	@ (8000b4c <initFiltros+0x2cc>)
 80009c6:	f009 fa8f 	bl	8009ee8 <arm_fir_init_q15>

//inicializo bandpass_8k
static q15_t pState_bandpass_8k[BLOCK_SIZE + bandpass_8k_orden - 1];
arm_fir_init_q15(&fir_instance[fs_8k][bp], bandpass_8k_orden, bandpass_8k, pState_bandpass_8k, BLOCK_SIZE);
 80009ca:	2301      	movs	r3, #1
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	4b60      	ldr	r3, [pc, #384]	@ (8000b50 <initFiltros+0x2d0>)
 80009d0:	4a60      	ldr	r2, [pc, #384]	@ (8000b54 <initFiltros+0x2d4>)
 80009d2:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80009d6:	4860      	ldr	r0, [pc, #384]	@ (8000b58 <initFiltros+0x2d8>)
 80009d8:	f009 fa86 	bl	8009ee8 <arm_fir_init_q15>

//inicializo bandpass_1k
static q15_t pState_bandpass_1k[BLOCK_SIZE + bandpass_1k_orden - 1];
arm_fir_init_q15(&fir_instance[fs_1k][bp], bandpass_1k_orden, bandpass_1k, pState_bandpass_1k, BLOCK_SIZE);
 80009dc:	2301      	movs	r3, #1
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	4b5e      	ldr	r3, [pc, #376]	@ (8000b5c <initFiltros+0x2dc>)
 80009e2:	4a5f      	ldr	r2, [pc, #380]	@ (8000b60 <initFiltros+0x2e0>)
 80009e4:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80009e8:	485e      	ldr	r0, [pc, #376]	@ (8000b64 <initFiltros+0x2e4>)
 80009ea:	f009 fa7d 	bl	8009ee8 <arm_fir_init_q15>


//*************************************************************NOTCH******************************************************************
//inicializo notch_96k
static q15_t pState_notch_96k[BLOCK_SIZE + notch_96k_orden - 1];
arm_fir_init_q15(&fir_instance[fs_96k][n], notch_96k_orden, notch_96k, pState_notch_96k, BLOCK_SIZE);
 80009ee:	2301      	movs	r3, #1
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	4b5d      	ldr	r3, [pc, #372]	@ (8000b68 <initFiltros+0x2e8>)
 80009f4:	4a5d      	ldr	r2, [pc, #372]	@ (8000b6c <initFiltros+0x2ec>)
 80009f6:	2166      	movs	r1, #102	@ 0x66
 80009f8:	485d      	ldr	r0, [pc, #372]	@ (8000b70 <initFiltros+0x2f0>)
 80009fa:	f009 fa75 	bl	8009ee8 <arm_fir_init_q15>

//inicializo notch_48k
static q15_t pState_notch_48k[BLOCK_SIZE + notch_48k_orden - 1];
arm_fir_init_q15(&fir_instance[fs_48k][n], notch_48k_orden, notch_48k, pState_notch_48k, BLOCK_SIZE);
 80009fe:	2301      	movs	r3, #1
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	4b5c      	ldr	r3, [pc, #368]	@ (8000b74 <initFiltros+0x2f4>)
 8000a04:	4a5c      	ldr	r2, [pc, #368]	@ (8000b78 <initFiltros+0x2f8>)
 8000a06:	2198      	movs	r1, #152	@ 0x98
 8000a08:	485c      	ldr	r0, [pc, #368]	@ (8000b7c <initFiltros+0x2fc>)
 8000a0a:	f009 fa6d 	bl	8009ee8 <arm_fir_init_q15>

//inicializo notch_44k
static q15_t pState_notch_44k[BLOCK_SIZE + notch_44k_orden - 1];
arm_fir_init_q15(&fir_instance[fs_44k][n], notch_44k_orden, notch_44k, pState_notch_44k, BLOCK_SIZE);
 8000a0e:	2301      	movs	r3, #1
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	4b5b      	ldr	r3, [pc, #364]	@ (8000b80 <initFiltros+0x300>)
 8000a14:	4a5b      	ldr	r2, [pc, #364]	@ (8000b84 <initFiltros+0x304>)
 8000a16:	21ca      	movs	r1, #202	@ 0xca
 8000a18:	485b      	ldr	r0, [pc, #364]	@ (8000b88 <initFiltros+0x308>)
 8000a1a:	f009 fa65 	bl	8009ee8 <arm_fir_init_q15>

//inicializo notch_22k
static q15_t pState_notch_22k[BLOCK_SIZE + notch_22k_orden - 1];
arm_fir_init_q15(&fir_instance[fs_22k][n], notch_22k_orden, notch_22k, pState_notch_22k, BLOCK_SIZE);
 8000a1e:	2301      	movs	r3, #1
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	4b5a      	ldr	r3, [pc, #360]	@ (8000b8c <initFiltros+0x30c>)
 8000a24:	4a5a      	ldr	r2, [pc, #360]	@ (8000b90 <initFiltros+0x310>)
 8000a26:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 8000a2a:	485a      	ldr	r0, [pc, #360]	@ (8000b94 <initFiltros+0x314>)
 8000a2c:	f009 fa5c 	bl	8009ee8 <arm_fir_init_q15>

//inicializo notch_16k
static q15_t pState_notch_16k[BLOCK_SIZE + notch_16k_orden - 1];
arm_fir_init_q15(&fir_instance[fs_16k][n], notch_16k_orden, notch_16k, pState_notch_16k, BLOCK_SIZE);
 8000a30:	2301      	movs	r3, #1
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	4b58      	ldr	r3, [pc, #352]	@ (8000b98 <initFiltros+0x318>)
 8000a36:	4a59      	ldr	r2, [pc, #356]	@ (8000b9c <initFiltros+0x31c>)
 8000a38:	f44f 71c9 	mov.w	r1, #402	@ 0x192
 8000a3c:	4858      	ldr	r0, [pc, #352]	@ (8000ba0 <initFiltros+0x320>)
 8000a3e:	f009 fa53 	bl	8009ee8 <arm_fir_init_q15>

//inicializo notch_8k
static q15_t pState_notch_8k[BLOCK_SIZE + notch_8k_orden - 1];
arm_fir_init_q15(&fir_instance[fs_8k][n], notch_8k_orden, notch_8k, pState_notch_8k, BLOCK_SIZE);
 8000a42:	2301      	movs	r3, #1
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	4b57      	ldr	r3, [pc, #348]	@ (8000ba4 <initFiltros+0x324>)
 8000a48:	4a57      	ldr	r2, [pc, #348]	@ (8000ba8 <initFiltros+0x328>)
 8000a4a:	f240 3122 	movw	r1, #802	@ 0x322
 8000a4e:	4857      	ldr	r0, [pc, #348]	@ (8000bac <initFiltros+0x32c>)
 8000a50:	f009 fa4a 	bl	8009ee8 <arm_fir_init_q15>

//inicializo notch_1k
static q15_t pState_notch_1k[BLOCK_SIZE + notch_1k_orden - 1];
arm_fir_init_q15(&fir_instance[fs_1k][n], notch_1k_orden, notch_1k, pState_notch_1k, BLOCK_SIZE);
 8000a54:	2301      	movs	r3, #1
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	4b55      	ldr	r3, [pc, #340]	@ (8000bb0 <initFiltros+0x330>)
 8000a5a:	4a56      	ldr	r2, [pc, #344]	@ (8000bb4 <initFiltros+0x334>)
 8000a5c:	f240 51de 	movw	r1, #1502	@ 0x5de
 8000a60:	4855      	ldr	r0, [pc, #340]	@ (8000bb8 <initFiltros+0x338>)
 8000a62:	f009 fa41 	bl	8009ee8 <arm_fir_init_q15>
//************************************************************************************************************************************

}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20008d94 	.word	0x20008d94
 8000a70:	0800ab4c 	.word	0x0800ab4c
 8000a74:	200135e8 	.word	0x200135e8
 8000a78:	20008e5c 	.word	0x20008e5c
 8000a7c:	0800ac14 	.word	0x0800ac14
 8000a80:	200135b8 	.word	0x200135b8
 8000a84:	20008f88 	.word	0x20008f88
 8000a88:	0800ad40 	.word	0x0800ad40
 8000a8c:	20013588 	.word	0x20013588
 8000a90:	20009118 	.word	0x20009118
 8000a94:	0800aed0 	.word	0x0800aed0
 8000a98:	20013558 	.word	0x20013558
 8000a9c:	20009398 	.word	0x20009398
 8000aa0:	0800b150 	.word	0x0800b150
 8000aa4:	20013528 	.word	0x20013528
 8000aa8:	200096b8 	.word	0x200096b8
 8000aac:	0800b470 	.word	0x0800b470
 8000ab0:	200134f8 	.word	0x200134f8
 8000ab4:	20009cf8 	.word	0x20009cf8
 8000ab8:	0800bab0 	.word	0x0800bab0
 8000abc:	200134c8 	.word	0x200134c8
 8000ac0:	2000a8b0 	.word	0x2000a8b0
 8000ac4:	0800c668 	.word	0x0800c668
 8000ac8:	200135f4 	.word	0x200135f4
 8000acc:	2000a978 	.word	0x2000a978
 8000ad0:	0800c730 	.word	0x0800c730
 8000ad4:	200135c4 	.word	0x200135c4
 8000ad8:	2000aaa8 	.word	0x2000aaa8
 8000adc:	0800c860 	.word	0x0800c860
 8000ae0:	20013594 	.word	0x20013594
 8000ae4:	2000ac3c 	.word	0x2000ac3c
 8000ae8:	0800c9f4 	.word	0x0800c9f4
 8000aec:	20013564 	.word	0x20013564
 8000af0:	2000aec0 	.word	0x2000aec0
 8000af4:	0800cc78 	.word	0x0800cc78
 8000af8:	20013534 	.word	0x20013534
 8000afc:	2000b1e0 	.word	0x2000b1e0
 8000b00:	0800cf98 	.word	0x0800cf98
 8000b04:	20013504 	.word	0x20013504
 8000b08:	2000b820 	.word	0x2000b820
 8000b0c:	0800d5d8 	.word	0x0800d5d8
 8000b10:	200134d4 	.word	0x200134d4
 8000b14:	2000c3d8 	.word	0x2000c3d8
 8000b18:	0800e190 	.word	0x0800e190
 8000b1c:	20013600 	.word	0x20013600
 8000b20:	2000c4a0 	.word	0x2000c4a0
 8000b24:	0800e258 	.word	0x0800e258
 8000b28:	200135d0 	.word	0x200135d0
 8000b2c:	2000c5cc 	.word	0x2000c5cc
 8000b30:	0800e384 	.word	0x0800e384
 8000b34:	200135a0 	.word	0x200135a0
 8000b38:	2000c75c 	.word	0x2000c75c
 8000b3c:	0800e514 	.word	0x0800e514
 8000b40:	20013570 	.word	0x20013570
 8000b44:	2000c9dc 	.word	0x2000c9dc
 8000b48:	0800e794 	.word	0x0800e794
 8000b4c:	20013540 	.word	0x20013540
 8000b50:	2000ccfc 	.word	0x2000ccfc
 8000b54:	0800eab4 	.word	0x0800eab4
 8000b58:	20013510 	.word	0x20013510
 8000b5c:	2000d33c 	.word	0x2000d33c
 8000b60:	0800f0f4 	.word	0x0800f0f4
 8000b64:	200134e0 	.word	0x200134e0
 8000b68:	2000d97c 	.word	0x2000d97c
 8000b6c:	0800f734 	.word	0x0800f734
 8000b70:	2001360c 	.word	0x2001360c
 8000b74:	2000da48 	.word	0x2000da48
 8000b78:	0800f800 	.word	0x0800f800
 8000b7c:	200135dc 	.word	0x200135dc
 8000b80:	2000db78 	.word	0x2000db78
 8000b84:	0800f930 	.word	0x0800f930
 8000b88:	200135ac 	.word	0x200135ac
 8000b8c:	2000dd0c 	.word	0x2000dd0c
 8000b90:	0800fac4 	.word	0x0800fac4
 8000b94:	2001357c 	.word	0x2001357c
 8000b98:	2000df90 	.word	0x2000df90
 8000b9c:	0800fd48 	.word	0x0800fd48
 8000ba0:	2001354c 	.word	0x2001354c
 8000ba4:	2000e2b4 	.word	0x2000e2b4
 8000ba8:	0801006c 	.word	0x0801006c
 8000bac:	2001351c 	.word	0x2001351c
 8000bb0:	2000e8f8 	.word	0x2000e8f8
 8000bb4:	080106b0 	.word	0x080106b0
 8000bb8:	200134ec 	.word	0x200134ec

08000bbc <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08c      	sub	sp, #48	@ 0x30
 8000bc0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61bb      	str	r3, [r7, #24]
 8000bd6:	4b9e      	ldr	r3, [pc, #632]	@ (8000e50 <MX_GPIO_Init+0x294>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	4a9d      	ldr	r2, [pc, #628]	@ (8000e50 <MX_GPIO_Init+0x294>)
 8000bdc:	f043 0310 	orr.w	r3, r3, #16
 8000be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be2:	4b9b      	ldr	r3, [pc, #620]	@ (8000e50 <MX_GPIO_Init+0x294>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	f003 0310 	and.w	r3, r3, #16
 8000bea:	61bb      	str	r3, [r7, #24]
 8000bec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
 8000bf2:	4b97      	ldr	r3, [pc, #604]	@ (8000e50 <MX_GPIO_Init+0x294>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	4a96      	ldr	r2, [pc, #600]	@ (8000e50 <MX_GPIO_Init+0x294>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfe:	4b94      	ldr	r3, [pc, #592]	@ (8000e50 <MX_GPIO_Init+0x294>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b90      	ldr	r3, [pc, #576]	@ (8000e50 <MX_GPIO_Init+0x294>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a8f      	ldr	r2, [pc, #572]	@ (8000e50 <MX_GPIO_Init+0x294>)
 8000c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b8d      	ldr	r3, [pc, #564]	@ (8000e50 <MX_GPIO_Init+0x294>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b89      	ldr	r3, [pc, #548]	@ (8000e50 <MX_GPIO_Init+0x294>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	4a88      	ldr	r2, [pc, #544]	@ (8000e50 <MX_GPIO_Init+0x294>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c36:	4b86      	ldr	r3, [pc, #536]	@ (8000e50 <MX_GPIO_Init+0x294>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	4b82      	ldr	r3, [pc, #520]	@ (8000e50 <MX_GPIO_Init+0x294>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	4a81      	ldr	r2, [pc, #516]	@ (8000e50 <MX_GPIO_Init+0x294>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c52:	4b7f      	ldr	r3, [pc, #508]	@ (8000e50 <MX_GPIO_Init+0x294>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b7b      	ldr	r3, [pc, #492]	@ (8000e50 <MX_GPIO_Init+0x294>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	4a7a      	ldr	r2, [pc, #488]	@ (8000e50 <MX_GPIO_Init+0x294>)
 8000c68:	f043 0308 	orr.w	r3, r3, #8
 8000c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6e:	4b78      	ldr	r3, [pc, #480]	@ (8000e50 <MX_GPIO_Init+0x294>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	f003 0308 	and.w	r3, r3, #8
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2108      	movs	r1, #8
 8000c7e:	4875      	ldr	r0, [pc, #468]	@ (8000e54 <MX_GPIO_Init+0x298>)
 8000c80:	f002 f840 	bl	8002d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	2101      	movs	r1, #1
 8000c88:	4873      	ldr	r0, [pc, #460]	@ (8000e58 <MX_GPIO_Init+0x29c>)
 8000c8a:	f002 f83b 	bl	8002d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_VERDE_Pin|LED_NARANJA_Pin|LED_ROJO_Pin|LED_AZUL_Pin
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000c94:	4871      	ldr	r0, [pc, #452]	@ (8000e5c <MX_GPIO_Init+0x2a0>)
 8000c96:	f002 f835 	bl	8002d04 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c9a:	2308      	movs	r3, #8
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4868      	ldr	r0, [pc, #416]	@ (8000e54 <MX_GPIO_Init+0x298>)
 8000cb2:	f001 fe8b 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4862      	ldr	r0, [pc, #392]	@ (8000e58 <MX_GPIO_Init+0x29c>)
 8000cce:	f001 fe7d 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cd2:	2308      	movs	r3, #8
 8000cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	4619      	mov	r1, r3
 8000cec:	485a      	ldr	r0, [pc, #360]	@ (8000e58 <MX_GPIO_Init+0x29c>)
 8000cee:	f001 fe6d 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_BUTTON_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cf6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4619      	mov	r1, r3
 8000d06:	4856      	ldr	r0, [pc, #344]	@ (8000e60 <MX_GPIO_Init+0x2a4>)
 8000d08:	f001 fe60 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d0c:	2310      	movs	r3, #16
 8000d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d1c:	2306      	movs	r3, #6
 8000d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	4619      	mov	r1, r3
 8000d26:	484e      	ldr	r0, [pc, #312]	@ (8000e60 <MX_GPIO_Init+0x2a4>)
 8000d28:	f001 fe50 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d2c:	23e0      	movs	r3, #224	@ 0xe0
 8000d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d3c:	2305      	movs	r3, #5
 8000d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	4846      	ldr	r0, [pc, #280]	@ (8000e60 <MX_GPIO_Init+0x2a4>)
 8000d48:	f001 fe40 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d50:	2300      	movs	r3, #0
 8000d52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4841      	ldr	r0, [pc, #260]	@ (8000e64 <MX_GPIO_Init+0x2a8>)
 8000d60:	f001 fe34 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d76:	2305      	movs	r3, #5
 8000d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000d7a:	f107 031c 	add.w	r3, r7, #28
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4838      	ldr	r0, [pc, #224]	@ (8000e64 <MX_GPIO_Init+0x2a8>)
 8000d82:	f001 fe23 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_VERDE_Pin LED_NARANJA_Pin LED_ROJO_Pin LED_AZUL_Pin */
  GPIO_InitStruct.Pin = LED_VERDE_Pin|LED_NARANJA_Pin|LED_ROJO_Pin|LED_AZUL_Pin;
 8000d86:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d90:	2302      	movs	r3, #2
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	482f      	ldr	r0, [pc, #188]	@ (8000e5c <MX_GPIO_Init+0x2a0>)
 8000da0:	f001 fe14 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000da4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000db6:	2306      	movs	r3, #6
 8000db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4825      	ldr	r0, [pc, #148]	@ (8000e58 <MX_GPIO_Init+0x29c>)
 8000dc2:	f001 fe03 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8000dc6:	2310      	movs	r3, #16
 8000dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	481f      	ldr	r0, [pc, #124]	@ (8000e5c <MX_GPIO_Init+0x2a0>)
 8000dde:	f001 fdf5 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000de2:	2320      	movs	r3, #32
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	4619      	mov	r1, r3
 8000df4:	4819      	ldr	r0, [pc, #100]	@ (8000e5c <MX_GPIO_Init+0x2a0>)
 8000df6:	f001 fde9 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000dfa:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000dfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e00:	2312      	movs	r3, #18
 8000e02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e10:	f107 031c 	add.w	r3, r7, #28
 8000e14:	4619      	mov	r1, r3
 8000e16:	4813      	ldr	r0, [pc, #76]	@ (8000e64 <MX_GPIO_Init+0x2a8>)
 8000e18:	f001 fdd8 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e20:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4808      	ldr	r0, [pc, #32]	@ (8000e54 <MX_GPIO_Init+0x298>)
 8000e32:	f001 fdcb 	bl	80029cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 2);
 8000e36:	2202      	movs	r2, #2
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2006      	movs	r0, #6
 8000e3c:	f001 fd8f 	bl	800295e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e40:	2006      	movs	r0, #6
 8000e42:	f001 fda8 	bl	8002996 <HAL_NVIC_EnableIRQ>

}
 8000e46:	bf00      	nop
 8000e48:	3730      	adds	r7, #48	@ 0x30
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40020800 	.word	0x40020800
 8000e5c:	40020c00 	.word	0x40020c00
 8000e60:	40020000 	.word	0x40020000
 8000e64:	40020400 	.word	0x40020400

08000e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e6c:	f000 ff4e 	bl	8001d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e70:	f000 f8de 	bl	8001030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e74:	f7ff fea2 	bl	8000bbc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e78:	f7ff fb1e 	bl	80004b8 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000e7c:	f007 ff2a 	bl	8008cd4 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000e80:	f000 fdc6 	bl	8001a10 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000e84:	f000 fe90 	bl	8001ba8 <MX_TIM6_Init>
  MX_TIM5_Init();
 8000e88:	f000 fe28 	bl	8001adc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000e8c:	4857      	ldr	r0, [pc, #348]	@ (8000fec <main+0x184>)
 8000e8e:	f003 fe7d 	bl	8004b8c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim6);
 8000e92:	4857      	ldr	r0, [pc, #348]	@ (8000ff0 <main+0x188>)
 8000e94:	f003 fe7a 	bl	8004b8c <HAL_TIM_Base_Start>

  initFiltros();
 8000e98:	f7ff fcf2 	bl	8000880 <initFiltros>
  initECG();
 8000e9c:	f7ff fcb8 	bl	8000810 <initECG>
  arm_rfft_init_q15(&fftInstance, effective_buffer_size, 0, 1);
 8000ea0:	4b54      	ldr	r3, [pc, #336]	@ (8000ff4 <main+0x18c>)
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	2200      	movs	r2, #0
 8000eac:	4852      	ldr	r0, [pc, #328]	@ (8000ff8 <main+0x190>)
 8000eae:	f008 fddb 	bl	8009a68 <arm_rfft_init_q15>
  HAL_GPIO_WritePin(GPIOD, LED_VERDE, 1);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eb8:	4850      	ldr	r0, [pc, #320]	@ (8000ffc <main+0x194>)
 8000eba:	f001 ff23 	bl	8002d04 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim5);
 8000ebe:	4850      	ldr	r0, [pc, #320]	@ (8001000 <main+0x198>)
 8000ec0:	f003 fef4 	bl	8004cac <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 8000ec4:	484f      	ldr	r0, [pc, #316]	@ (8001004 <main+0x19c>)
 8000ec6:	f000 fffb 	bl	8001ec0 <HAL_ADC_Start_IT>
  HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2032      	movs	r0, #50	@ 0x32
 8000ed0:	f001 fd45 	bl	800295e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000ed4:	2032      	movs	r0, #50	@ 0x32
 8000ed6:	f001 fd5e 	bl	8002996 <HAL_NVIC_EnableIRQ>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  checkUSBRecive();
 8000eda:	f000 f99f 	bl	800121c <checkUSBRecive>

	if(ECG_flag == 1){
 8000ede:	4b4a      	ldr	r3, [pc, #296]	@ (8001008 <main+0x1a0>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d11b      	bne.n	8000f20 <main+0xb8>
		if(ecg_index == ecg_size - 1){ecg_index = 1;}
 8000ee8:	4b48      	ldr	r3, [pc, #288]	@ (800100c <main+0x1a4>)
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d102      	bne.n	8000efa <main+0x92>
 8000ef4:	4b45      	ldr	r3, [pc, #276]	@ (800100c <main+0x1a4>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	801a      	strh	r2, [r3, #0]
		HAL_Delay(0.5);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 ff78 	bl	8001df0 <HAL_Delay>

		ecg_index++;
 8000f00:	4b42      	ldr	r3, [pc, #264]	@ (800100c <main+0x1a4>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	3301      	adds	r3, #1
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	4b40      	ldr	r3, [pc, #256]	@ (800100c <main+0x1a4>)
 8000f0a:	801a      	strh	r2, [r3, #0]


	CDC_Transmit_FS(&ecg_uint8_t[ecg_index], 1);
 8000f0c:	4b3f      	ldr	r3, [pc, #252]	@ (800100c <main+0x1a4>)
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b3f      	ldr	r3, [pc, #252]	@ (8001010 <main+0x1a8>)
 8000f14:	4413      	add	r3, r2
 8000f16:	2101      	movs	r1, #1
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f007 ffb3 	bl	8008e84 <CDC_Transmit_FS>
 8000f1e:	e7dc      	b.n	8000eda <main+0x72>

	}
else{
	  if(FFT_flag == 1 && FIR_flag == 1){
 8000f20:	4b3c      	ldr	r3, [pc, #240]	@ (8001014 <main+0x1ac>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d119      	bne.n	8000f5e <main+0xf6>
 8000f2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001018 <main+0x1b0>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d114      	bne.n	8000f5e <main+0xf6>
		  if(SEND_flag == 1) sendBuffer2usb(&filteredBuffer);
 8000f34:	4b39      	ldr	r3, [pc, #228]	@ (800101c <main+0x1b4>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d102      	bne.n	8000f44 <main+0xdc>
 8000f3e:	4838      	ldr	r0, [pc, #224]	@ (8001020 <main+0x1b8>)
 8000f40:	f7ff fc0f 	bl	8000762 <sendBuffer2usb>
		  if(fft_send_flag == 1) computeFFT(&filteredBuffer, &fftBuffer, effective_buffer_size);
 8000f44:	4b37      	ldr	r3, [pc, #220]	@ (8001024 <main+0x1bc>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d14d      	bne.n	8000fe8 <main+0x180>
 8000f4c:	4b29      	ldr	r3, [pc, #164]	@ (8000ff4 <main+0x18c>)
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	461a      	mov	r2, r3
 8000f54:	4934      	ldr	r1, [pc, #208]	@ (8001028 <main+0x1c0>)
 8000f56:	4832      	ldr	r0, [pc, #200]	@ (8001020 <main+0x1b8>)
 8000f58:	f000 fb74 	bl	8001644 <computeFFT>
 8000f5c:	e044      	b.n	8000fe8 <main+0x180>
	  }
	  else if(FFT_flag == 1 && FIR_flag == 0){
 8000f5e:	4b2d      	ldr	r3, [pc, #180]	@ (8001014 <main+0x1ac>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d119      	bne.n	8000f9c <main+0x134>
 8000f68:	4b2b      	ldr	r3, [pc, #172]	@ (8001018 <main+0x1b0>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d114      	bne.n	8000f9c <main+0x134>
		  if(SEND_flag == 1)sendBuffer2usb(&adcBuffer);
 8000f72:	4b2a      	ldr	r3, [pc, #168]	@ (800101c <main+0x1b4>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d102      	bne.n	8000f82 <main+0x11a>
 8000f7c:	482b      	ldr	r0, [pc, #172]	@ (800102c <main+0x1c4>)
 8000f7e:	f7ff fbf0 	bl	8000762 <sendBuffer2usb>
		  if(fft_send_flag == 1) computeFFT(&adcBuffer, &fftBuffer, effective_buffer_size);
 8000f82:	4b28      	ldr	r3, [pc, #160]	@ (8001024 <main+0x1bc>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d12e      	bne.n	8000fe8 <main+0x180>
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff4 <main+0x18c>)
 8000f8c:	881b      	ldrh	r3, [r3, #0]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	461a      	mov	r2, r3
 8000f92:	4925      	ldr	r1, [pc, #148]	@ (8001028 <main+0x1c0>)
 8000f94:	4825      	ldr	r0, [pc, #148]	@ (800102c <main+0x1c4>)
 8000f96:	f000 fb55 	bl	8001644 <computeFFT>
 8000f9a:	e025      	b.n	8000fe8 <main+0x180>
	  }
	  else if(FFT_flag == 0 && FIR_flag == 1){
 8000f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001014 <main+0x1ac>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10d      	bne.n	8000fc2 <main+0x15a>
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8001018 <main+0x1b0>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d108      	bne.n	8000fc2 <main+0x15a>
		  if(SEND_flag == 1) sendBuffer2usb(&filteredBuffer);
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800101c <main+0x1b4>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d116      	bne.n	8000fe8 <main+0x180>
 8000fba:	4819      	ldr	r0, [pc, #100]	@ (8001020 <main+0x1b8>)
 8000fbc:	f7ff fbd1 	bl	8000762 <sendBuffer2usb>
 8000fc0:	e012      	b.n	8000fe8 <main+0x180>
	  }
	  else if(FFT_flag == 0 && FIR_flag == 0){
 8000fc2:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <main+0x1ac>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d186      	bne.n	8000eda <main+0x72>
 8000fcc:	4b12      	ldr	r3, [pc, #72]	@ (8001018 <main+0x1b0>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d181      	bne.n	8000eda <main+0x72>
		  if(SEND_flag == 1) sendBuffer2usb(&adcBuffer);
 8000fd6:	4b11      	ldr	r3, [pc, #68]	@ (800101c <main+0x1b4>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	f47f af7c 	bne.w	8000eda <main+0x72>
 8000fe2:	4812      	ldr	r0, [pc, #72]	@ (800102c <main+0x1c4>)
 8000fe4:	f7ff fbbd 	bl	8000762 <sendBuffer2usb>
	  checkUSBRecive();
 8000fe8:	e777      	b.n	8000eda <main+0x72>
 8000fea:	bf00      	nop
 8000fec:	20013638 	.word	0x20013638
 8000ff0:	200136c8 	.word	0x200136c8
 8000ff4:	200087fa 	.word	0x200087fa
 8000ff8:	2001361c 	.word	0x2001361c
 8000ffc:	40020c00 	.word	0x40020c00
 8001000:	20013680 	.word	0x20013680
 8001004:	20008964 	.word	0x20008964
 8001008:	2000f4b5 	.word	0x2000f4b5
 800100c:	20013634 	.word	0x20013634
 8001010:	200089ac 	.word	0x200089ac
 8001014:	2000f4b6 	.word	0x2000f4b6
 8001018:	2000f4b4 	.word	0x2000f4b4
 800101c:	200027e0 	.word	0x200027e0
 8001020:	200047ec 	.word	0x200047ec
 8001024:	2000f4b7 	.word	0x2000f4b7
 8001028:	200067f4 	.word	0x200067f4
 800102c:	200027e4 	.word	0x200027e4

08001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b094      	sub	sp, #80	@ 0x50
 8001034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001036:	f107 0320 	add.w	r3, r7, #32
 800103a:	2230      	movs	r2, #48	@ 0x30
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f009 fcea 	bl	800aa18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	4b28      	ldr	r3, [pc, #160]	@ (80010fc <SystemClock_Config+0xcc>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105c:	4a27      	ldr	r2, [pc, #156]	@ (80010fc <SystemClock_Config+0xcc>)
 800105e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001062:	6413      	str	r3, [r2, #64]	@ 0x40
 8001064:	4b25      	ldr	r3, [pc, #148]	@ (80010fc <SystemClock_Config+0xcc>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001068:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001070:	2300      	movs	r3, #0
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	4b22      	ldr	r3, [pc, #136]	@ (8001100 <SystemClock_Config+0xd0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a21      	ldr	r2, [pc, #132]	@ (8001100 <SystemClock_Config+0xd0>)
 800107a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	4b1f      	ldr	r3, [pc, #124]	@ (8001100 <SystemClock_Config+0xd0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800108c:	2301      	movs	r3, #1
 800108e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001090:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001094:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001096:	2302      	movs	r3, #2
 8001098:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800109a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800109e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010a0:	2304      	movs	r3, #4
 80010a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010a4:	23a8      	movs	r3, #168	@ 0xa8
 80010a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010a8:	2302      	movs	r3, #2
 80010aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010ac:	2307      	movs	r3, #7
 80010ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b0:	f107 0320 	add.w	r3, r7, #32
 80010b4:	4618      	mov	r0, r3
 80010b6:	f003 f8a9 	bl	800420c <HAL_RCC_OscConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010c0:	f000 fc12 	bl	80018e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c4:	230f      	movs	r3, #15
 80010c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c8:	2302      	movs	r3, #2
 80010ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010d0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2105      	movs	r1, #5
 80010e2:	4618      	mov	r0, r3
 80010e4:	f003 fb0a 	bl	80046fc <HAL_RCC_ClockConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010ee:	f000 fbfb 	bl	80018e8 <Error_Handler>
  }
}
 80010f2:	bf00      	nop
 80010f4:	3750      	adds	r7, #80	@ 0x50
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800
 8001100:	40007000 	.word	0x40007000

08001104 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	uint16_t adcValue = HAL_ADC_GetValue(hadc);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f001 f902 	bl	8002316 <HAL_ADC_GetValue>
 8001112:	4603      	mov	r3, r0
 8001114:	81fb      	strh	r3, [r7, #14]

	// Escalar el valor ADC de 0–4095 a Q15 (–32768 a 32767)
	q15_t adcValueFix = (adcValue << 4) - 32768; // Escala 12 bits -> Q15
 8001116:	89fb      	ldrh	r3, [r7, #14]
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	b29b      	uxth	r3, r3
 800111c:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8001120:	b29b      	uxth	r3, r3
 8001122:	b21b      	sxth	r3, r3
 8001124:	81bb      	strh	r3, [r7, #12]

	bufferWrite(&adcBuffer, &adcValueFix); //Cargo el valor muestreado en el buffer circular adcBuffer
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	4619      	mov	r1, r3
 800112c:	482f      	ldr	r0, [pc, #188]	@ (80011ec <HAL_ADC_ConvCpltCallback+0xe8>)
 800112e:	f7ff fa7a 	bl	8000626 <bufferWrite>



	if(FIR_flag == 1){
 8001132:	4b2f      	ldr	r3, [pc, #188]	@ (80011f0 <HAL_ADC_ConvCpltCallback+0xec>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b01      	cmp	r3, #1
 800113a:	d142      	bne.n	80011c2 <HAL_ADC_ConvCpltCallback+0xbe>

			bufferRead(&adcBuffer, &filterInput[adcIndex]); //Leo el valor muestreado desde adcBuffer y lo coloco en el auxiliar dataIn
 800113c:	4b2d      	ldr	r3, [pc, #180]	@ (80011f4 <HAL_ADC_ConvCpltCallback+0xf0>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	4a2d      	ldr	r2, [pc, #180]	@ (80011f8 <HAL_ADC_ConvCpltCallback+0xf4>)
 8001144:	4413      	add	r3, r2
 8001146:	4619      	mov	r1, r3
 8001148:	4828      	ldr	r0, [pc, #160]	@ (80011ec <HAL_ADC_ConvCpltCallback+0xe8>)
 800114a:	f7ff faa3 	bl	8000694 <bufferRead>

			if(ECG_flag == 1){
 800114e:	4b2b      	ldr	r3, [pc, #172]	@ (80011fc <HAL_ADC_ConvCpltCallback+0xf8>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b01      	cmp	r3, #1
 8001156:	d10d      	bne.n	8001174 <HAL_ADC_ConvCpltCallback+0x70>
			arm_fir_q15(&fir_instance_ECG, &filterInput[0] + adcIndex, &filterOutput[0] + adcIndex, BLOCK_SIZE);
 8001158:	4b26      	ldr	r3, [pc, #152]	@ (80011f4 <HAL_ADC_ConvCpltCallback+0xf0>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4a26      	ldr	r2, [pc, #152]	@ (80011f8 <HAL_ADC_ConvCpltCallback+0xf4>)
 8001160:	1899      	adds	r1, r3, r2
 8001162:	4b24      	ldr	r3, [pc, #144]	@ (80011f4 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	4a25      	ldr	r2, [pc, #148]	@ (8001200 <HAL_ADC_ConvCpltCallback+0xfc>)
 800116a:	441a      	add	r2, r3
 800116c:	2301      	movs	r3, #1
 800116e:	4825      	ldr	r0, [pc, #148]	@ (8001204 <HAL_ADC_ConvCpltCallback+0x100>)
 8001170:	f008 fcf6 	bl	8009b60 <arm_fir_q15>
			}

			//htim6.Instance->CNT=0;
			arm_fir_q15(&fir_instance[fs][filtro], &filterInput[0] + adcIndex, &filterOutput[0] + adcIndex, BLOCK_SIZE);
 8001174:	4b24      	ldr	r3, [pc, #144]	@ (8001208 <HAL_ADC_ConvCpltCallback+0x104>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	4b24      	ldr	r3, [pc, #144]	@ (800120c <HAL_ADC_ConvCpltCallback+0x108>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	0052      	lsls	r2, r2, #1
 8001182:	441a      	add	r2, r3
 8001184:	0093      	lsls	r3, r2, #2
 8001186:	461a      	mov	r2, r3
 8001188:	460b      	mov	r3, r1
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	440b      	add	r3, r1
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	4413      	add	r3, r2
 8001192:	4a1f      	ldr	r2, [pc, #124]	@ (8001210 <HAL_ADC_ConvCpltCallback+0x10c>)
 8001194:	1898      	adds	r0, r3, r2
 8001196:	4b17      	ldr	r3, [pc, #92]	@ (80011f4 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	4a16      	ldr	r2, [pc, #88]	@ (80011f8 <HAL_ADC_ConvCpltCallback+0xf4>)
 800119e:	1899      	adds	r1, r3, r2
 80011a0:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <HAL_ADC_ConvCpltCallback+0xf0>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	4a16      	ldr	r2, [pc, #88]	@ (8001200 <HAL_ADC_ConvCpltCallback+0xfc>)
 80011a8:	441a      	add	r2, r3
 80011aa:	2301      	movs	r3, #1
 80011ac:	f008 fcd8 	bl	8009b60 <arm_fir_q15>
			//timer6_value = __HAL_TIM_GET_COUNTER(&htim6);

			bufferWrite(&filteredBuffer, &filterOutput[adcIndex]); //Cargo el auxiliar dataOut en el buffer circular filteredBuffer
 80011b0:	4b10      	ldr	r3, [pc, #64]	@ (80011f4 <HAL_ADC_ConvCpltCallback+0xf0>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4a12      	ldr	r2, [pc, #72]	@ (8001200 <HAL_ADC_ConvCpltCallback+0xfc>)
 80011b8:	4413      	add	r3, r2
 80011ba:	4619      	mov	r1, r3
 80011bc:	4815      	ldr	r0, [pc, #84]	@ (8001214 <HAL_ADC_ConvCpltCallback+0x110>)
 80011be:	f7ff fa32 	bl	8000626 <bufferWrite>

		}

	if(adcIndex == effective_buffer_size){
 80011c2:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <HAL_ADC_ConvCpltCallback+0xf0>)
 80011c4:	881a      	ldrh	r2, [r3, #0]
 80011c6:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <HAL_ADC_ConvCpltCallback+0x114>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d102      	bne.n	80011d6 <HAL_ADC_ConvCpltCallback+0xd2>
		adcIndex = 0;
 80011d0:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <HAL_ADC_ConvCpltCallback+0xf0>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	801a      	strh	r2, [r3, #0]
	}

	adcIndex++;
 80011d6:	4b07      	ldr	r3, [pc, #28]	@ (80011f4 <HAL_ADC_ConvCpltCallback+0xf0>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	3301      	adds	r3, #1
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <HAL_ADC_ConvCpltCallback+0xf0>)
 80011e0:	801a      	strh	r2, [r3, #0]

}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200027e4 	.word	0x200027e4
 80011f0:	2000f4b4 	.word	0x2000f4b4
 80011f4:	2000f4b8 	.word	0x2000f4b8
 80011f8:	2000f4bc 	.word	0x2000f4bc
 80011fc:	2000f4b5 	.word	0x2000f4b5
 8001200:	200114bc 	.word	0x200114bc
 8001204:	200134bc 	.word	0x200134bc
 8001208:	200067f2 	.word	0x200067f2
 800120c:	20013618 	.word	0x20013618
 8001210:	200134c8 	.word	0x200134c8
 8001214:	200047ec 	.word	0x200047ec
 8001218:	200087fa 	.word	0x200087fa

0800121c <checkUSBRecive>:

void checkUSBRecive(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
    if (newCommandFlag)
 8001222:	4b95      	ldr	r3, [pc, #596]	@ (8001478 <checkUSBRecive+0x25c>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	f000 81d8 	beq.w	80015de <checkUSBRecive+0x3c2>
    {
		HAL_TIM_Base_Stop(&htim2);
 800122e:	4893      	ldr	r0, [pc, #588]	@ (800147c <checkUSBRecive+0x260>)
 8001230:	f003 fd14 	bl	8004c5c <HAL_TIM_Base_Stop>
		HAL_ADC_Stop_IT(&hadc1);
 8001234:	4892      	ldr	r0, [pc, #584]	@ (8001480 <checkUSBRecive+0x264>)
 8001236:	f000 ff21 	bl	800207c <HAL_ADC_Stop_IT>

		newCommandFlag = 0;
 800123a:	4b8f      	ldr	r3, [pc, #572]	@ (8001478 <checkUSBRecive+0x25c>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOD, LED_AZUL, 1);
 8001240:	2201      	movs	r2, #1
 8001242:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001246:	488f      	ldr	r0, [pc, #572]	@ (8001484 <checkUSBRecive+0x268>)
 8001248:	f001 fd5c 	bl	8002d04 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800124c:	2064      	movs	r0, #100	@ 0x64
 800124e:	f000 fdcf 	bl	8001df0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, LED_AZUL, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001258:	488a      	ldr	r0, [pc, #552]	@ (8001484 <checkUSBRecive+0x268>)
 800125a:	f001 fd53 	bl	8002d04 <HAL_GPIO_WritePin>

        		/*	Cambiar Fsampling	*/
        if (strncmp((char*)usbCmdBuffer, "FS:", 3) == 0) {
 800125e:	2203      	movs	r2, #3
 8001260:	4989      	ldr	r1, [pc, #548]	@ (8001488 <checkUSBRecive+0x26c>)
 8001262:	488a      	ldr	r0, [pc, #552]	@ (800148c <checkUSBRecive+0x270>)
 8001264:	f009 fbe0 	bl	800aa28 <strncmp>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d15c      	bne.n	8001328 <checkUSBRecive+0x10c>
            newFS = atoi((char*)(usbCmdBuffer + 3));
 800126e:	4b88      	ldr	r3, [pc, #544]	@ (8001490 <checkUSBRecive+0x274>)
 8001270:	4618      	mov	r0, r3
 8001272:	f009 fb49 	bl	800a908 <atoi>
 8001276:	4603      	mov	r3, r0
 8001278:	461a      	mov	r2, r3
 800127a:	4b86      	ldr	r3, [pc, #536]	@ (8001494 <checkUSBRecive+0x278>)
 800127c:	601a      	str	r2, [r3, #0]
            tim2_ARR = (84000000 / newFS) - 1;
 800127e:	4b85      	ldr	r3, [pc, #532]	@ (8001494 <checkUSBRecive+0x278>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a85      	ldr	r2, [pc, #532]	@ (8001498 <checkUSBRecive+0x27c>)
 8001284:	fbb2 f3f3 	udiv	r3, r2, r3
 8001288:	3b01      	subs	r3, #1
 800128a:	4a84      	ldr	r2, [pc, #528]	@ (800149c <checkUSBRecive+0x280>)
 800128c:	6013      	str	r3, [r2, #0]
            if (newFS == 1000){fs = fs_1k;}
 800128e:	4b81      	ldr	r3, [pc, #516]	@ (8001494 <checkUSBRecive+0x278>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001296:	d103      	bne.n	80012a0 <checkUSBRecive+0x84>
 8001298:	4b81      	ldr	r3, [pc, #516]	@ (80014a0 <checkUSBRecive+0x284>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	e037      	b.n	8001310 <checkUSBRecive+0xf4>
            else if(newFS == 8000){fs = fs_8k;}
 80012a0:	4b7c      	ldr	r3, [pc, #496]	@ (8001494 <checkUSBRecive+0x278>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80012a8:	d103      	bne.n	80012b2 <checkUSBRecive+0x96>
 80012aa:	4b7d      	ldr	r3, [pc, #500]	@ (80014a0 <checkUSBRecive+0x284>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	701a      	strb	r2, [r3, #0]
 80012b0:	e02e      	b.n	8001310 <checkUSBRecive+0xf4>
            else if(newFS == 16000){fs = fs_16k;}
 80012b2:	4b78      	ldr	r3, [pc, #480]	@ (8001494 <checkUSBRecive+0x278>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80012ba:	d103      	bne.n	80012c4 <checkUSBRecive+0xa8>
 80012bc:	4b78      	ldr	r3, [pc, #480]	@ (80014a0 <checkUSBRecive+0x284>)
 80012be:	2202      	movs	r2, #2
 80012c0:	701a      	strb	r2, [r3, #0]
 80012c2:	e025      	b.n	8001310 <checkUSBRecive+0xf4>
            else if(newFS == 22000){fs = fs_22k;}
 80012c4:	4b73      	ldr	r3, [pc, #460]	@ (8001494 <checkUSBRecive+0x278>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f245 52f0 	movw	r2, #22000	@ 0x55f0
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d103      	bne.n	80012d8 <checkUSBRecive+0xbc>
 80012d0:	4b73      	ldr	r3, [pc, #460]	@ (80014a0 <checkUSBRecive+0x284>)
 80012d2:	2203      	movs	r2, #3
 80012d4:	701a      	strb	r2, [r3, #0]
 80012d6:	e01b      	b.n	8001310 <checkUSBRecive+0xf4>
            else if(newFS == 44000){fs = fs_44k;}
 80012d8:	4b6e      	ldr	r3, [pc, #440]	@ (8001494 <checkUSBRecive+0x278>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f64a 32e0 	movw	r2, #44000	@ 0xabe0
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d103      	bne.n	80012ec <checkUSBRecive+0xd0>
 80012e4:	4b6e      	ldr	r3, [pc, #440]	@ (80014a0 <checkUSBRecive+0x284>)
 80012e6:	2204      	movs	r2, #4
 80012e8:	701a      	strb	r2, [r3, #0]
 80012ea:	e011      	b.n	8001310 <checkUSBRecive+0xf4>
            else if(newFS == 48000){fs = fs_48k;}
 80012ec:	4b69      	ldr	r3, [pc, #420]	@ (8001494 <checkUSBRecive+0x278>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d103      	bne.n	8001300 <checkUSBRecive+0xe4>
 80012f8:	4b69      	ldr	r3, [pc, #420]	@ (80014a0 <checkUSBRecive+0x284>)
 80012fa:	2205      	movs	r2, #5
 80012fc:	701a      	strb	r2, [r3, #0]
 80012fe:	e007      	b.n	8001310 <checkUSBRecive+0xf4>
            else if(newFS == 96000){fs = fs_96k;}
 8001300:	4b64      	ldr	r3, [pc, #400]	@ (8001494 <checkUSBRecive+0x278>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a67      	ldr	r2, [pc, #412]	@ (80014a4 <checkUSBRecive+0x288>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d102      	bne.n	8001310 <checkUSBRecive+0xf4>
 800130a:	4b65      	ldr	r3, [pc, #404]	@ (80014a0 <checkUSBRecive+0x284>)
 800130c:	2206      	movs	r2, #6
 800130e:	701a      	strb	r2, [r3, #0]
            adcIndex = 0;
 8001310:	4b65      	ldr	r3, [pc, #404]	@ (80014a8 <checkUSBRecive+0x28c>)
 8001312:	2200      	movs	r2, #0
 8001314:	801a      	strh	r2, [r3, #0]
            __HAL_TIM_SET_AUTORELOAD(&htim2, tim2_ARR);
 8001316:	4b59      	ldr	r3, [pc, #356]	@ (800147c <checkUSBRecive+0x260>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a60      	ldr	r2, [pc, #384]	@ (800149c <checkUSBRecive+0x280>)
 800131c:	6812      	ldr	r2, [r2, #0]
 800131e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001320:	4b5e      	ldr	r3, [pc, #376]	@ (800149c <checkUSBRecive+0x280>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a55      	ldr	r2, [pc, #340]	@ (800147c <checkUSBRecive+0x260>)
 8001326:	60d3      	str	r3, [r2, #12]
        }

        if(strncmp((char*)usbCmdBuffer, "BS:", 3) == 0){
 8001328:	2203      	movs	r2, #3
 800132a:	4960      	ldr	r1, [pc, #384]	@ (80014ac <checkUSBRecive+0x290>)
 800132c:	4857      	ldr	r0, [pc, #348]	@ (800148c <checkUSBRecive+0x270>)
 800132e:	f009 fb7b 	bl	800aa28 <strncmp>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d146      	bne.n	80013c6 <checkUSBRecive+0x1aa>
      	  effective_buffer_size = atoi((char*)(usbCmdBuffer + 3));
 8001338:	4b55      	ldr	r3, [pc, #340]	@ (8001490 <checkUSBRecive+0x274>)
 800133a:	4618      	mov	r0, r3
 800133c:	f009 fae4 	bl	800a908 <atoi>
 8001340:	4603      	mov	r3, r0
 8001342:	b29a      	uxth	r2, r3
 8001344:	4b5a      	ldr	r3, [pc, #360]	@ (80014b0 <checkUSBRecive+0x294>)
 8001346:	801a      	strh	r2, [r3, #0]
      	  adcBuffer.effective_size = effective_buffer_size;
 8001348:	4b59      	ldr	r3, [pc, #356]	@ (80014b0 <checkUSBRecive+0x294>)
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	b29a      	uxth	r2, r3
 800134e:	4b59      	ldr	r3, [pc, #356]	@ (80014b4 <checkUSBRecive+0x298>)
 8001350:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001354:	809a      	strh	r2, [r3, #4]
		  filteredBuffer.effective_size = effective_buffer_size;
 8001356:	4b56      	ldr	r3, [pc, #344]	@ (80014b0 <checkUSBRecive+0x294>)
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	b29a      	uxth	r2, r3
 800135c:	4b56      	ldr	r3, [pc, #344]	@ (80014b8 <checkUSBRecive+0x29c>)
 800135e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001362:	809a      	strh	r2, [r3, #4]
		  fftBuffer.effective_size = effective_buffer_size;
 8001364:	4b52      	ldr	r3, [pc, #328]	@ (80014b0 <checkUSBRecive+0x294>)
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	b29a      	uxth	r2, r3
 800136a:	4b54      	ldr	r3, [pc, #336]	@ (80014bc <checkUSBRecive+0x2a0>)
 800136c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001370:	809a      	strh	r2, [r3, #4]
		  adcBuffer.head = adcBuffer.tail = 0;
 8001372:	2100      	movs	r1, #0
 8001374:	4b4f      	ldr	r3, [pc, #316]	@ (80014b4 <checkUSBRecive+0x298>)
 8001376:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800137a:	460a      	mov	r2, r1
 800137c:	805a      	strh	r2, [r3, #2]
 800137e:	4b4d      	ldr	r3, [pc, #308]	@ (80014b4 <checkUSBRecive+0x298>)
 8001380:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001384:	460a      	mov	r2, r1
 8001386:	801a      	strh	r2, [r3, #0]
		  filteredBuffer.head = filteredBuffer.tail = 0;
 8001388:	2100      	movs	r1, #0
 800138a:	4b4b      	ldr	r3, [pc, #300]	@ (80014b8 <checkUSBRecive+0x29c>)
 800138c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001390:	460a      	mov	r2, r1
 8001392:	805a      	strh	r2, [r3, #2]
 8001394:	4b48      	ldr	r3, [pc, #288]	@ (80014b8 <checkUSBRecive+0x29c>)
 8001396:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800139a:	460a      	mov	r2, r1
 800139c:	801a      	strh	r2, [r3, #0]
		  fftBuffer.head = fftBuffer.tail = 0;
 800139e:	2100      	movs	r1, #0
 80013a0:	4b46      	ldr	r3, [pc, #280]	@ (80014bc <checkUSBRecive+0x2a0>)
 80013a2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80013a6:	460a      	mov	r2, r1
 80013a8:	805a      	strh	r2, [r3, #2]
 80013aa:	4b44      	ldr	r3, [pc, #272]	@ (80014bc <checkUSBRecive+0x2a0>)
 80013ac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80013b0:	460a      	mov	r2, r1
 80013b2:	801a      	strh	r2, [r3, #0]
		   // Re-inicializar la FFT con el nuevo tamaño
		  arm_rfft_init_q15(&fftInstance, effective_buffer_size, 0, 1);
 80013b4:	4b3e      	ldr	r3, [pc, #248]	@ (80014b0 <checkUSBRecive+0x294>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	4619      	mov	r1, r3
 80013bc:	2301      	movs	r3, #1
 80013be:	2200      	movs	r2, #0
 80013c0:	483f      	ldr	r0, [pc, #252]	@ (80014c0 <checkUSBRecive+0x2a4>)
 80013c2:	f008 fb51 	bl	8009a68 <arm_rfft_init_q15>
          	  }

        		/*	Cambiar filtro fir	*/
		if (strncmp((char*)usbCmdBuffer, "f_fir:", 6) == 0) {
 80013c6:	2206      	movs	r2, #6
 80013c8:	493e      	ldr	r1, [pc, #248]	@ (80014c4 <checkUSBRecive+0x2a8>)
 80013ca:	4830      	ldr	r0, [pc, #192]	@ (800148c <checkUSBRecive+0x270>)
 80013cc:	f009 fb2c 	bl	800aa28 <strncmp>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d123      	bne.n	800141e <checkUSBRecive+0x202>
			uint8_t rx = atoi((char*)(usbCmdBuffer + 6));
 80013d6:	4b3c      	ldr	r3, [pc, #240]	@ (80014c8 <checkUSBRecive+0x2ac>)
 80013d8:	4618      	mov	r0, r3
 80013da:	f009 fa95 	bl	800a908 <atoi>
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
			adcIndex = 0;
 80013e2:	4b31      	ldr	r3, [pc, #196]	@ (80014a8 <checkUSBRecive+0x28c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	801a      	strh	r2, [r3, #0]
			if (rx == lp){filtro = lp;}
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d103      	bne.n	80013f6 <checkUSBRecive+0x1da>
 80013ee:	4b37      	ldr	r3, [pc, #220]	@ (80014cc <checkUSBRecive+0x2b0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
 80013f4:	e013      	b.n	800141e <checkUSBRecive+0x202>
			else if(rx == hp){filtro = hp;}
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d103      	bne.n	8001404 <checkUSBRecive+0x1e8>
 80013fc:	4b33      	ldr	r3, [pc, #204]	@ (80014cc <checkUSBRecive+0x2b0>)
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
 8001402:	e00c      	b.n	800141e <checkUSBRecive+0x202>
			else if(rx == n){filtro = n;}
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	2b03      	cmp	r3, #3
 8001408:	d103      	bne.n	8001412 <checkUSBRecive+0x1f6>
 800140a:	4b30      	ldr	r3, [pc, #192]	@ (80014cc <checkUSBRecive+0x2b0>)
 800140c:	2203      	movs	r2, #3
 800140e:	701a      	strb	r2, [r3, #0]
 8001410:	e005      	b.n	800141e <checkUSBRecive+0x202>
			else if(rx == bp){filtro = bp;}
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d102      	bne.n	800141e <checkUSBRecive+0x202>
 8001418:	4b2c      	ldr	r3, [pc, #176]	@ (80014cc <checkUSBRecive+0x2b0>)
 800141a:	2202      	movs	r2, #2
 800141c:	701a      	strb	r2, [r3, #0]

		}

		/*	Activar/desactivar adquisición en modo ECG	*/
		if (strncmp((char*)usbCmdBuffer, "ECG:", 4) == 0) {
 800141e:	2204      	movs	r2, #4
 8001420:	492b      	ldr	r1, [pc, #172]	@ (80014d0 <checkUSBRecive+0x2b4>)
 8001422:	481a      	ldr	r0, [pc, #104]	@ (800148c <checkUSBRecive+0x270>)
 8001424:	f009 fb00 	bl	800aa28 <strncmp>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d161      	bne.n	80014f2 <checkUSBRecive+0x2d6>
			ECG_flag = atoi((char*)(usbCmdBuffer + 4));
 800142e:	4b29      	ldr	r3, [pc, #164]	@ (80014d4 <checkUSBRecive+0x2b8>)
 8001430:	4618      	mov	r0, r3
 8001432:	f009 fa69 	bl	800a908 <atoi>
 8001436:	4603      	mov	r3, r0
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4b27      	ldr	r3, [pc, #156]	@ (80014d8 <checkUSBRecive+0x2bc>)
 800143c:	701a      	strb	r2, [r3, #0]
			if(ECG_flag == 1){
 800143e:	4b26      	ldr	r3, [pc, #152]	@ (80014d8 <checkUSBRecive+0x2bc>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b01      	cmp	r3, #1
 8001446:	d149      	bne.n	80014dc <checkUSBRecive+0x2c0>
				HAL_GPIO_WritePin(GPIOD, LED_ROJO, 1);
 8001448:	2201      	movs	r2, #1
 800144a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800144e:	480d      	ldr	r0, [pc, #52]	@ (8001484 <checkUSBRecive+0x268>)
 8001450:	f001 fc58 	bl	8002d04 <HAL_GPIO_WritePin>
				tim2_ARR = 1000;
 8001454:	4b11      	ldr	r3, [pc, #68]	@ (800149c <checkUSBRecive+0x280>)
 8001456:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800145a:	601a      	str	r2, [r3, #0]
				fs = fs_1k;
 800145c:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <checkUSBRecive+0x284>)
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_AUTORELOAD(&htim2, tim2_ARR);
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <checkUSBRecive+0x260>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a0d      	ldr	r2, [pc, #52]	@ (800149c <checkUSBRecive+0x280>)
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800146c:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <checkUSBRecive+0x280>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a02      	ldr	r2, [pc, #8]	@ (800147c <checkUSBRecive+0x260>)
 8001472:	60d3      	str	r3, [r2, #12]
 8001474:	e03d      	b.n	80014f2 <checkUSBRecive+0x2d6>
 8001476:	bf00      	nop
 8001478:	200139fe 	.word	0x200139fe
 800147c:	20013638 	.word	0x20013638
 8001480:	20008964 	.word	0x20008964
 8001484:	40020c00 	.word	0x40020c00
 8001488:	0800aad4 	.word	0x0800aad4
 800148c:	200139f4 	.word	0x200139f4
 8001490:	200139f7 	.word	0x200139f7
 8001494:	200027d8 	.word	0x200027d8
 8001498:	0501bd00 	.word	0x0501bd00
 800149c:	200027dc 	.word	0x200027dc
 80014a0:	200067f2 	.word	0x200067f2
 80014a4:	00017700 	.word	0x00017700
 80014a8:	2000f4b8 	.word	0x2000f4b8
 80014ac:	0800aad8 	.word	0x0800aad8
 80014b0:	200087fa 	.word	0x200087fa
 80014b4:	200027e4 	.word	0x200027e4
 80014b8:	200047ec 	.word	0x200047ec
 80014bc:	200067f4 	.word	0x200067f4
 80014c0:	2001361c 	.word	0x2001361c
 80014c4:	0800aadc 	.word	0x0800aadc
 80014c8:	200139fa 	.word	0x200139fa
 80014cc:	20013618 	.word	0x20013618
 80014d0:	0800aae4 	.word	0x0800aae4
 80014d4:	200139f8 	.word	0x200139f8
 80014d8:	2000f4b5 	.word	0x2000f4b5
			}
			else if(ECG_flag == 0){HAL_GPIO_WritePin(GPIOD, LED_ROJO, 0);}
 80014dc:	4b45      	ldr	r3, [pc, #276]	@ (80015f4 <checkUSBRecive+0x3d8>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d105      	bne.n	80014f2 <checkUSBRecive+0x2d6>
 80014e6:	2200      	movs	r2, #0
 80014e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014ec:	4842      	ldr	r0, [pc, #264]	@ (80015f8 <checkUSBRecive+0x3dc>)
 80014ee:	f001 fc09 	bl	8002d04 <HAL_GPIO_WritePin>
		}

			/*	Activar/desactivar filtrado FIR	*/
		if (strncmp((char*)usbCmdBuffer, "FIR:", 4) == 0) {
 80014f2:	2204      	movs	r2, #4
 80014f4:	4941      	ldr	r1, [pc, #260]	@ (80015fc <checkUSBRecive+0x3e0>)
 80014f6:	4842      	ldr	r0, [pc, #264]	@ (8001600 <checkUSBRecive+0x3e4>)
 80014f8:	f009 fa96 	bl	800aa28 <strncmp>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d119      	bne.n	8001536 <checkUSBRecive+0x31a>
			FIR_flag = atoi((char*)(usbCmdBuffer + 4));
 8001502:	4b40      	ldr	r3, [pc, #256]	@ (8001604 <checkUSBRecive+0x3e8>)
 8001504:	4618      	mov	r0, r3
 8001506:	f009 f9ff 	bl	800a908 <atoi>
 800150a:	4603      	mov	r3, r0
 800150c:	b2da      	uxtb	r2, r3
 800150e:	4b3e      	ldr	r3, [pc, #248]	@ (8001608 <checkUSBRecive+0x3ec>)
 8001510:	701a      	strb	r2, [r3, #0]
			if(FIR_flag == 1){HAL_GPIO_WritePin(GPIOD, LED_ROJO, 1);}
 8001512:	4b3d      	ldr	r3, [pc, #244]	@ (8001608 <checkUSBRecive+0x3ec>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b01      	cmp	r3, #1
 800151a:	d106      	bne.n	800152a <checkUSBRecive+0x30e>
 800151c:	2201      	movs	r2, #1
 800151e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001522:	4835      	ldr	r0, [pc, #212]	@ (80015f8 <checkUSBRecive+0x3dc>)
 8001524:	f001 fbee 	bl	8002d04 <HAL_GPIO_WritePin>
 8001528:	e005      	b.n	8001536 <checkUSBRecive+0x31a>
			else{HAL_GPIO_WritePin(GPIOD, LED_ROJO, 0);}
 800152a:	2200      	movs	r2, #0
 800152c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001530:	4831      	ldr	r0, [pc, #196]	@ (80015f8 <checkUSBRecive+0x3dc>)
 8001532:	f001 fbe7 	bl	8002d04 <HAL_GPIO_WritePin>
		}

			/*	Activar/desactivar calculo de FFT	*/
		if (strncmp((char*)usbCmdBuffer, "FFT:", 4) == 0) {
 8001536:	2204      	movs	r2, #4
 8001538:	4934      	ldr	r1, [pc, #208]	@ (800160c <checkUSBRecive+0x3f0>)
 800153a:	4831      	ldr	r0, [pc, #196]	@ (8001600 <checkUSBRecive+0x3e4>)
 800153c:	f009 fa74 	bl	800aa28 <strncmp>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d119      	bne.n	800157a <checkUSBRecive+0x35e>
			FFT_flag = atoi((char*)(usbCmdBuffer + 4));
 8001546:	4b2f      	ldr	r3, [pc, #188]	@ (8001604 <checkUSBRecive+0x3e8>)
 8001548:	4618      	mov	r0, r3
 800154a:	f009 f9dd 	bl	800a908 <atoi>
 800154e:	4603      	mov	r3, r0
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4b2f      	ldr	r3, [pc, #188]	@ (8001610 <checkUSBRecive+0x3f4>)
 8001554:	701a      	strb	r2, [r3, #0]
			if(FFT_flag == 1){HAL_GPIO_WritePin(GPIOD, LED_NARANJA, 1);}
 8001556:	4b2e      	ldr	r3, [pc, #184]	@ (8001610 <checkUSBRecive+0x3f4>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b01      	cmp	r3, #1
 800155e:	d106      	bne.n	800156e <checkUSBRecive+0x352>
 8001560:	2201      	movs	r2, #1
 8001562:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001566:	4824      	ldr	r0, [pc, #144]	@ (80015f8 <checkUSBRecive+0x3dc>)
 8001568:	f001 fbcc 	bl	8002d04 <HAL_GPIO_WritePin>
 800156c:	e005      	b.n	800157a <checkUSBRecive+0x35e>
			else{HAL_GPIO_WritePin(GPIOD, LED_NARANJA, 0);}
 800156e:	2200      	movs	r2, #0
 8001570:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001574:	4820      	ldr	r0, [pc, #128]	@ (80015f8 <checkUSBRecive+0x3dc>)
 8001576:	f001 fbc5 	bl	8002d04 <HAL_GPIO_WritePin>
		}

			/*	Activar/desactivar envio de señal muestreda	*/
		if (strncmp((char*)usbCmdBuffer, "SEND:", 5) == 0) {
 800157a:	2205      	movs	r2, #5
 800157c:	4925      	ldr	r1, [pc, #148]	@ (8001614 <checkUSBRecive+0x3f8>)
 800157e:	4820      	ldr	r0, [pc, #128]	@ (8001600 <checkUSBRecive+0x3e4>)
 8001580:	f009 fa52 	bl	800aa28 <strncmp>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d119      	bne.n	80015be <checkUSBRecive+0x3a2>
			SEND_flag = atoi((char*)(usbCmdBuffer + 5));
 800158a:	4b23      	ldr	r3, [pc, #140]	@ (8001618 <checkUSBRecive+0x3fc>)
 800158c:	4618      	mov	r0, r3
 800158e:	f009 f9bb 	bl	800a908 <atoi>
 8001592:	4603      	mov	r3, r0
 8001594:	b2da      	uxtb	r2, r3
 8001596:	4b21      	ldr	r3, [pc, #132]	@ (800161c <checkUSBRecive+0x400>)
 8001598:	701a      	strb	r2, [r3, #0]
			if(SEND_flag == 1){HAL_GPIO_WritePin(GPIOD, LED_VERDE, 1);}
 800159a:	4b20      	ldr	r3, [pc, #128]	@ (800161c <checkUSBRecive+0x400>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d106      	bne.n	80015b2 <checkUSBRecive+0x396>
 80015a4:	2201      	movs	r2, #1
 80015a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015aa:	4813      	ldr	r0, [pc, #76]	@ (80015f8 <checkUSBRecive+0x3dc>)
 80015ac:	f001 fbaa 	bl	8002d04 <HAL_GPIO_WritePin>
 80015b0:	e005      	b.n	80015be <checkUSBRecive+0x3a2>
			else{HAL_GPIO_WritePin(GPIOD, LED_VERDE, 0);}
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015b8:	480f      	ldr	r0, [pc, #60]	@ (80015f8 <checkUSBRecive+0x3dc>)
 80015ba:	f001 fba3 	bl	8002d04 <HAL_GPIO_WritePin>
		}

		if (strncmp((char*)usbCmdBuffer, "ECG:", 4) == 0) {
 80015be:	2204      	movs	r2, #4
 80015c0:	4917      	ldr	r1, [pc, #92]	@ (8001620 <checkUSBRecive+0x404>)
 80015c2:	480f      	ldr	r0, [pc, #60]	@ (8001600 <checkUSBRecive+0x3e4>)
 80015c4:	f009 fa30 	bl	800aa28 <strncmp>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d107      	bne.n	80015de <checkUSBRecive+0x3c2>
			ECG_flag = atoi((char*)(usbCmdBuffer + 4));
 80015ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001604 <checkUSBRecive+0x3e8>)
 80015d0:	4618      	mov	r0, r3
 80015d2:	f009 f999 	bl	800a908 <atoi>
 80015d6:	4603      	mov	r3, r0
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <checkUSBRecive+0x3d8>)
 80015dc:	701a      	strb	r2, [r3, #0]
		}

    }

		HAL_TIM_Base_Start(&htim2);
 80015de:	4811      	ldr	r0, [pc, #68]	@ (8001624 <checkUSBRecive+0x408>)
 80015e0:	f003 fad4 	bl	8004b8c <HAL_TIM_Base_Start>
		HAL_ADC_Start_IT(&hadc1);
 80015e4:	4810      	ldr	r0, [pc, #64]	@ (8001628 <checkUSBRecive+0x40c>)
 80015e6:	f000 fc6b 	bl	8001ec0 <HAL_ADC_Start_IT>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	2000f4b5 	.word	0x2000f4b5
 80015f8:	40020c00 	.word	0x40020c00
 80015fc:	0800aaec 	.word	0x0800aaec
 8001600:	200139f4 	.word	0x200139f4
 8001604:	200139f8 	.word	0x200139f8
 8001608:	2000f4b4 	.word	0x2000f4b4
 800160c:	0800aaf4 	.word	0x0800aaf4
 8001610:	2000f4b6 	.word	0x2000f4b6
 8001614:	0800aafc 	.word	0x0800aafc
 8001618:	200139f9 	.word	0x200139f9
 800161c:	200027e0 	.word	0x200027e0
 8001620:	0800aae4 	.word	0x0800aae4
 8001624:	20013638 	.word	0x20013638
 8001628:	20008964 	.word	0x20008964

0800162c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)

{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0)
    {

    }
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <computeFFT>:

void computeFFT(circularBuffer_t *in, circularBuffer_t *out, uint16_t buffer_size) {
 8001644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001648:	b097      	sub	sp, #92	@ 0x5c
 800164a:	af00      	add	r7, sp, #0
 800164c:	6278      	str	r0, [r7, #36]	@ 0x24
 800164e:	6239      	str	r1, [r7, #32]
 8001650:	4613      	mov	r3, r2
 8001652:	83fb      	strh	r3, [r7, #30]
 8001654:	466b      	mov	r3, sp
 8001656:	461e      	mov	r6, r3
    // Se definen arreglos locales para almacenar los datos intermedios
    q15_t fftInputAux[buffer_size];
 8001658:	8bf9      	ldrh	r1, [r7, #30]
 800165a:	460b      	mov	r3, r1
 800165c:	3b01      	subs	r3, #1
 800165e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001660:	b28b      	uxth	r3, r1
 8001662:	2200      	movs	r2, #0
 8001664:	461c      	mov	r4, r3
 8001666:	4615      	mov	r5, r2
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	f04f 0300 	mov.w	r3, #0
 8001670:	012b      	lsls	r3, r5, #4
 8001672:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001676:	0122      	lsls	r2, r4, #4
 8001678:	b28b      	uxth	r3, r1
 800167a:	2200      	movs	r2, #0
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	617a      	str	r2, [r7, #20]
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	f04f 0300 	mov.w	r3, #0
 8001688:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800168c:	4628      	mov	r0, r5
 800168e:	0103      	lsls	r3, r0, #4
 8001690:	4620      	mov	r0, r4
 8001692:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001696:	4620      	mov	r0, r4
 8001698:	0102      	lsls	r2, r0, #4
 800169a:	460b      	mov	r3, r1
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	3307      	adds	r3, #7
 80016a0:	08db      	lsrs	r3, r3, #3
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	ebad 0d03 	sub.w	sp, sp, r3
 80016a8:	466b      	mov	r3, sp
 80016aa:	3301      	adds	r3, #1
 80016ac:	085b      	lsrs	r3, r3, #1
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	643b      	str	r3, [r7, #64]	@ 0x40
    q15_t fftOutputAux[buffer_size*2];
 80016b2:	8bfb      	ldrh	r3, [r7, #30]
 80016b4:	0059      	lsls	r1, r3, #1
 80016b6:	1e4b      	subs	r3, r1, #1
 80016b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016ba:	460a      	mov	r2, r1
 80016bc:	2300      	movs	r3, #0
 80016be:	60ba      	str	r2, [r7, #8]
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80016ce:	4628      	mov	r0, r5
 80016d0:	0103      	lsls	r3, r0, #4
 80016d2:	4620      	mov	r0, r4
 80016d4:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80016d8:	4620      	mov	r0, r4
 80016da:	0102      	lsls	r2, r0, #4
 80016dc:	460a      	mov	r2, r1
 80016de:	2300      	movs	r3, #0
 80016e0:	603a      	str	r2, [r7, #0]
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016f0:	4628      	mov	r0, r5
 80016f2:	0103      	lsls	r3, r0, #4
 80016f4:	4620      	mov	r0, r4
 80016f6:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80016fa:	4620      	mov	r0, r4
 80016fc:	0102      	lsls	r2, r0, #4
 80016fe:	460b      	mov	r3, r1
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	3307      	adds	r3, #7
 8001704:	08db      	lsrs	r3, r3, #3
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	ebad 0d03 	sub.w	sp, sp, r3
 800170c:	466b      	mov	r3, sp
 800170e:	3301      	adds	r3, #1
 8001710:	085b      	lsrs	r3, r3, #1
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	63bb      	str	r3, [r7, #56]	@ 0x38
    q15_t fftMagnitudeAux[buffer_size];
 8001716:	8bf9      	ldrh	r1, [r7, #30]
 8001718:	460b      	mov	r3, r1
 800171a:	3b01      	subs	r3, #1
 800171c:	637b      	str	r3, [r7, #52]	@ 0x34
 800171e:	b28b      	uxth	r3, r1
 8001720:	2200      	movs	r2, #0
 8001722:	469a      	mov	sl, r3
 8001724:	4693      	mov	fp, r2
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8001732:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8001736:	ea4f 120a 	mov.w	r2, sl, lsl #4
 800173a:	b28b      	uxth	r3, r1
 800173c:	2200      	movs	r2, #0
 800173e:	4698      	mov	r8, r3
 8001740:	4691      	mov	r9, r2
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800174e:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8001752:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8001756:	460b      	mov	r3, r1
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	3307      	adds	r3, #7
 800175c:	08db      	lsrs	r3, r3, #3
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	ebad 0d03 	sub.w	sp, sp, r3
 8001764:	466b      	mov	r3, sp
 8001766:	3301      	adds	r3, #1
 8001768:	085b      	lsrs	r3, r3, #1
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	633b      	str	r3, [r7, #48]	@ 0x30

    uint16_t currentTail = in->tail;
 800176e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001770:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001774:	885b      	ldrh	r3, [r3, #2]
 8001776:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    for (int i = 0; i < buffer_size; i++) {
 8001778:	2300      	movs	r3, #0
 800177a:	657b      	str	r3, [r7, #84]	@ 0x54
 800177c:	e017      	b.n	80017ae <computeFFT+0x16a>
        fftInputAux[i] = in->buf[(currentTail + i) % in->effective_size];
 800177e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8001780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001782:	4413      	add	r3, r2
 8001784:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001786:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800178a:	8892      	ldrh	r2, [r2, #4]
 800178c:	b292      	uxth	r2, r2
 800178e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001792:	fb01 f202 	mul.w	r2, r1, r2
 8001796:	1a9a      	subs	r2, r3, r2
 8001798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800179e:	b219      	sxth	r1, r3
 80017a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80017a4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < buffer_size; i++) {
 80017a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017aa:	3301      	adds	r3, #1
 80017ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80017ae:	8bfb      	ldrh	r3, [r7, #30]
 80017b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80017b2:	429a      	cmp	r2, r3
 80017b4:	dbe3      	blt.n	800177e <computeFFT+0x13a>
    }

    q15_t dc = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    arm_mean_q15(fftInputAux, buffer_size, &dc);
 80017ba:	8bfb      	ldrh	r3, [r7, #30]
 80017bc:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80017c0:	4619      	mov	r1, r3
 80017c2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80017c4:	f007 ffc8 	bl	8009758 <arm_mean_q15>

    // Resta el DC a cada muestra
    for (int i = 0; i < buffer_size; i++) {
 80017c8:	2300      	movs	r3, #0
 80017ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80017cc:	e011      	b.n	80017f2 <computeFFT+0x1ae>
        fftInputAux[i] = fftInputAux[i] - dc;
 80017ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80017d2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80017dc:	b29b      	uxth	r3, r3
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	b219      	sxth	r1, r3
 80017e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017e6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80017e8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < buffer_size; i++) {
 80017ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80017ee:	3301      	adds	r3, #1
 80017f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80017f2:	8bfb      	ldrh	r3, [r7, #30]
 80017f4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80017f6:	429a      	cmp	r2, r3
 80017f8:	dbe9      	blt.n	80017ce <computeFFT+0x18a>
    }

    // Ejecuta la FFT sobre el bloque de datos sin DC
    arm_rfft_q15(&fftInstance, fftInputAux, fftOutputAux);
 80017fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80017fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80017fe:	482c      	ldr	r0, [pc, #176]	@ (80018b0 <computeFFT+0x26c>)
 8001800:	f008 f8b6 	bl	8009970 <arm_rfft_q15>
    // Calcula la magnitud del espectro FFT
    arm_abs_q15(fftOutputAux, fftMagnitudeAux, buffer_size);
 8001804:	8bfb      	ldrh	r3, [r7, #30]
 8001806:	461a      	mov	r2, r3
 8001808:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800180a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800180c:	f008 fb82 	bl	8009f14 <arm_abs_q15>

    q15_t maxVal = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	857b      	strh	r3, [r7, #42]	@ 0x2a
    arm_max_q15(fftMagnitudeAux, buffer_size, &maxVal, 0);
 8001814:	8bf9      	ldrh	r1, [r7, #30]
 8001816:	f107 022a 	add.w	r2, r7, #42	@ 0x2a
 800181a:	2300      	movs	r3, #0
 800181c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800181e:	f007 ffcb 	bl	80097b8 <arm_max_q15>
    if (maxVal == 0) maxVal = 1; // Evitar división por cero
 8001822:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <computeFFT+0x1ea>
 800182a:	2301      	movs	r3, #1
 800182c:	857b      	strh	r3, [r7, #42]	@ 0x2a

    for (int i = 0; i < buffer_size; i++) {
 800182e:	2300      	movs	r3, #0
 8001830:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001832:	e017      	b.n	8001864 <computeFFT+0x220>
    	fftMagnitudeAux[i] = (q15_t)((((int32_t)fftMagnitudeAux[i] * 0xFFFF ) / maxVal) - 0x8000);
 8001834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001836:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001838:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800183c:	461a      	mov	r2, r3
 800183e:	4613      	mov	r3, r2
 8001840:	041b      	lsls	r3, r3, #16
 8001842:	1a9b      	subs	r3, r3, r2
 8001844:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8001848:	fb93 f3f2 	sdiv	r3, r3, r2
 800184c:	b29b      	uxth	r3, r3
 800184e:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8001852:	b29b      	uxth	r3, r3
 8001854:	b219      	sxth	r1, r3
 8001856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001858:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800185a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < buffer_size; i++) {
 800185e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001860:	3301      	adds	r3, #1
 8001862:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001864:	8bfb      	ldrh	r3, [r7, #30]
 8001866:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001868:	429a      	cmp	r2, r3
 800186a:	dbe3      	blt.n	8001834 <computeFFT+0x1f0>
    }


    CDC_Transmit_FS(&fft_word, 1);
 800186c:	2101      	movs	r1, #1
 800186e:	4811      	ldr	r0, [pc, #68]	@ (80018b4 <computeFFT+0x270>)
 8001870:	f007 fb08 	bl	8008e84 <CDC_Transmit_FS>
    for(int i = 0; i < buffer_size; i++){
 8001874:	2300      	movs	r3, #0
 8001876:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001878:	e00d      	b.n	8001896 <computeFFT+0x252>
        bufferWrite(out, &fftMagnitudeAux[i]);
 800187a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001880:	4413      	add	r3, r2
 8001882:	4619      	mov	r1, r3
 8001884:	6a38      	ldr	r0, [r7, #32]
 8001886:	f7fe fece 	bl	8000626 <bufferWrite>
        sendBuffer2usb(out);
 800188a:	6a38      	ldr	r0, [r7, #32]
 800188c:	f7fe ff69 	bl	8000762 <sendBuffer2usb>
    for(int i = 0; i < buffer_size; i++){
 8001890:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001892:	3301      	adds	r3, #1
 8001894:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001896:	8bfb      	ldrh	r3, [r7, #30]
 8001898:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800189a:	429a      	cmp	r2, r3
 800189c:	dbed      	blt.n	800187a <computeFFT+0x236>
    }




    fft_send_flag = 0;
 800189e:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <computeFFT+0x274>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
 80018a4:	46b5      	mov	sp, r6


}
 80018a6:	bf00      	nop
 80018a8:	375c      	adds	r7, #92	@ 0x5c
 80018aa:	46bd      	mov	sp, r7
 80018ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018b0:	2001361c 	.word	0x2001361c
 80018b4:	200027e1 	.word	0x200027e1
 80018b8:	2000f4b7 	.word	0x2000f4b7

080018bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM5)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a05      	ldr	r2, [pc, #20]	@ (80018e0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d102      	bne.n	80018d4 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
        fft_send_flag = 1;
 80018ce:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	701a      	strb	r2, [r3, #0]
    }

}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	40000c00 	.word	0x40000c00
 80018e4:	2000f4b7 	.word	0x2000f4b7

080018e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ec:	b672      	cpsid	i
}
 80018ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <Error_Handler+0x8>

080018f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	4b10      	ldr	r3, [pc, #64]	@ (8001940 <HAL_MspInit+0x4c>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001902:	4a0f      	ldr	r2, [pc, #60]	@ (8001940 <HAL_MspInit+0x4c>)
 8001904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001908:	6453      	str	r3, [r2, #68]	@ 0x44
 800190a:	4b0d      	ldr	r3, [pc, #52]	@ (8001940 <HAL_MspInit+0x4c>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	603b      	str	r3, [r7, #0]
 800191a:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <HAL_MspInit+0x4c>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	4a08      	ldr	r2, [pc, #32]	@ (8001940 <HAL_MspInit+0x4c>)
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001924:	6413      	str	r3, [r2, #64]	@ 0x40
 8001926:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <HAL_MspInit+0x4c>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001932:	2007      	movs	r0, #7
 8001934:	f001 f808 	bl	8002948 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40023800 	.word	0x40023800

08001944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <NMI_Handler+0x4>

0800194c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <HardFault_Handler+0x4>

08001954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <MemManage_Handler+0x4>

0800195c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <BusFault_Handler+0x4>

08001964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <UsageFault_Handler+0x4>

0800196c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800199a:	f000 fa09 	bl	8001db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_Pin);
 80019a6:	2001      	movs	r0, #1
 80019a8:	f001 f9c6 	bl	8002d38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80019b4:	4802      	ldr	r0, [pc, #8]	@ (80019c0 <ADC_IRQHandler+0x10>)
 80019b6:	f000 fb9e 	bl	80020f6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20008964 	.word	0x20008964

080019c4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80019c8:	4802      	ldr	r0, [pc, #8]	@ (80019d4 <TIM5_IRQHandler+0x10>)
 80019ca:	f003 f9df 	bl	8004d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20013680 	.word	0x20013680

080019d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80019dc:	4802      	ldr	r0, [pc, #8]	@ (80019e8 <OTG_FS_IRQHandler+0x10>)
 80019de:	f001 fb07 	bl	8002ff0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20014c00 	.word	0x20014c00

080019ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f0:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <SystemInit+0x20>)
 80019f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019f6:	4a05      	ldr	r2, [pc, #20]	@ (8001a0c <SystemInit+0x20>)
 80019f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08c      	sub	sp, #48	@ 0x30
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a16:	f107 0320 	add.w	r3, r7, #32
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a3c:	4b25      	ldr	r3, [pc, #148]	@ (8001ad4 <MX_TIM2_Init+0xc4>)
 8001a3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a44:	4b23      	ldr	r3, [pc, #140]	@ (8001ad4 <MX_TIM2_Init+0xc4>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4a:	4b22      	ldr	r3, [pc, #136]	@ (8001ad4 <MX_TIM2_Init+0xc4>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = tim2_ARR;
 8001a50:	4b21      	ldr	r3, [pc, #132]	@ (8001ad8 <MX_TIM2_Init+0xc8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a1f      	ldr	r2, [pc, #124]	@ (8001ad4 <MX_TIM2_Init+0xc4>)
 8001a56:	60d3      	str	r3, [r2, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a58:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad4 <MX_TIM2_Init+0xc4>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad4 <MX_TIM2_Init+0xc4>)
 8001a60:	2280      	movs	r2, #128	@ 0x80
 8001a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a64:	481b      	ldr	r0, [pc, #108]	@ (8001ad4 <MX_TIM2_Init+0xc4>)
 8001a66:	f003 f841 	bl	8004aec <HAL_TIM_Base_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001a70:	f7ff ff3a 	bl	80018e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a78:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a7a:	f107 0320 	add.w	r3, r7, #32
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4814      	ldr	r0, [pc, #80]	@ (8001ad4 <MX_TIM2_Init+0xc4>)
 8001a82:	f003 fa73 	bl	8004f6c <HAL_TIM_ConfigClockSource>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001a8c:	f7ff ff2c 	bl	80018e8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001a98:	f107 030c 	add.w	r3, r7, #12
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	480d      	ldr	r0, [pc, #52]	@ (8001ad4 <MX_TIM2_Init+0xc4>)
 8001aa0:	f003 fb2b 	bl	80050fa <HAL_TIM_SlaveConfigSynchro>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001aaa:	f7ff ff1d 	bl	80018e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001aae:	2320      	movs	r3, #32
 8001ab0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4806      	ldr	r0, [pc, #24]	@ (8001ad4 <MX_TIM2_Init+0xc4>)
 8001abc:	f003 fd60 	bl	8005580 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001ac6:	f7ff ff0f 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	3730      	adds	r7, #48	@ 0x30
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20013638 	.word	0x20013638
 8001ad8:	200027dc 	.word	0x200027dc

08001adc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08c      	sub	sp, #48	@ 0x30
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ae2:	f107 0320 	add.w	r3, r7, #32
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b08:	4b25      	ldr	r3, [pc, #148]	@ (8001ba0 <MX_TIM5_Init+0xc4>)
 8001b0a:	4a26      	ldr	r2, [pc, #152]	@ (8001ba4 <MX_TIM5_Init+0xc8>)
 8001b0c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8399;
 8001b0e:	4b24      	ldr	r3, [pc, #144]	@ (8001ba0 <MX_TIM5_Init+0xc4>)
 8001b10:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001b14:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b16:	4b22      	ldr	r3, [pc, #136]	@ (8001ba0 <MX_TIM5_Init+0xc4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001b1c:	4b20      	ldr	r3, [pc, #128]	@ (8001ba0 <MX_TIM5_Init+0xc4>)
 8001b1e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b22:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b24:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba0 <MX_TIM5_Init+0xc4>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba0 <MX_TIM5_Init+0xc4>)
 8001b2c:	2280      	movs	r2, #128	@ 0x80
 8001b2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001b30:	481b      	ldr	r0, [pc, #108]	@ (8001ba0 <MX_TIM5_Init+0xc4>)
 8001b32:	f002 ffdb 	bl	8004aec <HAL_TIM_Base_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8001b3c:	f7ff fed4 	bl	80018e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b44:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001b46:	f107 0320 	add.w	r3, r7, #32
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4814      	ldr	r0, [pc, #80]	@ (8001ba0 <MX_TIM5_Init+0xc4>)
 8001b4e:	f003 fa0d 	bl	8004f6c <HAL_TIM_ConfigClockSource>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8001b58:	f7ff fec6 	bl	80018e8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001b64:	f107 030c 	add.w	r3, r7, #12
 8001b68:	4619      	mov	r1, r3
 8001b6a:	480d      	ldr	r0, [pc, #52]	@ (8001ba0 <MX_TIM5_Init+0xc4>)
 8001b6c:	f003 fac5 	bl	80050fa <HAL_TIM_SlaveConfigSynchro>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001b76:	f7ff feb7 	bl	80018e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	4619      	mov	r1, r3
 8001b86:	4806      	ldr	r0, [pc, #24]	@ (8001ba0 <MX_TIM5_Init+0xc4>)
 8001b88:	f003 fcfa 	bl	8005580 <HAL_TIMEx_MasterConfigSynchronization>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM5_Init+0xba>
  {
    Error_Handler();
 8001b92:	f7ff fea9 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001b96:	bf00      	nop
 8001b98:	3730      	adds	r7, #48	@ 0x30
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20013680 	.word	0x20013680
 8001ba4:	40000c00 	.word	0x40000c00

08001ba8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bae:	463b      	mov	r3, r7
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bb6:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <MX_TIM6_Init+0x64>)
 8001bb8:	4a15      	ldr	r2, [pc, #84]	@ (8001c10 <MX_TIM6_Init+0x68>)
 8001bba:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 168-1;
 8001bbc:	4b13      	ldr	r3, [pc, #76]	@ (8001c0c <MX_TIM6_Init+0x64>)
 8001bbe:	22a7      	movs	r2, #167	@ 0xa7
 8001bc0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc2:	4b12      	ldr	r3, [pc, #72]	@ (8001c0c <MX_TIM6_Init+0x64>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001bc8:	4b10      	ldr	r3, [pc, #64]	@ (8001c0c <MX_TIM6_Init+0x64>)
 8001bca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8001c0c <MX_TIM6_Init+0x64>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001bd6:	480d      	ldr	r0, [pc, #52]	@ (8001c0c <MX_TIM6_Init+0x64>)
 8001bd8:	f002 ff88 	bl	8004aec <HAL_TIM_Base_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001be2:	f7ff fe81 	bl	80018e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be6:	2300      	movs	r3, #0
 8001be8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001bee:	463b      	mov	r3, r7
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4806      	ldr	r0, [pc, #24]	@ (8001c0c <MX_TIM6_Init+0x64>)
 8001bf4:	f003 fcc4 	bl	8005580 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001bfe:	f7ff fe73 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200136c8 	.word	0x200136c8
 8001c10:	40001000 	.word	0x40001000

08001c14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c24:	d10e      	bne.n	8001c44 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	4b20      	ldr	r3, [pc, #128]	@ (8001cac <HAL_TIM_Base_MspInit+0x98>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8001cac <HAL_TIM_Base_MspInit+0x98>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c36:	4b1d      	ldr	r3, [pc, #116]	@ (8001cac <HAL_TIM_Base_MspInit+0x98>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c42:	e02e      	b.n	8001ca2 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM5)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a19      	ldr	r2, [pc, #100]	@ (8001cb0 <HAL_TIM_Base_MspInit+0x9c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d116      	bne.n	8001c7c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	4b16      	ldr	r3, [pc, #88]	@ (8001cac <HAL_TIM_Base_MspInit+0x98>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	4a15      	ldr	r2, [pc, #84]	@ (8001cac <HAL_TIM_Base_MspInit+0x98>)
 8001c58:	f043 0308 	orr.w	r3, r3, #8
 8001c5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c5e:	4b13      	ldr	r3, [pc, #76]	@ (8001cac <HAL_TIM_Base_MspInit+0x98>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	2032      	movs	r0, #50	@ 0x32
 8001c70:	f000 fe75 	bl	800295e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001c74:	2032      	movs	r0, #50	@ 0x32
 8001c76:	f000 fe8e 	bl	8002996 <HAL_NVIC_EnableIRQ>
}
 8001c7a:	e012      	b.n	8001ca2 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM6)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0c      	ldr	r2, [pc, #48]	@ (8001cb4 <HAL_TIM_Base_MspInit+0xa0>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d10d      	bne.n	8001ca2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	4b08      	ldr	r3, [pc, #32]	@ (8001cac <HAL_TIM_Base_MspInit+0x98>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	4a07      	ldr	r2, [pc, #28]	@ (8001cac <HAL_TIM_Base_MspInit+0x98>)
 8001c90:	f043 0310 	orr.w	r3, r3, #16
 8001c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c96:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <HAL_TIM_Base_MspInit+0x98>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	f003 0310 	and.w	r3, r3, #16
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
}
 8001ca2:	bf00      	nop
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40000c00 	.word	0x40000c00
 8001cb4:	40001000 	.word	0x40001000

08001cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cf0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001cbc:	f7ff fe96 	bl	80019ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cc0:	480c      	ldr	r0, [pc, #48]	@ (8001cf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cc2:	490d      	ldr	r1, [pc, #52]	@ (8001cf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc8:	e002      	b.n	8001cd0 <LoopCopyDataInit>

08001cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cce:	3304      	adds	r3, #4

08001cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd4:	d3f9      	bcc.n	8001cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cd8:	4c0a      	ldr	r4, [pc, #40]	@ (8001d04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cdc:	e001      	b.n	8001ce2 <LoopFillZerobss>

08001cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce0:	3204      	adds	r2, #4

08001ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce4:	d3fb      	bcc.n	8001cde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ce6:	f008 feb7 	bl	800aa58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cea:	f7ff f8bd 	bl	8000e68 <main>
  bx  lr    
 8001cee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001cf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf8:	20008948 	.word	0x20008948
  ldr r2, =_sidata
 8001cfc:	080231e8 	.word	0x080231e8
  ldr r2, =_sbss
 8001d00:	20008948 	.word	0x20008948
  ldr r4, =_ebss
 8001d04:	2001543c 	.word	0x2001543c

08001d08 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d08:	e7fe      	b.n	8001d08 <CAN1_RX0_IRQHandler>
	...

08001d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d10:	4b0e      	ldr	r3, [pc, #56]	@ (8001d4c <HAL_Init+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0d      	ldr	r2, [pc, #52]	@ (8001d4c <HAL_Init+0x40>)
 8001d16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <HAL_Init+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0a      	ldr	r2, [pc, #40]	@ (8001d4c <HAL_Init+0x40>)
 8001d22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d28:	4b08      	ldr	r3, [pc, #32]	@ (8001d4c <HAL_Init+0x40>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a07      	ldr	r2, [pc, #28]	@ (8001d4c <HAL_Init+0x40>)
 8001d2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d34:	2003      	movs	r0, #3
 8001d36:	f000 fe07 	bl	8002948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f000 f808 	bl	8001d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d40:	f7ff fdd8 	bl	80018f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023c00 	.word	0x40023c00

08001d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d58:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <HAL_InitTick+0x54>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b12      	ldr	r3, [pc, #72]	@ (8001da8 <HAL_InitTick+0x58>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	4619      	mov	r1, r3
 8001d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 fe1f 	bl	80029b2 <HAL_SYSTICK_Config>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00e      	b.n	8001d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b0f      	cmp	r3, #15
 8001d82:	d80a      	bhi.n	8001d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d84:	2200      	movs	r2, #0
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f000 fde7 	bl	800295e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d90:	4a06      	ldr	r2, [pc, #24]	@ (8001dac <HAL_InitTick+0x5c>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e000      	b.n	8001d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	200087fc 	.word	0x200087fc
 8001da8:	20008804 	.word	0x20008804
 8001dac:	20008800 	.word	0x20008800

08001db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <HAL_IncTick+0x20>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <HAL_IncTick+0x24>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	4a04      	ldr	r2, [pc, #16]	@ (8001dd4 <HAL_IncTick+0x24>)
 8001dc2:	6013      	str	r3, [r2, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20008804 	.word	0x20008804
 8001dd4:	20013710 	.word	0x20013710

08001dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return uwTick;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	@ (8001dec <HAL_GetTick+0x14>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20013710 	.word	0x20013710

08001df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df8:	f7ff ffee 	bl	8001dd8 <HAL_GetTick>
 8001dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e08:	d005      	beq.n	8001e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <HAL_Delay+0x44>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e16:	bf00      	nop
 8001e18:	f7ff ffde 	bl	8001dd8 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d8f7      	bhi.n	8001e18 <HAL_Delay+0x28>
  {
  }
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20008804 	.word	0x20008804

08001e38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e033      	b.n	8001eb6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d109      	bne.n	8001e6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7fe fb80 	bl	800055c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	f003 0310 	and.w	r3, r3, #16
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d118      	bne.n	8001ea8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e7e:	f023 0302 	bic.w	r3, r3, #2
 8001e82:	f043 0202 	orr.w	r2, r3, #2
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 fb86 	bl	800259c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	f023 0303 	bic.w	r3, r3, #3
 8001e9e:	f043 0201 	orr.w	r2, r3, #1
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ea6:	e001      	b.n	8001eac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_ADC_Start_IT+0x1a>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e0bd      	b.n	8002056 <HAL_ADC_Start_IT+0x196>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d018      	beq.n	8001f22 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f00:	4b58      	ldr	r3, [pc, #352]	@ (8002064 <HAL_ADC_Start_IT+0x1a4>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a58      	ldr	r2, [pc, #352]	@ (8002068 <HAL_ADC_Start_IT+0x1a8>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	0c9a      	lsrs	r2, r3, #18
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4413      	add	r3, r2
 8001f12:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001f14:	e002      	b.n	8001f1c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f9      	bne.n	8001f16 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	f040 8085 	bne.w	800203c <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001f3a:	f023 0301 	bic.w	r3, r3, #1
 8001f3e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d007      	beq.n	8001f64 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f58:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f5c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f70:	d106      	bne.n	8001f80 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f76:	f023 0206 	bic.w	r2, r3, #6
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f7e:	e002      	b.n	8001f86 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f8e:	4b37      	ldr	r3, [pc, #220]	@ (800206c <HAL_ADC_Start_IT+0x1ac>)
 8001f90:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001f9a:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001faa:	f043 0320 	orr.w	r3, r3, #32
 8001fae:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 031f 	and.w	r3, r3, #31
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d12a      	bne.n	8002012 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a2b      	ldr	r2, [pc, #172]	@ (8002070 <HAL_ADC_Start_IT+0x1b0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d015      	beq.n	8001ff2 <HAL_ADC_Start_IT+0x132>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a2a      	ldr	r2, [pc, #168]	@ (8002074 <HAL_ADC_Start_IT+0x1b4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d105      	bne.n	8001fdc <HAL_ADC_Start_IT+0x11c>
 8001fd0:	4b26      	ldr	r3, [pc, #152]	@ (800206c <HAL_ADC_Start_IT+0x1ac>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 031f 	and.w	r3, r3, #31
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00a      	beq.n	8001ff2 <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a25      	ldr	r2, [pc, #148]	@ (8002078 <HAL_ADC_Start_IT+0x1b8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d136      	bne.n	8002054 <HAL_ADC_Start_IT+0x194>
 8001fe6:	4b21      	ldr	r3, [pc, #132]	@ (800206c <HAL_ADC_Start_IT+0x1ac>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d130      	bne.n	8002054 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d129      	bne.n	8002054 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	e020      	b.n	8002054 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a16      	ldr	r2, [pc, #88]	@ (8002070 <HAL_ADC_Start_IT+0x1b0>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d11b      	bne.n	8002054 <HAL_ADC_Start_IT+0x194>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d114      	bne.n	8002054 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	e00b      	b.n	8002054 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002040:	f043 0210 	orr.w	r2, r3, #16
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204c:	f043 0201 	orr.w	r2, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	200087fc 	.word	0x200087fc
 8002068:	431bde83 	.word	0x431bde83
 800206c:	40012300 	.word	0x40012300
 8002070:	40012000 	.word	0x40012000
 8002074:	40012100 	.word	0x40012100
 8002078:	40012200 	.word	0x40012200

0800207c <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_ADC_Stop_IT+0x16>
 800208e:	2302      	movs	r3, #2
 8002090:	e02b      	b.n	80020ea <HAL_ADC_Stop_IT+0x6e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0201 	bic.w	r2, r2, #1
 80020a8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d113      	bne.n	80020e0 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80020c6:	f023 0320 	bic.w	r3, r3, #32
 80020ca:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80020d4:	f023 0301 	bic.w	r3, r3, #1
 80020d8:	f043 0201 	orr.w	r2, r3, #1
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b086      	sub	sp, #24
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	f003 0320 	and.w	r3, r3, #32
 8002124:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d049      	beq.n	80021c0 <HAL_ADC_IRQHandler+0xca>
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d046      	beq.n	80021c0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002136:	f003 0310 	and.w	r3, r3, #16
 800213a:	2b00      	cmp	r3, #0
 800213c:	d105      	bne.n	800214a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d12b      	bne.n	80021b0 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800215c:	2b00      	cmp	r3, #0
 800215e:	d127      	bne.n	80021b0 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002166:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800216a:	2b00      	cmp	r3, #0
 800216c:	d006      	beq.n	800217c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002178:	2b00      	cmp	r3, #0
 800217a:	d119      	bne.n	80021b0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0220 	bic.w	r2, r2, #32
 800218a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002190:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d105      	bne.n	80021b0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a8:	f043 0201 	orr.w	r2, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7fe ffa7 	bl	8001104 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f06f 0212 	mvn.w	r2, #18
 80021be:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ce:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d057      	beq.n	8002286 <HAL_ADC_IRQHandler+0x190>
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d054      	beq.n	8002286 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	f003 0310 	and.w	r3, r3, #16
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d105      	bne.n	80021f4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ec:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d139      	bne.n	8002276 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002208:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800220c:	2b00      	cmp	r3, #0
 800220e:	d006      	beq.n	800221e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800221a:	2b00      	cmp	r3, #0
 800221c:	d12b      	bne.n	8002276 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002228:	2b00      	cmp	r3, #0
 800222a:	d124      	bne.n	8002276 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002236:	2b00      	cmp	r3, #0
 8002238:	d11d      	bne.n	8002276 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800223e:	2b00      	cmp	r3, #0
 8002240:	d119      	bne.n	8002276 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002250:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002256:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002266:	2b00      	cmp	r3, #0
 8002268:	d105      	bne.n	8002276 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	f043 0201 	orr.w	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fa8c 	bl	8002794 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 020c 	mvn.w	r2, #12
 8002284:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002294:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d017      	beq.n	80022cc <HAL_ADC_IRQHandler+0x1d6>
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d014      	beq.n	80022cc <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d10d      	bne.n	80022cc <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f837 	bl	8002330 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f06f 0201 	mvn.w	r2, #1
 80022ca:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 0320 	and.w	r3, r3, #32
 80022d2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80022da:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d015      	beq.n	800230e <HAL_ADC_IRQHandler+0x218>
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d012      	beq.n	800230e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ec:	f043 0202 	orr.w	r2, r3, #2
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f06f 0220 	mvn.w	r2, #32
 80022fc:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f820 	bl	8002344 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f06f 0220 	mvn.w	r2, #32
 800230c:	601a      	str	r2, [r3, #0]
  }
}
 800230e:	bf00      	nop
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x1c>
 8002370:	2302      	movs	r3, #2
 8002372:	e105      	b.n	8002580 <HAL_ADC_ConfigChannel+0x228>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b09      	cmp	r3, #9
 8002382:	d925      	bls.n	80023d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68d9      	ldr	r1, [r3, #12]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	b29b      	uxth	r3, r3
 8002390:	461a      	mov	r2, r3
 8002392:	4613      	mov	r3, r2
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4413      	add	r3, r2
 8002398:	3b1e      	subs	r3, #30
 800239a:	2207      	movs	r2, #7
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43da      	mvns	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	400a      	ands	r2, r1
 80023a8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68d9      	ldr	r1, [r3, #12]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	4618      	mov	r0, r3
 80023bc:	4603      	mov	r3, r0
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4403      	add	r3, r0
 80023c2:	3b1e      	subs	r3, #30
 80023c4:	409a      	lsls	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	e022      	b.n	8002416 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6919      	ldr	r1, [r3, #16]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	4613      	mov	r3, r2
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	4413      	add	r3, r2
 80023e4:	2207      	movs	r2, #7
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43da      	mvns	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	400a      	ands	r2, r1
 80023f2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6919      	ldr	r1, [r3, #16]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	b29b      	uxth	r3, r3
 8002404:	4618      	mov	r0, r3
 8002406:	4603      	mov	r3, r0
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4403      	add	r3, r0
 800240c:	409a      	lsls	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b06      	cmp	r3, #6
 800241c:	d824      	bhi.n	8002468 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	3b05      	subs	r3, #5
 8002430:	221f      	movs	r2, #31
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43da      	mvns	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	400a      	ands	r2, r1
 800243e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	b29b      	uxth	r3, r3
 800244c:	4618      	mov	r0, r3
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	3b05      	subs	r3, #5
 800245a:	fa00 f203 	lsl.w	r2, r0, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	635a      	str	r2, [r3, #52]	@ 0x34
 8002466:	e04c      	b.n	8002502 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b0c      	cmp	r3, #12
 800246e:	d824      	bhi.n	80024ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	3b23      	subs	r3, #35	@ 0x23
 8002482:	221f      	movs	r2, #31
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43da      	mvns	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	400a      	ands	r2, r1
 8002490:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	b29b      	uxth	r3, r3
 800249e:	4618      	mov	r0, r3
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	3b23      	subs	r3, #35	@ 0x23
 80024ac:	fa00 f203 	lsl.w	r2, r0, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80024b8:	e023      	b.n	8002502 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	3b41      	subs	r3, #65	@ 0x41
 80024cc:	221f      	movs	r2, #31
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43da      	mvns	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	400a      	ands	r2, r1
 80024da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	4618      	mov	r0, r3
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	3b41      	subs	r3, #65	@ 0x41
 80024f6:	fa00 f203 	lsl.w	r2, r0, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002502:	4b22      	ldr	r3, [pc, #136]	@ (800258c <HAL_ADC_ConfigChannel+0x234>)
 8002504:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a21      	ldr	r2, [pc, #132]	@ (8002590 <HAL_ADC_ConfigChannel+0x238>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d109      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x1cc>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b12      	cmp	r3, #18
 8002516:	d105      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a19      	ldr	r2, [pc, #100]	@ (8002590 <HAL_ADC_ConfigChannel+0x238>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d123      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x21e>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b10      	cmp	r3, #16
 8002534:	d003      	beq.n	800253e <HAL_ADC_ConfigChannel+0x1e6>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b11      	cmp	r3, #17
 800253c:	d11b      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2b10      	cmp	r3, #16
 8002550:	d111      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002552:	4b10      	ldr	r3, [pc, #64]	@ (8002594 <HAL_ADC_ConfigChannel+0x23c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a10      	ldr	r2, [pc, #64]	@ (8002598 <HAL_ADC_ConfigChannel+0x240>)
 8002558:	fba2 2303 	umull	r2, r3, r2, r3
 800255c:	0c9a      	lsrs	r2, r3, #18
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002568:	e002      	b.n	8002570 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	3b01      	subs	r3, #1
 800256e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f9      	bne.n	800256a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	40012300 	.word	0x40012300
 8002590:	40012000 	.word	0x40012000
 8002594:	200087fc 	.word	0x200087fc
 8002598:	431bde83 	.word	0x431bde83

0800259c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025a4:	4b79      	ldr	r3, [pc, #484]	@ (800278c <ADC_Init+0x1f0>)
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	431a      	orrs	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6859      	ldr	r1, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	021a      	lsls	r2, r3, #8
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80025f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6859      	ldr	r1, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002616:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6899      	ldr	r1, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262e:	4a58      	ldr	r2, [pc, #352]	@ (8002790 <ADC_Init+0x1f4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d022      	beq.n	800267a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002642:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6899      	ldr	r1, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002664:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6899      	ldr	r1, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	e00f      	b.n	800269a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002688:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002698:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0202 	bic.w	r2, r2, #2
 80026a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6899      	ldr	r1, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	7e1b      	ldrb	r3, [r3, #24]
 80026b4:	005a      	lsls	r2, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d01b      	beq.n	8002700 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026d6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80026e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6859      	ldr	r1, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f2:	3b01      	subs	r3, #1
 80026f4:	035a      	lsls	r2, r3, #13
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	e007      	b.n	8002710 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800270e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800271e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	3b01      	subs	r3, #1
 800272c:	051a      	lsls	r2, r3, #20
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002744:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6899      	ldr	r1, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002752:	025a      	lsls	r2, r3, #9
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800276a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6899      	ldr	r1, [r3, #8]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	029a      	lsls	r2, r3, #10
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	609a      	str	r2, [r3, #8]
}
 8002780:	bf00      	nop
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	40012300 	.word	0x40012300
 8002790:	0f000001 	.word	0x0f000001

08002794 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b8:	4b0c      	ldr	r3, [pc, #48]	@ (80027ec <__NVIC_SetPriorityGrouping+0x44>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027c4:	4013      	ands	r3, r2
 80027c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027da:	4a04      	ldr	r2, [pc, #16]	@ (80027ec <__NVIC_SetPriorityGrouping+0x44>)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	60d3      	str	r3, [r2, #12]
}
 80027e0:	bf00      	nop
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f4:	4b04      	ldr	r3, [pc, #16]	@ (8002808 <__NVIC_GetPriorityGrouping+0x18>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	0a1b      	lsrs	r3, r3, #8
 80027fa:	f003 0307 	and.w	r3, r3, #7
}
 80027fe:	4618      	mov	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	2b00      	cmp	r3, #0
 800281c:	db0b      	blt.n	8002836 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	f003 021f 	and.w	r2, r3, #31
 8002824:	4907      	ldr	r1, [pc, #28]	@ (8002844 <__NVIC_EnableIRQ+0x38>)
 8002826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	2001      	movs	r0, #1
 800282e:	fa00 f202 	lsl.w	r2, r0, r2
 8002832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	e000e100 	.word	0xe000e100

08002848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	6039      	str	r1, [r7, #0]
 8002852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002858:	2b00      	cmp	r3, #0
 800285a:	db0a      	blt.n	8002872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	b2da      	uxtb	r2, r3
 8002860:	490c      	ldr	r1, [pc, #48]	@ (8002894 <__NVIC_SetPriority+0x4c>)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	0112      	lsls	r2, r2, #4
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	440b      	add	r3, r1
 800286c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002870:	e00a      	b.n	8002888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	b2da      	uxtb	r2, r3
 8002876:	4908      	ldr	r1, [pc, #32]	@ (8002898 <__NVIC_SetPriority+0x50>)
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	3b04      	subs	r3, #4
 8002880:	0112      	lsls	r2, r2, #4
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	440b      	add	r3, r1
 8002886:	761a      	strb	r2, [r3, #24]
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000e100 	.word	0xe000e100
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800289c:	b480      	push	{r7}
 800289e:	b089      	sub	sp, #36	@ 0x24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f1c3 0307 	rsb	r3, r3, #7
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	bf28      	it	cs
 80028ba:	2304      	movcs	r3, #4
 80028bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3304      	adds	r3, #4
 80028c2:	2b06      	cmp	r3, #6
 80028c4:	d902      	bls.n	80028cc <NVIC_EncodePriority+0x30>
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3b03      	subs	r3, #3
 80028ca:	e000      	b.n	80028ce <NVIC_EncodePriority+0x32>
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d0:	f04f 32ff 	mov.w	r2, #4294967295
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43da      	mvns	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	401a      	ands	r2, r3
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e4:	f04f 31ff 	mov.w	r1, #4294967295
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	fa01 f303 	lsl.w	r3, r1, r3
 80028ee:	43d9      	mvns	r1, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f4:	4313      	orrs	r3, r2
         );
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3724      	adds	r7, #36	@ 0x24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3b01      	subs	r3, #1
 8002910:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002914:	d301      	bcc.n	800291a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002916:	2301      	movs	r3, #1
 8002918:	e00f      	b.n	800293a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800291a:	4a0a      	ldr	r2, [pc, #40]	@ (8002944 <SysTick_Config+0x40>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3b01      	subs	r3, #1
 8002920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002922:	210f      	movs	r1, #15
 8002924:	f04f 30ff 	mov.w	r0, #4294967295
 8002928:	f7ff ff8e 	bl	8002848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800292c:	4b05      	ldr	r3, [pc, #20]	@ (8002944 <SysTick_Config+0x40>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002932:	4b04      	ldr	r3, [pc, #16]	@ (8002944 <SysTick_Config+0x40>)
 8002934:	2207      	movs	r2, #7
 8002936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	e000e010 	.word	0xe000e010

08002948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff ff29 	bl	80027a8 <__NVIC_SetPriorityGrouping>
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800295e:	b580      	push	{r7, lr}
 8002960:	b086      	sub	sp, #24
 8002962:	af00      	add	r7, sp, #0
 8002964:	4603      	mov	r3, r0
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002970:	f7ff ff3e 	bl	80027f0 <__NVIC_GetPriorityGrouping>
 8002974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	6978      	ldr	r0, [r7, #20]
 800297c:	f7ff ff8e 	bl	800289c <NVIC_EncodePriority>
 8002980:	4602      	mov	r2, r0
 8002982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ff5d 	bl	8002848 <__NVIC_SetPriority>
}
 800298e:	bf00      	nop
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	4603      	mov	r3, r0
 800299e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ff31 	bl	800280c <__NVIC_EnableIRQ>
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff ffa2 	bl	8002904 <SysTick_Config>
 80029c0:	4603      	mov	r3, r0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b089      	sub	sp, #36	@ 0x24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029da:	2300      	movs	r3, #0
 80029dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029de:	2300      	movs	r3, #0
 80029e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
 80029e6:	e16b      	b.n	8002cc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029e8:	2201      	movs	r2, #1
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4013      	ands	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	f040 815a 	bne.w	8002cba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d005      	beq.n	8002a1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d130      	bne.n	8002a80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	2203      	movs	r2, #3
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4013      	ands	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a54:	2201      	movs	r2, #1
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	f003 0201 	and.w	r2, r3, #1
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d017      	beq.n	8002abc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	2203      	movs	r2, #3
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d123      	bne.n	8002b10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	08da      	lsrs	r2, r3, #3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3208      	adds	r2, #8
 8002ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	220f      	movs	r2, #15
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	08da      	lsrs	r2, r3, #3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3208      	adds	r2, #8
 8002b0a:	69b9      	ldr	r1, [r7, #24]
 8002b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0203 	and.w	r2, r3, #3
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 80b4 	beq.w	8002cba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	4b60      	ldr	r3, [pc, #384]	@ (8002cd8 <HAL_GPIO_Init+0x30c>)
 8002b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5a:	4a5f      	ldr	r2, [pc, #380]	@ (8002cd8 <HAL_GPIO_Init+0x30c>)
 8002b5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b62:	4b5d      	ldr	r3, [pc, #372]	@ (8002cd8 <HAL_GPIO_Init+0x30c>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b6e:	4a5b      	ldr	r2, [pc, #364]	@ (8002cdc <HAL_GPIO_Init+0x310>)
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	089b      	lsrs	r3, r3, #2
 8002b74:	3302      	adds	r3, #2
 8002b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	220f      	movs	r2, #15
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a52      	ldr	r2, [pc, #328]	@ (8002ce0 <HAL_GPIO_Init+0x314>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d02b      	beq.n	8002bf2 <HAL_GPIO_Init+0x226>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a51      	ldr	r2, [pc, #324]	@ (8002ce4 <HAL_GPIO_Init+0x318>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d025      	beq.n	8002bee <HAL_GPIO_Init+0x222>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a50      	ldr	r2, [pc, #320]	@ (8002ce8 <HAL_GPIO_Init+0x31c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d01f      	beq.n	8002bea <HAL_GPIO_Init+0x21e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a4f      	ldr	r2, [pc, #316]	@ (8002cec <HAL_GPIO_Init+0x320>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d019      	beq.n	8002be6 <HAL_GPIO_Init+0x21a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a4e      	ldr	r2, [pc, #312]	@ (8002cf0 <HAL_GPIO_Init+0x324>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d013      	beq.n	8002be2 <HAL_GPIO_Init+0x216>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a4d      	ldr	r2, [pc, #308]	@ (8002cf4 <HAL_GPIO_Init+0x328>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d00d      	beq.n	8002bde <HAL_GPIO_Init+0x212>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a4c      	ldr	r2, [pc, #304]	@ (8002cf8 <HAL_GPIO_Init+0x32c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d007      	beq.n	8002bda <HAL_GPIO_Init+0x20e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a4b      	ldr	r2, [pc, #300]	@ (8002cfc <HAL_GPIO_Init+0x330>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d101      	bne.n	8002bd6 <HAL_GPIO_Init+0x20a>
 8002bd2:	2307      	movs	r3, #7
 8002bd4:	e00e      	b.n	8002bf4 <HAL_GPIO_Init+0x228>
 8002bd6:	2308      	movs	r3, #8
 8002bd8:	e00c      	b.n	8002bf4 <HAL_GPIO_Init+0x228>
 8002bda:	2306      	movs	r3, #6
 8002bdc:	e00a      	b.n	8002bf4 <HAL_GPIO_Init+0x228>
 8002bde:	2305      	movs	r3, #5
 8002be0:	e008      	b.n	8002bf4 <HAL_GPIO_Init+0x228>
 8002be2:	2304      	movs	r3, #4
 8002be4:	e006      	b.n	8002bf4 <HAL_GPIO_Init+0x228>
 8002be6:	2303      	movs	r3, #3
 8002be8:	e004      	b.n	8002bf4 <HAL_GPIO_Init+0x228>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e002      	b.n	8002bf4 <HAL_GPIO_Init+0x228>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <HAL_GPIO_Init+0x228>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	69fa      	ldr	r2, [r7, #28]
 8002bf6:	f002 0203 	and.w	r2, r2, #3
 8002bfa:	0092      	lsls	r2, r2, #2
 8002bfc:	4093      	lsls	r3, r2
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c04:	4935      	ldr	r1, [pc, #212]	@ (8002cdc <HAL_GPIO_Init+0x310>)
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	089b      	lsrs	r3, r3, #2
 8002c0a:	3302      	adds	r3, #2
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c12:	4b3b      	ldr	r3, [pc, #236]	@ (8002d00 <HAL_GPIO_Init+0x334>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c36:	4a32      	ldr	r2, [pc, #200]	@ (8002d00 <HAL_GPIO_Init+0x334>)
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c3c:	4b30      	ldr	r3, [pc, #192]	@ (8002d00 <HAL_GPIO_Init+0x334>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c60:	4a27      	ldr	r2, [pc, #156]	@ (8002d00 <HAL_GPIO_Init+0x334>)
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c66:	4b26      	ldr	r3, [pc, #152]	@ (8002d00 <HAL_GPIO_Init+0x334>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c8a:	4a1d      	ldr	r2, [pc, #116]	@ (8002d00 <HAL_GPIO_Init+0x334>)
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c90:	4b1b      	ldr	r3, [pc, #108]	@ (8002d00 <HAL_GPIO_Init+0x334>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cb4:	4a12      	ldr	r2, [pc, #72]	@ (8002d00 <HAL_GPIO_Init+0x334>)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	61fb      	str	r3, [r7, #28]
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	2b0f      	cmp	r3, #15
 8002cc4:	f67f ae90 	bls.w	80029e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cc8:	bf00      	nop
 8002cca:	bf00      	nop
 8002ccc:	3724      	adds	r7, #36	@ 0x24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40013800 	.word	0x40013800
 8002ce0:	40020000 	.word	0x40020000
 8002ce4:	40020400 	.word	0x40020400
 8002ce8:	40020800 	.word	0x40020800
 8002cec:	40020c00 	.word	0x40020c00
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40021400 	.word	0x40021400
 8002cf8:	40021800 	.word	0x40021800
 8002cfc:	40021c00 	.word	0x40021c00
 8002d00:	40013c00 	.word	0x40013c00

08002d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	807b      	strh	r3, [r7, #2]
 8002d10:	4613      	mov	r3, r2
 8002d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d14:	787b      	ldrb	r3, [r7, #1]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d1a:	887a      	ldrh	r2, [r7, #2]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d20:	e003      	b.n	8002d2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d22:	887b      	ldrh	r3, [r7, #2]
 8002d24:	041a      	lsls	r2, r3, #16
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	619a      	str	r2, [r3, #24]
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
	...

08002d38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d42:	4b08      	ldr	r3, [pc, #32]	@ (8002d64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d44:	695a      	ldr	r2, [r3, #20]
 8002d46:	88fb      	ldrh	r3, [r7, #6]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d006      	beq.n	8002d5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d4e:	4a05      	ldr	r2, [pc, #20]	@ (8002d64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d54:	88fb      	ldrh	r3, [r7, #6]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fe fc68 	bl	800162c <HAL_GPIO_EXTI_Callback>
  }
}
 8002d5c:	bf00      	nop
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40013c00 	.word	0x40013c00

08002d68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e101      	b.n	8002f7e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d106      	bne.n	8002d9a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f006 f9bd 	bl	8009114 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2203      	movs	r2, #3
 8002d9e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002da8:	d102      	bne.n	8002db0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f002 fd8a 	bl	80058ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6818      	ldr	r0, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	7c1a      	ldrb	r2, [r3, #16]
 8002dc2:	f88d 2000 	strb.w	r2, [sp]
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dca:	f002 fc69 	bl	80056a0 <USB_CoreInit>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0ce      	b.n	8002f7e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2100      	movs	r1, #0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f002 fd82 	bl	80058f0 <USB_SetCurrentMode>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d005      	beq.n	8002dfe <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2202      	movs	r2, #2
 8002df6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e0bf      	b.n	8002f7e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dfe:	2300      	movs	r3, #0
 8002e00:	73fb      	strb	r3, [r7, #15]
 8002e02:	e04a      	b.n	8002e9a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e04:	7bfa      	ldrb	r2, [r7, #15]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	3315      	adds	r3, #21
 8002e14:	2201      	movs	r2, #1
 8002e16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e18:	7bfa      	ldrb	r2, [r7, #15]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	3314      	adds	r3, #20
 8002e28:	7bfa      	ldrb	r2, [r7, #15]
 8002e2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e2c:	7bfa      	ldrb	r2, [r7, #15]
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	b298      	uxth	r0, r3
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	332e      	adds	r3, #46	@ 0x2e
 8002e40:	4602      	mov	r2, r0
 8002e42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e44:	7bfa      	ldrb	r2, [r7, #15]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	3318      	adds	r3, #24
 8002e54:	2200      	movs	r2, #0
 8002e56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e58:	7bfa      	ldrb	r2, [r7, #15]
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	331c      	adds	r3, #28
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e6c:	7bfa      	ldrb	r2, [r7, #15]
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	3320      	adds	r3, #32
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e80:	7bfa      	ldrb	r2, [r7, #15]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	3324      	adds	r3, #36	@ 0x24
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	3301      	adds	r3, #1
 8002e98:	73fb      	strb	r3, [r7, #15]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	791b      	ldrb	r3, [r3, #4]
 8002e9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d3af      	bcc.n	8002e04 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	73fb      	strb	r3, [r7, #15]
 8002ea8:	e044      	b.n	8002f34 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002eaa:	7bfa      	ldrb	r2, [r7, #15]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ec0:	7bfa      	ldrb	r2, [r7, #15]
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002ed2:	7bfa      	ldrb	r2, [r7, #15]
 8002ed4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ed6:	7bfa      	ldrb	r2, [r7, #15]
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002eec:	7bfa      	ldrb	r2, [r7, #15]
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f02:	7bfa      	ldrb	r2, [r7, #15]
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f18:	7bfa      	ldrb	r2, [r7, #15]
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	3301      	adds	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	791b      	ldrb	r3, [r3, #4]
 8002f38:	7bfa      	ldrb	r2, [r7, #15]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d3b5      	bcc.n	8002eaa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	7c1a      	ldrb	r2, [r3, #16]
 8002f46:	f88d 2000 	strb.w	r2, [sp]
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f4e:	f002 fd1b 	bl	8005988 <USB_DevInit>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e00c      	b.n	8002f7e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f003 fd65 	bl	8006a46 <USB_DevDisconnect>

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b084      	sub	sp, #16
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <HAL_PCD_Start+0x1c>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e022      	b.n	8002fe8 <HAL_PCD_Start+0x62>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d009      	beq.n	8002fca <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d105      	bne.n	8002fca <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f002 fc6c 	bl	80058ac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f003 fd13 	bl	8006a04 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ff0:	b590      	push	{r4, r7, lr}
 8002ff2:	b08d      	sub	sp, #52	@ 0x34
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f003 fdd1 	bl	8006bae <USB_GetMode>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	f040 848c 	bne.w	800392c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f003 fd35 	bl	8006a88 <USB_ReadInterrupts>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 8482 	beq.w	800392a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	0a1b      	lsrs	r3, r3, #8
 8003030:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f003 fd22 	bl	8006a88 <USB_ReadInterrupts>
 8003044:	4603      	mov	r3, r0
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b02      	cmp	r3, #2
 800304c:	d107      	bne.n	800305e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695a      	ldr	r2, [r3, #20]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f002 0202 	and.w	r2, r2, #2
 800305c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f003 fd10 	bl	8006a88 <USB_ReadInterrupts>
 8003068:	4603      	mov	r3, r0
 800306a:	f003 0310 	and.w	r3, r3, #16
 800306e:	2b10      	cmp	r3, #16
 8003070:	d161      	bne.n	8003136 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	699a      	ldr	r2, [r3, #24]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0210 	bic.w	r2, r2, #16
 8003080:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	f003 020f 	and.w	r2, r3, #15
 800308e:	4613      	mov	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	4413      	add	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	4413      	add	r3, r2
 800309e:	3304      	adds	r3, #4
 80030a0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	0c5b      	lsrs	r3, r3, #17
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d124      	bne.n	80030f8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80030b4:	4013      	ands	r3, r2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d035      	beq.n	8003126 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	091b      	lsrs	r3, r3, #4
 80030c2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80030c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	6a38      	ldr	r0, [r7, #32]
 80030ce:	f003 fb47 	bl	8006760 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	091b      	lsrs	r3, r3, #4
 80030da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030de:	441a      	add	r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	695a      	ldr	r2, [r3, #20]
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	091b      	lsrs	r3, r3, #4
 80030ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030f0:	441a      	add	r2, r3
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	615a      	str	r2, [r3, #20]
 80030f6:	e016      	b.n	8003126 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	0c5b      	lsrs	r3, r3, #17
 80030fc:	f003 030f 	and.w	r3, r3, #15
 8003100:	2b06      	cmp	r3, #6
 8003102:	d110      	bne.n	8003126 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800310a:	2208      	movs	r2, #8
 800310c:	4619      	mov	r1, r3
 800310e:	6a38      	ldr	r0, [r7, #32]
 8003110:	f003 fb26 	bl	8006760 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	091b      	lsrs	r3, r3, #4
 800311c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003120:	441a      	add	r2, r3
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	699a      	ldr	r2, [r3, #24]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f042 0210 	orr.w	r2, r2, #16
 8003134:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f003 fca4 	bl	8006a88 <USB_ReadInterrupts>
 8003140:	4603      	mov	r3, r0
 8003142:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003146:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800314a:	f040 80a7 	bne.w	800329c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f003 fca9 	bl	8006aae <USB_ReadDevAllOutEpInterrupt>
 800315c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800315e:	e099      	b.n	8003294 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 808e 	beq.w	8003288 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	4611      	mov	r1, r2
 8003176:	4618      	mov	r0, r3
 8003178:	f003 fccd 	bl	8006b16 <USB_ReadDevOutEPInterrupt>
 800317c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00c      	beq.n	80031a2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	4413      	add	r3, r2
 8003190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003194:	461a      	mov	r2, r3
 8003196:	2301      	movs	r3, #1
 8003198:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800319a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 fea3 	bl	8003ee8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00c      	beq.n	80031c6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80031ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031b8:	461a      	mov	r2, r3
 80031ba:	2308      	movs	r3, #8
 80031bc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80031be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 ff79 	bl	80040b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	f003 0310 	and.w	r3, r3, #16
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80031d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d2:	015a      	lsls	r2, r3, #5
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031dc:	461a      	mov	r2, r3
 80031de:	2310      	movs	r3, #16
 80031e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d030      	beq.n	800324e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f4:	2b80      	cmp	r3, #128	@ 0x80
 80031f6:	d109      	bne.n	800320c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	69fa      	ldr	r2, [r7, #28]
 8003202:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003206:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800320a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800320c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800320e:	4613      	mov	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	4413      	add	r3, r2
 800321e:	3304      	adds	r3, #4
 8003220:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	78db      	ldrb	r3, [r3, #3]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d108      	bne.n	800323c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2200      	movs	r2, #0
 800322e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003232:	b2db      	uxtb	r3, r3
 8003234:	4619      	mov	r1, r3
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f006 f880 	bl	800933c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800323c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	4413      	add	r3, r2
 8003244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003248:	461a      	mov	r2, r3
 800324a:	2302      	movs	r3, #2
 800324c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	f003 0320 	and.w	r3, r3, #32
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	4413      	add	r3, r2
 8003260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003264:	461a      	mov	r2, r3
 8003266:	2320      	movs	r3, #32
 8003268:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d009      	beq.n	8003288 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	4413      	add	r3, r2
 800327c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003280:	461a      	mov	r2, r3
 8003282:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003286:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328a:	3301      	adds	r3, #1
 800328c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800328e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003290:	085b      	lsrs	r3, r3, #1
 8003292:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003296:	2b00      	cmp	r3, #0
 8003298:	f47f af62 	bne.w	8003160 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f003 fbf1 	bl	8006a88 <USB_ReadInterrupts>
 80032a6:	4603      	mov	r3, r0
 80032a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80032b0:	f040 80db 	bne.w	800346a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f003 fc12 	bl	8006ae2 <USB_ReadDevAllInEpInterrupt>
 80032be:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80032c4:	e0cd      	b.n	8003462 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80032c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 80c2 	beq.w	8003456 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f003 fc38 	bl	8006b52 <USB_ReadDevInEPInterrupt>
 80032e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d057      	beq.n	800339e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f0:	f003 030f 	and.w	r3, r3, #15
 80032f4:	2201      	movs	r2, #1
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003302:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	43db      	mvns	r3, r3
 8003308:	69f9      	ldr	r1, [r7, #28]
 800330a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800330e:	4013      	ands	r3, r2
 8003310:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	4413      	add	r3, r2
 800331a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800331e:	461a      	mov	r2, r3
 8003320:	2301      	movs	r3, #1
 8003322:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	799b      	ldrb	r3, [r3, #6]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d132      	bne.n	8003392 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003330:	4613      	mov	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	3320      	adds	r3, #32
 800333c:	6819      	ldr	r1, [r3, #0]
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003342:	4613      	mov	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4403      	add	r3, r0
 800334c:	331c      	adds	r3, #28
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4419      	add	r1, r3
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003356:	4613      	mov	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	4413      	add	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4403      	add	r3, r0
 8003360:	3320      	adds	r3, #32
 8003362:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003366:	2b00      	cmp	r3, #0
 8003368:	d113      	bne.n	8003392 <HAL_PCD_IRQHandler+0x3a2>
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800336e:	4613      	mov	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	3324      	adds	r3, #36	@ 0x24
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d108      	bne.n	8003392 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6818      	ldr	r0, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800338a:	461a      	mov	r2, r3
 800338c:	2101      	movs	r1, #1
 800338e:	f003 fc3f 	bl	8006c10 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003394:	b2db      	uxtb	r3, r3
 8003396:	4619      	mov	r1, r3
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f005 ff4a 	bl	8009232 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80033a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033b4:	461a      	mov	r2, r3
 80033b6:	2308      	movs	r3, #8
 80033b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d008      	beq.n	80033d6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80033c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033d0:	461a      	mov	r2, r3
 80033d2:	2310      	movs	r3, #16
 80033d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80033e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033ec:	461a      	mov	r2, r3
 80033ee:	2340      	movs	r3, #64	@ 0x40
 80033f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d023      	beq.n	8003444 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80033fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033fe:	6a38      	ldr	r0, [r7, #32]
 8003400:	f002 fc26 	bl	8005c50 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003406:	4613      	mov	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	3310      	adds	r3, #16
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	4413      	add	r3, r2
 8003414:	3304      	adds	r3, #4
 8003416:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	78db      	ldrb	r3, [r3, #3]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d108      	bne.n	8003432 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	2200      	movs	r2, #0
 8003424:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003428:	b2db      	uxtb	r3, r3
 800342a:	4619      	mov	r1, r3
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f005 ff97 	bl	8009360 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	4413      	add	r3, r2
 800343a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800343e:	461a      	mov	r2, r3
 8003440:	2302      	movs	r3, #2
 8003442:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800344e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 fcbd 	bl	8003dd0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003458:	3301      	adds	r3, #1
 800345a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800345c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800345e:	085b      	lsrs	r3, r3, #1
 8003460:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003464:	2b00      	cmp	r3, #0
 8003466:	f47f af2e 	bne.w	80032c6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f003 fb0a 	bl	8006a88 <USB_ReadInterrupts>
 8003474:	4603      	mov	r3, r0
 8003476:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800347a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800347e:	d122      	bne.n	80034c6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	69fa      	ldr	r2, [r7, #28]
 800348a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800348e:	f023 0301 	bic.w	r3, r3, #1
 8003492:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800349a:	2b01      	cmp	r3, #1
 800349c:	d108      	bne.n	80034b0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80034a6:	2100      	movs	r1, #0
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 fea3 	bl	80041f4 <HAL_PCDEx_LPM_Callback>
 80034ae:	e002      	b.n	80034b6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f005 ff35 	bl	8009320 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	695a      	ldr	r2, [r3, #20]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80034c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f003 fadc 	bl	8006a88 <USB_ReadInterrupts>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034da:	d112      	bne.n	8003502 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d102      	bne.n	80034f2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f005 fef1 	bl	80092d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695a      	ldr	r2, [r3, #20]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003500:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f003 fabe 	bl	8006a88 <USB_ReadInterrupts>
 800350c:	4603      	mov	r3, r0
 800350e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003512:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003516:	f040 80b7 	bne.w	8003688 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	69fa      	ldr	r2, [r7, #28]
 8003524:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003528:	f023 0301 	bic.w	r3, r3, #1
 800352c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2110      	movs	r1, #16
 8003534:	4618      	mov	r0, r3
 8003536:	f002 fb8b 	bl	8005c50 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800353a:	2300      	movs	r3, #0
 800353c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800353e:	e046      	b.n	80035ce <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	4413      	add	r3, r2
 8003548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800354c:	461a      	mov	r2, r3
 800354e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003552:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	4413      	add	r3, r2
 800355c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003564:	0151      	lsls	r1, r2, #5
 8003566:	69fa      	ldr	r2, [r7, #28]
 8003568:	440a      	add	r2, r1
 800356a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800356e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003572:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	4413      	add	r3, r2
 800357c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003580:	461a      	mov	r2, r3
 8003582:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003586:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	4413      	add	r3, r2
 8003590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003598:	0151      	lsls	r1, r2, #5
 800359a:	69fa      	ldr	r2, [r7, #28]
 800359c:	440a      	add	r2, r1
 800359e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80035a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80035a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035b8:	0151      	lsls	r1, r2, #5
 80035ba:	69fa      	ldr	r2, [r7, #28]
 80035bc:	440a      	add	r2, r1
 80035be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80035c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80035c6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ca:	3301      	adds	r3, #1
 80035cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	791b      	ldrb	r3, [r3, #4]
 80035d2:	461a      	mov	r2, r3
 80035d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d3b2      	bcc.n	8003540 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	69fa      	ldr	r2, [r7, #28]
 80035e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035e8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80035ec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	7bdb      	ldrb	r3, [r3, #15]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d016      	beq.n	8003624 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003606:	f043 030b 	orr.w	r3, r3, #11
 800360a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003616:	69fa      	ldr	r2, [r7, #28]
 8003618:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800361c:	f043 030b 	orr.w	r3, r3, #11
 8003620:	6453      	str	r3, [r2, #68]	@ 0x44
 8003622:	e015      	b.n	8003650 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	69fa      	ldr	r2, [r7, #28]
 800362e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003632:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003636:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800363a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800364a:	f043 030b 	orr.w	r3, r3, #11
 800364e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800365e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003662:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6818      	ldr	r0, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003672:	461a      	mov	r2, r3
 8003674:	f003 facc 	bl	8006c10 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695a      	ldr	r2, [r3, #20]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003686:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f003 f9fb 	bl	8006a88 <USB_ReadInterrupts>
 8003692:	4603      	mov	r3, r0
 8003694:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003698:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800369c:	d123      	bne.n	80036e6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f003 fa91 	bl	8006bca <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f002 fb48 	bl	8005d42 <USB_GetDevSpeed>
 80036b2:	4603      	mov	r3, r0
 80036b4:	461a      	mov	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681c      	ldr	r4, [r3, #0]
 80036be:	f001 fa09 	bl	8004ad4 <HAL_RCC_GetHCLKFreq>
 80036c2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036c8:	461a      	mov	r2, r3
 80036ca:	4620      	mov	r0, r4
 80036cc:	f002 f84c 	bl	8005768 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f005 fdd6 	bl	8009282 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695a      	ldr	r2, [r3, #20]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80036e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f003 f9cc 	bl	8006a88 <USB_ReadInterrupts>
 80036f0:	4603      	mov	r3, r0
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d10a      	bne.n	8003710 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f005 fdb3 	bl	8009266 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695a      	ldr	r2, [r3, #20]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f002 0208 	and.w	r2, r2, #8
 800370e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f003 f9b7 	bl	8006a88 <USB_ReadInterrupts>
 800371a:	4603      	mov	r3, r0
 800371c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003720:	2b80      	cmp	r3, #128	@ 0x80
 8003722:	d123      	bne.n	800376c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003730:	2301      	movs	r3, #1
 8003732:	627b      	str	r3, [r7, #36]	@ 0x24
 8003734:	e014      	b.n	8003760 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800373a:	4613      	mov	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	440b      	add	r3, r1
 8003744:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d105      	bne.n	800375a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800374e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003750:	b2db      	uxtb	r3, r3
 8003752:	4619      	mov	r1, r3
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 fb0a 	bl	8003d6e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800375a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375c:	3301      	adds	r3, #1
 800375e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	791b      	ldrb	r3, [r3, #4]
 8003764:	461a      	mov	r2, r3
 8003766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003768:	4293      	cmp	r3, r2
 800376a:	d3e4      	bcc.n	8003736 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f003 f989 	bl	8006a88 <USB_ReadInterrupts>
 8003776:	4603      	mov	r3, r0
 8003778:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800377c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003780:	d13c      	bne.n	80037fc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003782:	2301      	movs	r3, #1
 8003784:	627b      	str	r3, [r7, #36]	@ 0x24
 8003786:	e02b      	b.n	80037e0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800379c:	4613      	mov	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	3318      	adds	r3, #24
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d115      	bne.n	80037da <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80037ae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	da12      	bge.n	80037da <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037b8:	4613      	mov	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	3317      	adds	r3, #23
 80037c4:	2201      	movs	r2, #1
 80037c6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80037c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	4619      	mov	r1, r3
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 faca 	bl	8003d6e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037dc:	3301      	adds	r3, #1
 80037de:	627b      	str	r3, [r7, #36]	@ 0x24
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	791b      	ldrb	r3, [r3, #4]
 80037e4:	461a      	mov	r2, r3
 80037e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d3cd      	bcc.n	8003788 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695a      	ldr	r2, [r3, #20]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80037fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f003 f941 	bl	8006a88 <USB_ReadInterrupts>
 8003806:	4603      	mov	r3, r0
 8003808:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800380c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003810:	d156      	bne.n	80038c0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003812:	2301      	movs	r3, #1
 8003814:	627b      	str	r3, [r7, #36]	@ 0x24
 8003816:	e045      	b.n	80038a4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	4413      	add	r3, r2
 8003820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800382c:	4613      	mov	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	4413      	add	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d12e      	bne.n	800389e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003840:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003842:	2b00      	cmp	r3, #0
 8003844:	da2b      	bge.n	800389e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003852:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003856:	429a      	cmp	r2, r3
 8003858:	d121      	bne.n	800389e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800385e:	4613      	mov	r3, r2
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800386c:	2201      	movs	r2, #1
 800386e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10a      	bne.n	800389e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	69fa      	ldr	r2, [r7, #28]
 8003892:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003896:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800389a:	6053      	str	r3, [r2, #4]
            break;
 800389c:	e008      	b.n	80038b0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800389e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a0:	3301      	adds	r3, #1
 80038a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	791b      	ldrb	r3, [r3, #4]
 80038a8:	461a      	mov	r2, r3
 80038aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d3b3      	bcc.n	8003818 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695a      	ldr	r2, [r3, #20]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80038be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f003 f8df 	bl	8006a88 <USB_ReadInterrupts>
 80038ca:	4603      	mov	r3, r0
 80038cc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80038d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038d4:	d10a      	bne.n	80038ec <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f005 fd54 	bl	8009384 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80038ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f003 f8c9 	bl	8006a88 <USB_ReadInterrupts>
 80038f6:	4603      	mov	r3, r0
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d115      	bne.n	800392c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f005 fd44 	bl	80093a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6859      	ldr	r1, [r3, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	430a      	orrs	r2, r1
 8003926:	605a      	str	r2, [r3, #4]
 8003928:	e000      	b.n	800392c <HAL_PCD_IRQHandler+0x93c>
      return;
 800392a:	bf00      	nop
    }
  }
}
 800392c:	3734      	adds	r7, #52	@ 0x34
 800392e:	46bd      	mov	sp, r7
 8003930:	bd90      	pop	{r4, r7, pc}

08003932 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
 800393a:	460b      	mov	r3, r1
 800393c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_PCD_SetAddress+0x1a>
 8003948:	2302      	movs	r3, #2
 800394a:	e012      	b.n	8003972 <HAL_PCD_SetAddress+0x40>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	78fa      	ldrb	r2, [r7, #3]
 8003958:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	78fa      	ldrb	r2, [r7, #3]
 8003960:	4611      	mov	r1, r2
 8003962:	4618      	mov	r0, r3
 8003964:	f003 f828 	bl	80069b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b084      	sub	sp, #16
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	4608      	mov	r0, r1
 8003984:	4611      	mov	r1, r2
 8003986:	461a      	mov	r2, r3
 8003988:	4603      	mov	r3, r0
 800398a:	70fb      	strb	r3, [r7, #3]
 800398c:	460b      	mov	r3, r1
 800398e:	803b      	strh	r3, [r7, #0]
 8003990:	4613      	mov	r3, r2
 8003992:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003998:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800399c:	2b00      	cmp	r3, #0
 800399e:	da0f      	bge.n	80039c0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039a0:	78fb      	ldrb	r3, [r7, #3]
 80039a2:	f003 020f 	and.w	r2, r3, #15
 80039a6:	4613      	mov	r3, r2
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	4413      	add	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	3310      	adds	r3, #16
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	4413      	add	r3, r2
 80039b4:	3304      	adds	r3, #4
 80039b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2201      	movs	r2, #1
 80039bc:	705a      	strb	r2, [r3, #1]
 80039be:	e00f      	b.n	80039e0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039c0:	78fb      	ldrb	r3, [r7, #3]
 80039c2:	f003 020f 	and.w	r2, r3, #15
 80039c6:	4613      	mov	r3, r2
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	4413      	add	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	4413      	add	r3, r2
 80039d6:	3304      	adds	r3, #4
 80039d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80039e0:	78fb      	ldrb	r3, [r7, #3]
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80039ec:	883b      	ldrh	r3, [r7, #0]
 80039ee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	78ba      	ldrb	r2, [r7, #2]
 80039fa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	785b      	ldrb	r3, [r3, #1]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d004      	beq.n	8003a0e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a0e:	78bb      	ldrb	r3, [r7, #2]
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d102      	bne.n	8003a1a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d101      	bne.n	8003a28 <HAL_PCD_EP_Open+0xae>
 8003a24:	2302      	movs	r3, #2
 8003a26:	e00e      	b.n	8003a46 <HAL_PCD_EP_Open+0xcc>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68f9      	ldr	r1, [r7, #12]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f002 f9a8 	bl	8005d8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003a44:	7afb      	ldrb	r3, [r7, #11]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b084      	sub	sp, #16
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	460b      	mov	r3, r1
 8003a58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	da0f      	bge.n	8003a82 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a62:	78fb      	ldrb	r3, [r7, #3]
 8003a64:	f003 020f 	and.w	r2, r3, #15
 8003a68:	4613      	mov	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	3310      	adds	r3, #16
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	4413      	add	r3, r2
 8003a76:	3304      	adds	r3, #4
 8003a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	705a      	strb	r2, [r3, #1]
 8003a80:	e00f      	b.n	8003aa2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a82:	78fb      	ldrb	r3, [r7, #3]
 8003a84:	f003 020f 	and.w	r2, r3, #15
 8003a88:	4613      	mov	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	4413      	add	r3, r2
 8003a98:	3304      	adds	r3, #4
 8003a9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aa2:	78fb      	ldrb	r3, [r7, #3]
 8003aa4:	f003 030f 	and.w	r3, r3, #15
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_PCD_EP_Close+0x6e>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e00e      	b.n	8003ada <HAL_PCD_EP_Close+0x8c>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68f9      	ldr	r1, [r7, #12]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f002 f9e6 	bl	8005e9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b086      	sub	sp, #24
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
 8003aee:	460b      	mov	r3, r1
 8003af0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003af2:	7afb      	ldrb	r3, [r7, #11]
 8003af4:	f003 020f 	and.w	r2, r3, #15
 8003af8:	4613      	mov	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4413      	add	r3, r2
 8003b08:	3304      	adds	r3, #4
 8003b0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2200      	movs	r2, #0
 8003b22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b24:	7afb      	ldrb	r3, [r7, #11]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	799b      	ldrb	r3, [r3, #6]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d102      	bne.n	8003b3e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	799b      	ldrb	r3, [r3, #6]
 8003b46:	461a      	mov	r2, r3
 8003b48:	6979      	ldr	r1, [r7, #20]
 8003b4a:	f002 fa83 	bl	8006054 <USB_EPStartXfer>

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	460b      	mov	r3, r1
 8003b62:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b64:	78fb      	ldrb	r3, [r7, #3]
 8003b66:	f003 020f 	and.w	r2, r3, #15
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	4413      	add	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003b7a:	681b      	ldr	r3, [r3, #0]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	607a      	str	r2, [r7, #4]
 8003b92:	603b      	str	r3, [r7, #0]
 8003b94:	460b      	mov	r3, r1
 8003b96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b98:	7afb      	ldrb	r3, [r7, #11]
 8003b9a:	f003 020f 	and.w	r2, r3, #15
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	3310      	adds	r3, #16
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4413      	add	r3, r2
 8003bac:	3304      	adds	r3, #4
 8003bae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bc8:	7afb      	ldrb	r3, [r7, #11]
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	799b      	ldrb	r3, [r3, #6]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d102      	bne.n	8003be2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	799b      	ldrb	r3, [r3, #6]
 8003bea:	461a      	mov	r2, r3
 8003bec:	6979      	ldr	r1, [r7, #20]
 8003bee:	f002 fa31 	bl	8006054 <USB_EPStartXfer>

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3718      	adds	r7, #24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	7912      	ldrb	r2, [r2, #4]
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d901      	bls.n	8003c1a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e04f      	b.n	8003cba <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	da0f      	bge.n	8003c42 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c22:	78fb      	ldrb	r3, [r7, #3]
 8003c24:	f003 020f 	and.w	r2, r3, #15
 8003c28:	4613      	mov	r3, r2
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	3310      	adds	r3, #16
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	4413      	add	r3, r2
 8003c36:	3304      	adds	r3, #4
 8003c38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	705a      	strb	r2, [r3, #1]
 8003c40:	e00d      	b.n	8003c5e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c42:	78fa      	ldrb	r2, [r7, #3]
 8003c44:	4613      	mov	r3, r2
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	4413      	add	r3, r2
 8003c54:	3304      	adds	r3, #4
 8003c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2201      	movs	r2, #1
 8003c62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c64:	78fb      	ldrb	r3, [r7, #3]
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <HAL_PCD_EP_SetStall+0x82>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	e01d      	b.n	8003cba <HAL_PCD_EP_SetStall+0xbe>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68f9      	ldr	r1, [r7, #12]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f002 fdbf 	bl	8006810 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c92:	78fb      	ldrb	r3, [r7, #3]
 8003c94:	f003 030f 	and.w	r3, r3, #15
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d109      	bne.n	8003cb0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6818      	ldr	r0, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	7999      	ldrb	r1, [r3, #6]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003caa:	461a      	mov	r2, r3
 8003cac:	f002 ffb0 	bl	8006c10 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b084      	sub	sp, #16
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	460b      	mov	r3, r1
 8003ccc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003cce:	78fb      	ldrb	r3, [r7, #3]
 8003cd0:	f003 030f 	and.w	r3, r3, #15
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	7912      	ldrb	r2, [r2, #4]
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d901      	bls.n	8003ce0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e042      	b.n	8003d66 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ce0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	da0f      	bge.n	8003d08 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ce8:	78fb      	ldrb	r3, [r7, #3]
 8003cea:	f003 020f 	and.w	r2, r3, #15
 8003cee:	4613      	mov	r3, r2
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	3310      	adds	r3, #16
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2201      	movs	r2, #1
 8003d04:	705a      	strb	r2, [r3, #1]
 8003d06:	e00f      	b.n	8003d28 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d08:	78fb      	ldrb	r3, [r7, #3]
 8003d0a:	f003 020f 	and.w	r2, r3, #15
 8003d0e:	4613      	mov	r3, r2
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	4413      	add	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3304      	adds	r3, #4
 8003d20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d2e:	78fb      	ldrb	r3, [r7, #3]
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d101      	bne.n	8003d48 <HAL_PCD_EP_ClrStall+0x86>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e00e      	b.n	8003d66 <HAL_PCD_EP_ClrStall+0xa4>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68f9      	ldr	r1, [r7, #12]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f002 fdc8 	bl	80068ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b084      	sub	sp, #16
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	460b      	mov	r3, r1
 8003d78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003d7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	da0c      	bge.n	8003d9c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	f003 020f 	and.w	r2, r3, #15
 8003d88:	4613      	mov	r3, r2
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	4413      	add	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	3310      	adds	r3, #16
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	4413      	add	r3, r2
 8003d96:	3304      	adds	r3, #4
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	e00c      	b.n	8003db6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d9c:	78fb      	ldrb	r3, [r7, #3]
 8003d9e:	f003 020f 	and.w	r2, r3, #15
 8003da2:	4613      	mov	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	4413      	add	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	4413      	add	r3, r2
 8003db2:	3304      	adds	r3, #4
 8003db4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68f9      	ldr	r1, [r7, #12]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f002 fbe7 	bl	8006590 <USB_EPStopXfer>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003dc6:	7afb      	ldrb	r3, [r7, #11]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08a      	sub	sp, #40	@ 0x28
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	4613      	mov	r3, r2
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	4413      	add	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	3310      	adds	r3, #16
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	4413      	add	r3, r2
 8003df4:	3304      	adds	r3, #4
 8003df6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	695a      	ldr	r2, [r3, #20]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d901      	bls.n	8003e08 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e06b      	b.n	8003ee0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	69fa      	ldr	r2, [r7, #28]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d902      	bls.n	8003e24 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	3303      	adds	r3, #3
 8003e28:	089b      	lsrs	r3, r3, #2
 8003e2a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e2c:	e02a      	b.n	8003e84 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	691a      	ldr	r2, [r3, #16]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	69fa      	ldr	r2, [r7, #28]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d902      	bls.n	8003e4a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	3303      	adds	r3, #3
 8003e4e:	089b      	lsrs	r3, r3, #2
 8003e50:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	68d9      	ldr	r1, [r3, #12]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	4603      	mov	r3, r0
 8003e66:	6978      	ldr	r0, [r7, #20]
 8003e68:	f002 fc3c 	bl	80066e4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	441a      	add	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	695a      	ldr	r2, [r3, #20]
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	441a      	add	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d809      	bhi.n	8003eae <PCD_WriteEmptyTxFifo+0xde>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	695a      	ldr	r2, [r3, #20]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d203      	bcs.n	8003eae <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1bf      	bne.n	8003e2e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	691a      	ldr	r2, [r3, #16]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d811      	bhi.n	8003ede <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	f003 030f 	and.w	r3, r3, #15
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ece:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	6939      	ldr	r1, [r7, #16]
 8003ed6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003eda:	4013      	ands	r3, r2
 8003edc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3720      	adds	r7, #32
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	333c      	adds	r3, #60	@ 0x3c
 8003f00:	3304      	adds	r3, #4
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	015a      	lsls	r2, r3, #5
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	799b      	ldrb	r3, [r3, #6]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d17b      	bne.n	8004016 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d015      	beq.n	8003f54 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	4a61      	ldr	r2, [pc, #388]	@ (80040b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	f240 80b9 	bls.w	80040a4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 80b3 	beq.w	80040a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f50:	6093      	str	r3, [r2, #8]
 8003f52:	e0a7      	b.n	80040a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	f003 0320 	and.w	r3, r3, #32
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d009      	beq.n	8003f72 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	2320      	movs	r3, #32
 8003f6e:	6093      	str	r3, [r2, #8]
 8003f70:	e098      	b.n	80040a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f040 8093 	bne.w	80040a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	4a4b      	ldr	r2, [pc, #300]	@ (80040b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d90f      	bls.n	8003fa6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fa2:	6093      	str	r3, [r2, #8]
 8003fa4:	e07e      	b.n	80040a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	4413      	add	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	3304      	adds	r3, #4
 8003fba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a1a      	ldr	r2, [r3, #32]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	0159      	lsls	r1, r3, #5
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	440b      	add	r3, r1
 8003fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fd2:	1ad2      	subs	r2, r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d114      	bne.n	8004008 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d109      	bne.n	8003ffa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	f002 fe0c 	bl	8006c10 <USB_EP0_OutStart>
 8003ff8:	e006      	b.n	8004008 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	441a      	add	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	b2db      	uxtb	r3, r3
 800400c:	4619      	mov	r1, r3
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f005 f8f4 	bl	80091fc <HAL_PCD_DataOutStageCallback>
 8004014:	e046      	b.n	80040a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	4a26      	ldr	r2, [pc, #152]	@ (80040b4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d124      	bne.n	8004068 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004034:	461a      	mov	r2, r3
 8004036:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800403a:	6093      	str	r3, [r2, #8]
 800403c:	e032      	b.n	80040a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f003 0320 	and.w	r3, r3, #32
 8004044:	2b00      	cmp	r3, #0
 8004046:	d008      	beq.n	800405a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004054:	461a      	mov	r2, r3
 8004056:	2320      	movs	r3, #32
 8004058:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	b2db      	uxtb	r3, r3
 800405e:	4619      	mov	r1, r3
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f005 f8cb 	bl	80091fc <HAL_PCD_DataOutStageCallback>
 8004066:	e01d      	b.n	80040a4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d114      	bne.n	8004098 <PCD_EP_OutXfrComplete_int+0x1b0>
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	4613      	mov	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	440b      	add	r3, r1
 800407c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d108      	bne.n	8004098 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6818      	ldr	r0, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004090:	461a      	mov	r2, r3
 8004092:	2100      	movs	r1, #0
 8004094:	f002 fdbc 	bl	8006c10 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	b2db      	uxtb	r3, r3
 800409c:	4619      	mov	r1, r3
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f005 f8ac 	bl	80091fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3720      	adds	r7, #32
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	4f54300a 	.word	0x4f54300a
 80040b4:	4f54310a 	.word	0x4f54310a

080040b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	333c      	adds	r3, #60	@ 0x3c
 80040d0:	3304      	adds	r3, #4
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4a15      	ldr	r2, [pc, #84]	@ (8004140 <PCD_EP_OutSetupPacket_int+0x88>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d90e      	bls.n	800410c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d009      	beq.n	800410c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004104:	461a      	mov	r2, r3
 8004106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800410a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f005 f863 	bl	80091d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	4a0a      	ldr	r2, [pc, #40]	@ (8004140 <PCD_EP_OutSetupPacket_int+0x88>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d90c      	bls.n	8004134 <PCD_EP_OutSetupPacket_int+0x7c>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	799b      	ldrb	r3, [r3, #6]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d108      	bne.n	8004134 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800412c:	461a      	mov	r2, r3
 800412e:	2101      	movs	r1, #1
 8004130:	f002 fd6e 	bl	8006c10 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	4f54300a 	.word	0x4f54300a

08004144 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	70fb      	strb	r3, [r7, #3]
 8004150:	4613      	mov	r3, r2
 8004152:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d107      	bne.n	8004172 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004162:	883b      	ldrh	r3, [r7, #0]
 8004164:	0419      	lsls	r1, r3, #16
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	430a      	orrs	r2, r1
 800416e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004170:	e028      	b.n	80041c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004178:	0c1b      	lsrs	r3, r3, #16
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	4413      	add	r3, r2
 800417e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004180:	2300      	movs	r3, #0
 8004182:	73fb      	strb	r3, [r7, #15]
 8004184:	e00d      	b.n	80041a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	7bfb      	ldrb	r3, [r7, #15]
 800418c:	3340      	adds	r3, #64	@ 0x40
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	0c1b      	lsrs	r3, r3, #16
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	4413      	add	r3, r2
 800419a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800419c:	7bfb      	ldrb	r3, [r7, #15]
 800419e:	3301      	adds	r3, #1
 80041a0:	73fb      	strb	r3, [r7, #15]
 80041a2:	7bfa      	ldrb	r2, [r7, #15]
 80041a4:	78fb      	ldrb	r3, [r7, #3]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d3ec      	bcc.n	8004186 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80041ac:	883b      	ldrh	r3, [r7, #0]
 80041ae:	0418      	lsls	r0, r3, #16
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6819      	ldr	r1, [r3, #0]
 80041b4:	78fb      	ldrb	r3, [r7, #3]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	4302      	orrs	r2, r0
 80041bc:	3340      	adds	r3, #64	@ 0x40
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	440b      	add	r3, r1
 80041c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	460b      	mov	r3, r1
 80041dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	887a      	ldrh	r2, [r7, #2]
 80041e4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	460b      	mov	r3, r1
 80041fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e267      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d075      	beq.n	8004316 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800422a:	4b88      	ldr	r3, [pc, #544]	@ (800444c <HAL_RCC_OscConfig+0x240>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 030c 	and.w	r3, r3, #12
 8004232:	2b04      	cmp	r3, #4
 8004234:	d00c      	beq.n	8004250 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004236:	4b85      	ldr	r3, [pc, #532]	@ (800444c <HAL_RCC_OscConfig+0x240>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800423e:	2b08      	cmp	r3, #8
 8004240:	d112      	bne.n	8004268 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004242:	4b82      	ldr	r3, [pc, #520]	@ (800444c <HAL_RCC_OscConfig+0x240>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800424a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800424e:	d10b      	bne.n	8004268 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004250:	4b7e      	ldr	r3, [pc, #504]	@ (800444c <HAL_RCC_OscConfig+0x240>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d05b      	beq.n	8004314 <HAL_RCC_OscConfig+0x108>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d157      	bne.n	8004314 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e242      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004270:	d106      	bne.n	8004280 <HAL_RCC_OscConfig+0x74>
 8004272:	4b76      	ldr	r3, [pc, #472]	@ (800444c <HAL_RCC_OscConfig+0x240>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a75      	ldr	r2, [pc, #468]	@ (800444c <HAL_RCC_OscConfig+0x240>)
 8004278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	e01d      	b.n	80042bc <HAL_RCC_OscConfig+0xb0>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004288:	d10c      	bne.n	80042a4 <HAL_RCC_OscConfig+0x98>
 800428a:	4b70      	ldr	r3, [pc, #448]	@ (800444c <HAL_RCC_OscConfig+0x240>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a6f      	ldr	r2, [pc, #444]	@ (800444c <HAL_RCC_OscConfig+0x240>)
 8004290:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	4b6d      	ldr	r3, [pc, #436]	@ (800444c <HAL_RCC_OscConfig+0x240>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a6c      	ldr	r2, [pc, #432]	@ (800444c <HAL_RCC_OscConfig+0x240>)
 800429c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	e00b      	b.n	80042bc <HAL_RCC_OscConfig+0xb0>
 80042a4:	4b69      	ldr	r3, [pc, #420]	@ (800444c <HAL_RCC_OscConfig+0x240>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a68      	ldr	r2, [pc, #416]	@ (800444c <HAL_RCC_OscConfig+0x240>)
 80042aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	4b66      	ldr	r3, [pc, #408]	@ (800444c <HAL_RCC_OscConfig+0x240>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a65      	ldr	r2, [pc, #404]	@ (800444c <HAL_RCC_OscConfig+0x240>)
 80042b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d013      	beq.n	80042ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c4:	f7fd fd88 	bl	8001dd8 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042cc:	f7fd fd84 	bl	8001dd8 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b64      	cmp	r3, #100	@ 0x64
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e207      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042de:	4b5b      	ldr	r3, [pc, #364]	@ (800444c <HAL_RCC_OscConfig+0x240>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0f0      	beq.n	80042cc <HAL_RCC_OscConfig+0xc0>
 80042ea:	e014      	b.n	8004316 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ec:	f7fd fd74 	bl	8001dd8 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f4:	f7fd fd70 	bl	8001dd8 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b64      	cmp	r3, #100	@ 0x64
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e1f3      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004306:	4b51      	ldr	r3, [pc, #324]	@ (800444c <HAL_RCC_OscConfig+0x240>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f0      	bne.n	80042f4 <HAL_RCC_OscConfig+0xe8>
 8004312:	e000      	b.n	8004316 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d063      	beq.n	80043ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004322:	4b4a      	ldr	r3, [pc, #296]	@ (800444c <HAL_RCC_OscConfig+0x240>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 030c 	and.w	r3, r3, #12
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00b      	beq.n	8004346 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800432e:	4b47      	ldr	r3, [pc, #284]	@ (800444c <HAL_RCC_OscConfig+0x240>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004336:	2b08      	cmp	r3, #8
 8004338:	d11c      	bne.n	8004374 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800433a:	4b44      	ldr	r3, [pc, #272]	@ (800444c <HAL_RCC_OscConfig+0x240>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d116      	bne.n	8004374 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004346:	4b41      	ldr	r3, [pc, #260]	@ (800444c <HAL_RCC_OscConfig+0x240>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d005      	beq.n	800435e <HAL_RCC_OscConfig+0x152>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d001      	beq.n	800435e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e1c7      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435e:	4b3b      	ldr	r3, [pc, #236]	@ (800444c <HAL_RCC_OscConfig+0x240>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	4937      	ldr	r1, [pc, #220]	@ (800444c <HAL_RCC_OscConfig+0x240>)
 800436e:	4313      	orrs	r3, r2
 8004370:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004372:	e03a      	b.n	80043ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d020      	beq.n	80043be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800437c:	4b34      	ldr	r3, [pc, #208]	@ (8004450 <HAL_RCC_OscConfig+0x244>)
 800437e:	2201      	movs	r2, #1
 8004380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004382:	f7fd fd29 	bl	8001dd8 <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800438a:	f7fd fd25 	bl	8001dd8 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e1a8      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800439c:	4b2b      	ldr	r3, [pc, #172]	@ (800444c <HAL_RCC_OscConfig+0x240>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0f0      	beq.n	800438a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a8:	4b28      	ldr	r3, [pc, #160]	@ (800444c <HAL_RCC_OscConfig+0x240>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	4925      	ldr	r1, [pc, #148]	@ (800444c <HAL_RCC_OscConfig+0x240>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	600b      	str	r3, [r1, #0]
 80043bc:	e015      	b.n	80043ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043be:	4b24      	ldr	r3, [pc, #144]	@ (8004450 <HAL_RCC_OscConfig+0x244>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c4:	f7fd fd08 	bl	8001dd8 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043cc:	f7fd fd04 	bl	8001dd8 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e187      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043de:	4b1b      	ldr	r3, [pc, #108]	@ (800444c <HAL_RCC_OscConfig+0x240>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f0      	bne.n	80043cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d036      	beq.n	8004464 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d016      	beq.n	800442c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043fe:	4b15      	ldr	r3, [pc, #84]	@ (8004454 <HAL_RCC_OscConfig+0x248>)
 8004400:	2201      	movs	r2, #1
 8004402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004404:	f7fd fce8 	bl	8001dd8 <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800440c:	f7fd fce4 	bl	8001dd8 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e167      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800441e:	4b0b      	ldr	r3, [pc, #44]	@ (800444c <HAL_RCC_OscConfig+0x240>)
 8004420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f0      	beq.n	800440c <HAL_RCC_OscConfig+0x200>
 800442a:	e01b      	b.n	8004464 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800442c:	4b09      	ldr	r3, [pc, #36]	@ (8004454 <HAL_RCC_OscConfig+0x248>)
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004432:	f7fd fcd1 	bl	8001dd8 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004438:	e00e      	b.n	8004458 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800443a:	f7fd fccd 	bl	8001dd8 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d907      	bls.n	8004458 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e150      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
 800444c:	40023800 	.word	0x40023800
 8004450:	42470000 	.word	0x42470000
 8004454:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004458:	4b88      	ldr	r3, [pc, #544]	@ (800467c <HAL_RCC_OscConfig+0x470>)
 800445a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1ea      	bne.n	800443a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 8097 	beq.w	80045a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004472:	2300      	movs	r3, #0
 8004474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004476:	4b81      	ldr	r3, [pc, #516]	@ (800467c <HAL_RCC_OscConfig+0x470>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10f      	bne.n	80044a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004482:	2300      	movs	r3, #0
 8004484:	60bb      	str	r3, [r7, #8]
 8004486:	4b7d      	ldr	r3, [pc, #500]	@ (800467c <HAL_RCC_OscConfig+0x470>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448a:	4a7c      	ldr	r2, [pc, #496]	@ (800467c <HAL_RCC_OscConfig+0x470>)
 800448c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004490:	6413      	str	r3, [r2, #64]	@ 0x40
 8004492:	4b7a      	ldr	r3, [pc, #488]	@ (800467c <HAL_RCC_OscConfig+0x470>)
 8004494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800449a:	60bb      	str	r3, [r7, #8]
 800449c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449e:	2301      	movs	r3, #1
 80044a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a2:	4b77      	ldr	r3, [pc, #476]	@ (8004680 <HAL_RCC_OscConfig+0x474>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d118      	bne.n	80044e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ae:	4b74      	ldr	r3, [pc, #464]	@ (8004680 <HAL_RCC_OscConfig+0x474>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a73      	ldr	r2, [pc, #460]	@ (8004680 <HAL_RCC_OscConfig+0x474>)
 80044b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ba:	f7fd fc8d 	bl	8001dd8 <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c2:	f7fd fc89 	bl	8001dd8 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e10c      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d4:	4b6a      	ldr	r3, [pc, #424]	@ (8004680 <HAL_RCC_OscConfig+0x474>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d106      	bne.n	80044f6 <HAL_RCC_OscConfig+0x2ea>
 80044e8:	4b64      	ldr	r3, [pc, #400]	@ (800467c <HAL_RCC_OscConfig+0x470>)
 80044ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ec:	4a63      	ldr	r2, [pc, #396]	@ (800467c <HAL_RCC_OscConfig+0x470>)
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80044f4:	e01c      	b.n	8004530 <HAL_RCC_OscConfig+0x324>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	2b05      	cmp	r3, #5
 80044fc:	d10c      	bne.n	8004518 <HAL_RCC_OscConfig+0x30c>
 80044fe:	4b5f      	ldr	r3, [pc, #380]	@ (800467c <HAL_RCC_OscConfig+0x470>)
 8004500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004502:	4a5e      	ldr	r2, [pc, #376]	@ (800467c <HAL_RCC_OscConfig+0x470>)
 8004504:	f043 0304 	orr.w	r3, r3, #4
 8004508:	6713      	str	r3, [r2, #112]	@ 0x70
 800450a:	4b5c      	ldr	r3, [pc, #368]	@ (800467c <HAL_RCC_OscConfig+0x470>)
 800450c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800450e:	4a5b      	ldr	r2, [pc, #364]	@ (800467c <HAL_RCC_OscConfig+0x470>)
 8004510:	f043 0301 	orr.w	r3, r3, #1
 8004514:	6713      	str	r3, [r2, #112]	@ 0x70
 8004516:	e00b      	b.n	8004530 <HAL_RCC_OscConfig+0x324>
 8004518:	4b58      	ldr	r3, [pc, #352]	@ (800467c <HAL_RCC_OscConfig+0x470>)
 800451a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800451c:	4a57      	ldr	r2, [pc, #348]	@ (800467c <HAL_RCC_OscConfig+0x470>)
 800451e:	f023 0301 	bic.w	r3, r3, #1
 8004522:	6713      	str	r3, [r2, #112]	@ 0x70
 8004524:	4b55      	ldr	r3, [pc, #340]	@ (800467c <HAL_RCC_OscConfig+0x470>)
 8004526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004528:	4a54      	ldr	r2, [pc, #336]	@ (800467c <HAL_RCC_OscConfig+0x470>)
 800452a:	f023 0304 	bic.w	r3, r3, #4
 800452e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d015      	beq.n	8004564 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004538:	f7fd fc4e 	bl	8001dd8 <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453e:	e00a      	b.n	8004556 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004540:	f7fd fc4a 	bl	8001dd8 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800454e:	4293      	cmp	r3, r2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e0cb      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004556:	4b49      	ldr	r3, [pc, #292]	@ (800467c <HAL_RCC_OscConfig+0x470>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0ee      	beq.n	8004540 <HAL_RCC_OscConfig+0x334>
 8004562:	e014      	b.n	800458e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004564:	f7fd fc38 	bl	8001dd8 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800456a:	e00a      	b.n	8004582 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456c:	f7fd fc34 	bl	8001dd8 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800457a:	4293      	cmp	r3, r2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e0b5      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004582:	4b3e      	ldr	r3, [pc, #248]	@ (800467c <HAL_RCC_OscConfig+0x470>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1ee      	bne.n	800456c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800458e:	7dfb      	ldrb	r3, [r7, #23]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d105      	bne.n	80045a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004594:	4b39      	ldr	r3, [pc, #228]	@ (800467c <HAL_RCC_OscConfig+0x470>)
 8004596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004598:	4a38      	ldr	r2, [pc, #224]	@ (800467c <HAL_RCC_OscConfig+0x470>)
 800459a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800459e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 80a1 	beq.w	80046ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045aa:	4b34      	ldr	r3, [pc, #208]	@ (800467c <HAL_RCC_OscConfig+0x470>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 030c 	and.w	r3, r3, #12
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d05c      	beq.n	8004670 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d141      	bne.n	8004642 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045be:	4b31      	ldr	r3, [pc, #196]	@ (8004684 <HAL_RCC_OscConfig+0x478>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c4:	f7fd fc08 	bl	8001dd8 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045cc:	f7fd fc04 	bl	8001dd8 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e087      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045de:	4b27      	ldr	r3, [pc, #156]	@ (800467c <HAL_RCC_OscConfig+0x470>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69da      	ldr	r2, [r3, #28]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	431a      	orrs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f8:	019b      	lsls	r3, r3, #6
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004600:	085b      	lsrs	r3, r3, #1
 8004602:	3b01      	subs	r3, #1
 8004604:	041b      	lsls	r3, r3, #16
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460c:	061b      	lsls	r3, r3, #24
 800460e:	491b      	ldr	r1, [pc, #108]	@ (800467c <HAL_RCC_OscConfig+0x470>)
 8004610:	4313      	orrs	r3, r2
 8004612:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004614:	4b1b      	ldr	r3, [pc, #108]	@ (8004684 <HAL_RCC_OscConfig+0x478>)
 8004616:	2201      	movs	r2, #1
 8004618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461a:	f7fd fbdd 	bl	8001dd8 <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004622:	f7fd fbd9 	bl	8001dd8 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e05c      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004634:	4b11      	ldr	r3, [pc, #68]	@ (800467c <HAL_RCC_OscConfig+0x470>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0f0      	beq.n	8004622 <HAL_RCC_OscConfig+0x416>
 8004640:	e054      	b.n	80046ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004642:	4b10      	ldr	r3, [pc, #64]	@ (8004684 <HAL_RCC_OscConfig+0x478>)
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004648:	f7fd fbc6 	bl	8001dd8 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004650:	f7fd fbc2 	bl	8001dd8 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e045      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004662:	4b06      	ldr	r3, [pc, #24]	@ (800467c <HAL_RCC_OscConfig+0x470>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f0      	bne.n	8004650 <HAL_RCC_OscConfig+0x444>
 800466e:	e03d      	b.n	80046ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d107      	bne.n	8004688 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e038      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
 800467c:	40023800 	.word	0x40023800
 8004680:	40007000 	.word	0x40007000
 8004684:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004688:	4b1b      	ldr	r3, [pc, #108]	@ (80046f8 <HAL_RCC_OscConfig+0x4ec>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d028      	beq.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d121      	bne.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d11a      	bne.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80046b8:	4013      	ands	r3, r2
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80046be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d111      	bne.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ce:	085b      	lsrs	r3, r3, #1
 80046d0:	3b01      	subs	r3, #1
 80046d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d107      	bne.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d001      	beq.n	80046ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40023800 	.word	0x40023800

080046fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e0cc      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004710:	4b68      	ldr	r3, [pc, #416]	@ (80048b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d90c      	bls.n	8004738 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471e:	4b65      	ldr	r3, [pc, #404]	@ (80048b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	b2d2      	uxtb	r2, r2
 8004724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004726:	4b63      	ldr	r3, [pc, #396]	@ (80048b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d001      	beq.n	8004738 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e0b8      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d020      	beq.n	8004786 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	d005      	beq.n	800475c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004750:	4b59      	ldr	r3, [pc, #356]	@ (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	4a58      	ldr	r2, [pc, #352]	@ (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004756:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800475a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b00      	cmp	r3, #0
 8004766:	d005      	beq.n	8004774 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004768:	4b53      	ldr	r3, [pc, #332]	@ (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	4a52      	ldr	r2, [pc, #328]	@ (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 800476e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004772:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004774:	4b50      	ldr	r3, [pc, #320]	@ (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	494d      	ldr	r1, [pc, #308]	@ (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004782:	4313      	orrs	r3, r2
 8004784:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d044      	beq.n	800481c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d107      	bne.n	80047aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479a:	4b47      	ldr	r3, [pc, #284]	@ (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d119      	bne.n	80047da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e07f      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d003      	beq.n	80047ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d107      	bne.n	80047ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ba:	4b3f      	ldr	r3, [pc, #252]	@ (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d109      	bne.n	80047da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e06f      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ca:	4b3b      	ldr	r3, [pc, #236]	@ (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e067      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047da:	4b37      	ldr	r3, [pc, #220]	@ (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f023 0203 	bic.w	r2, r3, #3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	4934      	ldr	r1, [pc, #208]	@ (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047ec:	f7fd faf4 	bl	8001dd8 <HAL_GetTick>
 80047f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f2:	e00a      	b.n	800480a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f4:	f7fd faf0 	bl	8001dd8 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004802:	4293      	cmp	r3, r2
 8004804:	d901      	bls.n	800480a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e04f      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480a:	4b2b      	ldr	r3, [pc, #172]	@ (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 020c 	and.w	r2, r3, #12
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	429a      	cmp	r2, r3
 800481a:	d1eb      	bne.n	80047f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800481c:	4b25      	ldr	r3, [pc, #148]	@ (80048b4 <HAL_RCC_ClockConfig+0x1b8>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d20c      	bcs.n	8004844 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482a:	4b22      	ldr	r3, [pc, #136]	@ (80048b4 <HAL_RCC_ClockConfig+0x1b8>)
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004832:	4b20      	ldr	r3, [pc, #128]	@ (80048b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d001      	beq.n	8004844 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e032      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	d008      	beq.n	8004862 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004850:	4b19      	ldr	r3, [pc, #100]	@ (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	4916      	ldr	r1, [pc, #88]	@ (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	4313      	orrs	r3, r2
 8004860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0308 	and.w	r3, r3, #8
 800486a:	2b00      	cmp	r3, #0
 800486c:	d009      	beq.n	8004882 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800486e:	4b12      	ldr	r3, [pc, #72]	@ (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	490e      	ldr	r1, [pc, #56]	@ (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	4313      	orrs	r3, r2
 8004880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004882:	f000 f821 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
 8004886:	4602      	mov	r2, r0
 8004888:	4b0b      	ldr	r3, [pc, #44]	@ (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	091b      	lsrs	r3, r3, #4
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	490a      	ldr	r1, [pc, #40]	@ (80048bc <HAL_RCC_ClockConfig+0x1c0>)
 8004894:	5ccb      	ldrb	r3, [r1, r3]
 8004896:	fa22 f303 	lsr.w	r3, r2, r3
 800489a:	4a09      	ldr	r2, [pc, #36]	@ (80048c0 <HAL_RCC_ClockConfig+0x1c4>)
 800489c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800489e:	4b09      	ldr	r3, [pc, #36]	@ (80048c4 <HAL_RCC_ClockConfig+0x1c8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fd fa54 	bl	8001d50 <HAL_InitTick>

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	40023c00 	.word	0x40023c00
 80048b8:	40023800 	.word	0x40023800
 80048bc:	0801126c 	.word	0x0801126c
 80048c0:	200087fc 	.word	0x200087fc
 80048c4:	20008800 	.word	0x20008800

080048c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048cc:	b094      	sub	sp, #80	@ 0x50
 80048ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048e0:	4b79      	ldr	r3, [pc, #484]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 030c 	and.w	r3, r3, #12
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d00d      	beq.n	8004908 <HAL_RCC_GetSysClockFreq+0x40>
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	f200 80e1 	bhi.w	8004ab4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <HAL_RCC_GetSysClockFreq+0x34>
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d003      	beq.n	8004902 <HAL_RCC_GetSysClockFreq+0x3a>
 80048fa:	e0db      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048fc:	4b73      	ldr	r3, [pc, #460]	@ (8004acc <HAL_RCC_GetSysClockFreq+0x204>)
 80048fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004900:	e0db      	b.n	8004aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004902:	4b73      	ldr	r3, [pc, #460]	@ (8004ad0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004904:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004906:	e0d8      	b.n	8004aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004908:	4b6f      	ldr	r3, [pc, #444]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004910:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004912:	4b6d      	ldr	r3, [pc, #436]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d063      	beq.n	80049e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800491e:	4b6a      	ldr	r3, [pc, #424]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	099b      	lsrs	r3, r3, #6
 8004924:	2200      	movs	r2, #0
 8004926:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004928:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800492a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800492c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004930:	633b      	str	r3, [r7, #48]	@ 0x30
 8004932:	2300      	movs	r3, #0
 8004934:	637b      	str	r3, [r7, #52]	@ 0x34
 8004936:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800493a:	4622      	mov	r2, r4
 800493c:	462b      	mov	r3, r5
 800493e:	f04f 0000 	mov.w	r0, #0
 8004942:	f04f 0100 	mov.w	r1, #0
 8004946:	0159      	lsls	r1, r3, #5
 8004948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800494c:	0150      	lsls	r0, r2, #5
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	4621      	mov	r1, r4
 8004954:	1a51      	subs	r1, r2, r1
 8004956:	6139      	str	r1, [r7, #16]
 8004958:	4629      	mov	r1, r5
 800495a:	eb63 0301 	sbc.w	r3, r3, r1
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	f04f 0200 	mov.w	r2, #0
 8004964:	f04f 0300 	mov.w	r3, #0
 8004968:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800496c:	4659      	mov	r1, fp
 800496e:	018b      	lsls	r3, r1, #6
 8004970:	4651      	mov	r1, sl
 8004972:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004976:	4651      	mov	r1, sl
 8004978:	018a      	lsls	r2, r1, #6
 800497a:	4651      	mov	r1, sl
 800497c:	ebb2 0801 	subs.w	r8, r2, r1
 8004980:	4659      	mov	r1, fp
 8004982:	eb63 0901 	sbc.w	r9, r3, r1
 8004986:	f04f 0200 	mov.w	r2, #0
 800498a:	f04f 0300 	mov.w	r3, #0
 800498e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004992:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004996:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800499a:	4690      	mov	r8, r2
 800499c:	4699      	mov	r9, r3
 800499e:	4623      	mov	r3, r4
 80049a0:	eb18 0303 	adds.w	r3, r8, r3
 80049a4:	60bb      	str	r3, [r7, #8]
 80049a6:	462b      	mov	r3, r5
 80049a8:	eb49 0303 	adc.w	r3, r9, r3
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	f04f 0200 	mov.w	r2, #0
 80049b2:	f04f 0300 	mov.w	r3, #0
 80049b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049ba:	4629      	mov	r1, r5
 80049bc:	024b      	lsls	r3, r1, #9
 80049be:	4621      	mov	r1, r4
 80049c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049c4:	4621      	mov	r1, r4
 80049c6:	024a      	lsls	r2, r1, #9
 80049c8:	4610      	mov	r0, r2
 80049ca:	4619      	mov	r1, r3
 80049cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049ce:	2200      	movs	r2, #0
 80049d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049d8:	f7fb fbf6 	bl	80001c8 <__aeabi_uldivmod>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	4613      	mov	r3, r2
 80049e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049e4:	e058      	b.n	8004a98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049e6:	4b38      	ldr	r3, [pc, #224]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	099b      	lsrs	r3, r3, #6
 80049ec:	2200      	movs	r2, #0
 80049ee:	4618      	mov	r0, r3
 80049f0:	4611      	mov	r1, r2
 80049f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049f6:	623b      	str	r3, [r7, #32]
 80049f8:	2300      	movs	r3, #0
 80049fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80049fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a00:	4642      	mov	r2, r8
 8004a02:	464b      	mov	r3, r9
 8004a04:	f04f 0000 	mov.w	r0, #0
 8004a08:	f04f 0100 	mov.w	r1, #0
 8004a0c:	0159      	lsls	r1, r3, #5
 8004a0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a12:	0150      	lsls	r0, r2, #5
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4641      	mov	r1, r8
 8004a1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a1e:	4649      	mov	r1, r9
 8004a20:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	f04f 0300 	mov.w	r3, #0
 8004a2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a38:	ebb2 040a 	subs.w	r4, r2, sl
 8004a3c:	eb63 050b 	sbc.w	r5, r3, fp
 8004a40:	f04f 0200 	mov.w	r2, #0
 8004a44:	f04f 0300 	mov.w	r3, #0
 8004a48:	00eb      	lsls	r3, r5, #3
 8004a4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a4e:	00e2      	lsls	r2, r4, #3
 8004a50:	4614      	mov	r4, r2
 8004a52:	461d      	mov	r5, r3
 8004a54:	4643      	mov	r3, r8
 8004a56:	18e3      	adds	r3, r4, r3
 8004a58:	603b      	str	r3, [r7, #0]
 8004a5a:	464b      	mov	r3, r9
 8004a5c:	eb45 0303 	adc.w	r3, r5, r3
 8004a60:	607b      	str	r3, [r7, #4]
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a6e:	4629      	mov	r1, r5
 8004a70:	028b      	lsls	r3, r1, #10
 8004a72:	4621      	mov	r1, r4
 8004a74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a78:	4621      	mov	r1, r4
 8004a7a:	028a      	lsls	r2, r1, #10
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	4619      	mov	r1, r3
 8004a80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a82:	2200      	movs	r2, #0
 8004a84:	61bb      	str	r3, [r7, #24]
 8004a86:	61fa      	str	r2, [r7, #28]
 8004a88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a8c:	f7fb fb9c 	bl	80001c8 <__aeabi_uldivmod>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4613      	mov	r3, r2
 8004a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a98:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	0c1b      	lsrs	r3, r3, #16
 8004a9e:	f003 0303 	and.w	r3, r3, #3
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004aa8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004aaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ab2:	e002      	b.n	8004aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ab4:	4b05      	ldr	r3, [pc, #20]	@ (8004acc <HAL_RCC_GetSysClockFreq+0x204>)
 8004ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3750      	adds	r7, #80	@ 0x50
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ac6:	bf00      	nop
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	00f42400 	.word	0x00f42400
 8004ad0:	007a1200 	.word	0x007a1200

08004ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ad8:	4b03      	ldr	r3, [pc, #12]	@ (8004ae8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ada:	681b      	ldr	r3, [r3, #0]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	200087fc 	.word	0x200087fc

08004aec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e041      	b.n	8004b82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d106      	bne.n	8004b18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7fd f87e 	bl	8001c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3304      	adds	r3, #4
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	f000 fb50 	bl	80051d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d001      	beq.n	8004ba4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e046      	b.n	8004c32 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a23      	ldr	r2, [pc, #140]	@ (8004c40 <HAL_TIM_Base_Start+0xb4>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d022      	beq.n	8004bfc <HAL_TIM_Base_Start+0x70>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bbe:	d01d      	beq.n	8004bfc <HAL_TIM_Base_Start+0x70>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a1f      	ldr	r2, [pc, #124]	@ (8004c44 <HAL_TIM_Base_Start+0xb8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d018      	beq.n	8004bfc <HAL_TIM_Base_Start+0x70>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a1e      	ldr	r2, [pc, #120]	@ (8004c48 <HAL_TIM_Base_Start+0xbc>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d013      	beq.n	8004bfc <HAL_TIM_Base_Start+0x70>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a1c      	ldr	r2, [pc, #112]	@ (8004c4c <HAL_TIM_Base_Start+0xc0>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00e      	beq.n	8004bfc <HAL_TIM_Base_Start+0x70>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a1b      	ldr	r2, [pc, #108]	@ (8004c50 <HAL_TIM_Base_Start+0xc4>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d009      	beq.n	8004bfc <HAL_TIM_Base_Start+0x70>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a19      	ldr	r2, [pc, #100]	@ (8004c54 <HAL_TIM_Base_Start+0xc8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d004      	beq.n	8004bfc <HAL_TIM_Base_Start+0x70>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a18      	ldr	r2, [pc, #96]	@ (8004c58 <HAL_TIM_Base_Start+0xcc>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d111      	bne.n	8004c20 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 0307 	and.w	r3, r3, #7
 8004c06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2b06      	cmp	r3, #6
 8004c0c:	d010      	beq.n	8004c30 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f042 0201 	orr.w	r2, r2, #1
 8004c1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c1e:	e007      	b.n	8004c30 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0201 	orr.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	40010000 	.word	0x40010000
 8004c44:	40000400 	.word	0x40000400
 8004c48:	40000800 	.word	0x40000800
 8004c4c:	40000c00 	.word	0x40000c00
 8004c50:	40010400 	.word	0x40010400
 8004c54:	40014000 	.word	0x40014000
 8004c58:	40001800 	.word	0x40001800

08004c5c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6a1a      	ldr	r2, [r3, #32]
 8004c6a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004c6e:	4013      	ands	r3, r2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10f      	bne.n	8004c94 <HAL_TIM_Base_Stop+0x38>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6a1a      	ldr	r2, [r3, #32]
 8004c7a:	f240 4344 	movw	r3, #1092	@ 0x444
 8004c7e:	4013      	ands	r3, r2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d107      	bne.n	8004c94 <HAL_TIM_Base_Stop+0x38>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0201 	bic.w	r2, r2, #1
 8004c92:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
	...

08004cac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d001      	beq.n	8004cc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e04e      	b.n	8004d62 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a23      	ldr	r2, [pc, #140]	@ (8004d70 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d022      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x80>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cee:	d01d      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x80>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a1f      	ldr	r2, [pc, #124]	@ (8004d74 <HAL_TIM_Base_Start_IT+0xc8>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d018      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x80>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8004d78 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d013      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x80>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a1c      	ldr	r2, [pc, #112]	@ (8004d7c <HAL_TIM_Base_Start_IT+0xd0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00e      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x80>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a1b      	ldr	r2, [pc, #108]	@ (8004d80 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d009      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x80>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a19      	ldr	r2, [pc, #100]	@ (8004d84 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d004      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x80>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a18      	ldr	r2, [pc, #96]	@ (8004d88 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d111      	bne.n	8004d50 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b06      	cmp	r3, #6
 8004d3c:	d010      	beq.n	8004d60 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f042 0201 	orr.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4e:	e007      	b.n	8004d60 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40010000 	.word	0x40010000
 8004d74:	40000400 	.word	0x40000400
 8004d78:	40000800 	.word	0x40000800
 8004d7c:	40000c00 	.word	0x40000c00
 8004d80:	40010400 	.word	0x40010400
 8004d84:	40014000 	.word	0x40014000
 8004d88:	40001800 	.word	0x40001800

08004d8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d020      	beq.n	8004df0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d01b      	beq.n	8004df0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f06f 0202 	mvn.w	r2, #2
 8004dc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f9db 	bl	8005192 <HAL_TIM_IC_CaptureCallback>
 8004ddc:	e005      	b.n	8004dea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f9cd 	bl	800517e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f9de 	bl	80051a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f003 0304 	and.w	r3, r3, #4
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d020      	beq.n	8004e3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d01b      	beq.n	8004e3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f06f 0204 	mvn.w	r2, #4
 8004e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2202      	movs	r2, #2
 8004e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f9b5 	bl	8005192 <HAL_TIM_IC_CaptureCallback>
 8004e28:	e005      	b.n	8004e36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f9a7 	bl	800517e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f9b8 	bl	80051a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f003 0308 	and.w	r3, r3, #8
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d020      	beq.n	8004e88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f003 0308 	and.w	r3, r3, #8
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d01b      	beq.n	8004e88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f06f 0208 	mvn.w	r2, #8
 8004e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2204      	movs	r2, #4
 8004e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f98f 	bl	8005192 <HAL_TIM_IC_CaptureCallback>
 8004e74:	e005      	b.n	8004e82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f981 	bl	800517e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f992 	bl	80051a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f003 0310 	and.w	r3, r3, #16
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d020      	beq.n	8004ed4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f003 0310 	and.w	r3, r3, #16
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01b      	beq.n	8004ed4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f06f 0210 	mvn.w	r2, #16
 8004ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2208      	movs	r2, #8
 8004eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f969 	bl	8005192 <HAL_TIM_IC_CaptureCallback>
 8004ec0:	e005      	b.n	8004ece <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f95b 	bl	800517e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f96c 	bl	80051a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00c      	beq.n	8004ef8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d007      	beq.n	8004ef8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f06f 0201 	mvn.w	r2, #1
 8004ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7fc fce2 	bl	80018bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00c      	beq.n	8004f1c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d007      	beq.n	8004f1c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fbb8 	bl	800568c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00c      	beq.n	8004f40 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d007      	beq.n	8004f40 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f93d 	bl	80051ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f003 0320 	and.w	r3, r3, #32
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00c      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f003 0320 	and.w	r3, r3, #32
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d007      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f06f 0220 	mvn.w	r2, #32
 8004f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fb8a 	bl	8005678 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f64:	bf00      	nop
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_TIM_ConfigClockSource+0x1c>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e0b4      	b.n	80050f2 <HAL_TIM_ConfigClockSource+0x186>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004fa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fc0:	d03e      	beq.n	8005040 <HAL_TIM_ConfigClockSource+0xd4>
 8004fc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fc6:	f200 8087 	bhi.w	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fce:	f000 8086 	beq.w	80050de <HAL_TIM_ConfigClockSource+0x172>
 8004fd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fd6:	d87f      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd8:	2b70      	cmp	r3, #112	@ 0x70
 8004fda:	d01a      	beq.n	8005012 <HAL_TIM_ConfigClockSource+0xa6>
 8004fdc:	2b70      	cmp	r3, #112	@ 0x70
 8004fde:	d87b      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe0:	2b60      	cmp	r3, #96	@ 0x60
 8004fe2:	d050      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x11a>
 8004fe4:	2b60      	cmp	r3, #96	@ 0x60
 8004fe6:	d877      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe8:	2b50      	cmp	r3, #80	@ 0x50
 8004fea:	d03c      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0xfa>
 8004fec:	2b50      	cmp	r3, #80	@ 0x50
 8004fee:	d873      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff0:	2b40      	cmp	r3, #64	@ 0x40
 8004ff2:	d058      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0x13a>
 8004ff4:	2b40      	cmp	r3, #64	@ 0x40
 8004ff6:	d86f      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff8:	2b30      	cmp	r3, #48	@ 0x30
 8004ffa:	d064      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x15a>
 8004ffc:	2b30      	cmp	r3, #48	@ 0x30
 8004ffe:	d86b      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005000:	2b20      	cmp	r3, #32
 8005002:	d060      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005004:	2b20      	cmp	r3, #32
 8005006:	d867      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005008:	2b00      	cmp	r3, #0
 800500a:	d05c      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x15a>
 800500c:	2b10      	cmp	r3, #16
 800500e:	d05a      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005010:	e062      	b.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005022:	f000 fa8c 	bl	800553e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005034:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	609a      	str	r2, [r3, #8]
      break;
 800503e:	e04f      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005050:	f000 fa75 	bl	800553e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689a      	ldr	r2, [r3, #8]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005062:	609a      	str	r2, [r3, #8]
      break;
 8005064:	e03c      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005072:	461a      	mov	r2, r3
 8005074:	f000 f9e9 	bl	800544a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2150      	movs	r1, #80	@ 0x50
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fa42 	bl	8005508 <TIM_ITRx_SetConfig>
      break;
 8005084:	e02c      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005092:	461a      	mov	r2, r3
 8005094:	f000 fa08 	bl	80054a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2160      	movs	r1, #96	@ 0x60
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 fa32 	bl	8005508 <TIM_ITRx_SetConfig>
      break;
 80050a4:	e01c      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b2:	461a      	mov	r2, r3
 80050b4:	f000 f9c9 	bl	800544a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2140      	movs	r1, #64	@ 0x40
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fa22 	bl	8005508 <TIM_ITRx_SetConfig>
      break;
 80050c4:	e00c      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4619      	mov	r1, r3
 80050d0:	4610      	mov	r0, r2
 80050d2:	f000 fa19 	bl	8005508 <TIM_ITRx_SetConfig>
      break;
 80050d6:	e003      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	73fb      	strb	r3, [r7, #15]
      break;
 80050dc:	e000      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b082      	sub	sp, #8
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
 8005102:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800510a:	2b01      	cmp	r3, #1
 800510c:	d101      	bne.n	8005112 <HAL_TIM_SlaveConfigSynchro+0x18>
 800510e:	2302      	movs	r3, #2
 8005110:	e031      	b.n	8005176 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2202      	movs	r2, #2
 800511e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005122:	6839      	ldr	r1, [r7, #0]
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f8ff 	bl	8005328 <TIM_SlaveTimer_SetConfig>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d009      	beq.n	8005144 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e018      	b.n	8005176 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68da      	ldr	r2, [r3, #12]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005152:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005162:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b083      	sub	sp, #12
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051ae:	bf00      	nop
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
	...

080051d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a46      	ldr	r2, [pc, #280]	@ (80052fc <TIM_Base_SetConfig+0x12c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d013      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ee:	d00f      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a43      	ldr	r2, [pc, #268]	@ (8005300 <TIM_Base_SetConfig+0x130>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d00b      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a42      	ldr	r2, [pc, #264]	@ (8005304 <TIM_Base_SetConfig+0x134>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d007      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a41      	ldr	r2, [pc, #260]	@ (8005308 <TIM_Base_SetConfig+0x138>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d003      	beq.n	8005210 <TIM_Base_SetConfig+0x40>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a40      	ldr	r2, [pc, #256]	@ (800530c <TIM_Base_SetConfig+0x13c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d108      	bne.n	8005222 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a35      	ldr	r2, [pc, #212]	@ (80052fc <TIM_Base_SetConfig+0x12c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d02b      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005230:	d027      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a32      	ldr	r2, [pc, #200]	@ (8005300 <TIM_Base_SetConfig+0x130>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d023      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a31      	ldr	r2, [pc, #196]	@ (8005304 <TIM_Base_SetConfig+0x134>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d01f      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a30      	ldr	r2, [pc, #192]	@ (8005308 <TIM_Base_SetConfig+0x138>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d01b      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a2f      	ldr	r2, [pc, #188]	@ (800530c <TIM_Base_SetConfig+0x13c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d017      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a2e      	ldr	r2, [pc, #184]	@ (8005310 <TIM_Base_SetConfig+0x140>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d013      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a2d      	ldr	r2, [pc, #180]	@ (8005314 <TIM_Base_SetConfig+0x144>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d00f      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a2c      	ldr	r2, [pc, #176]	@ (8005318 <TIM_Base_SetConfig+0x148>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00b      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a2b      	ldr	r2, [pc, #172]	@ (800531c <TIM_Base_SetConfig+0x14c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d007      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a2a      	ldr	r2, [pc, #168]	@ (8005320 <TIM_Base_SetConfig+0x150>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d003      	beq.n	8005282 <TIM_Base_SetConfig+0xb2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a29      	ldr	r2, [pc, #164]	@ (8005324 <TIM_Base_SetConfig+0x154>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d108      	bne.n	8005294 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4313      	orrs	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a10      	ldr	r2, [pc, #64]	@ (80052fc <TIM_Base_SetConfig+0x12c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d003      	beq.n	80052c8 <TIM_Base_SetConfig+0xf8>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a12      	ldr	r2, [pc, #72]	@ (800530c <TIM_Base_SetConfig+0x13c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d103      	bne.n	80052d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	691a      	ldr	r2, [r3, #16]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d105      	bne.n	80052ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	f023 0201 	bic.w	r2, r3, #1
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	611a      	str	r2, [r3, #16]
  }
}
 80052ee:	bf00      	nop
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	40010000 	.word	0x40010000
 8005300:	40000400 	.word	0x40000400
 8005304:	40000800 	.word	0x40000800
 8005308:	40000c00 	.word	0x40000c00
 800530c:	40010400 	.word	0x40010400
 8005310:	40014000 	.word	0x40014000
 8005314:	40014400 	.word	0x40014400
 8005318:	40014800 	.word	0x40014800
 800531c:	40001800 	.word	0x40001800
 8005320:	40001c00 	.word	0x40001c00
 8005324:	40002000 	.word	0x40002000

08005328 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005344:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	f023 0307 	bic.w	r3, r3, #7
 8005356:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	2b70      	cmp	r3, #112	@ 0x70
 8005370:	d01a      	beq.n	80053a8 <TIM_SlaveTimer_SetConfig+0x80>
 8005372:	2b70      	cmp	r3, #112	@ 0x70
 8005374:	d860      	bhi.n	8005438 <TIM_SlaveTimer_SetConfig+0x110>
 8005376:	2b60      	cmp	r3, #96	@ 0x60
 8005378:	d054      	beq.n	8005424 <TIM_SlaveTimer_SetConfig+0xfc>
 800537a:	2b60      	cmp	r3, #96	@ 0x60
 800537c:	d85c      	bhi.n	8005438 <TIM_SlaveTimer_SetConfig+0x110>
 800537e:	2b50      	cmp	r3, #80	@ 0x50
 8005380:	d046      	beq.n	8005410 <TIM_SlaveTimer_SetConfig+0xe8>
 8005382:	2b50      	cmp	r3, #80	@ 0x50
 8005384:	d858      	bhi.n	8005438 <TIM_SlaveTimer_SetConfig+0x110>
 8005386:	2b40      	cmp	r3, #64	@ 0x40
 8005388:	d019      	beq.n	80053be <TIM_SlaveTimer_SetConfig+0x96>
 800538a:	2b40      	cmp	r3, #64	@ 0x40
 800538c:	d854      	bhi.n	8005438 <TIM_SlaveTimer_SetConfig+0x110>
 800538e:	2b30      	cmp	r3, #48	@ 0x30
 8005390:	d055      	beq.n	800543e <TIM_SlaveTimer_SetConfig+0x116>
 8005392:	2b30      	cmp	r3, #48	@ 0x30
 8005394:	d850      	bhi.n	8005438 <TIM_SlaveTimer_SetConfig+0x110>
 8005396:	2b20      	cmp	r3, #32
 8005398:	d051      	beq.n	800543e <TIM_SlaveTimer_SetConfig+0x116>
 800539a:	2b20      	cmp	r3, #32
 800539c:	d84c      	bhi.n	8005438 <TIM_SlaveTimer_SetConfig+0x110>
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d04d      	beq.n	800543e <TIM_SlaveTimer_SetConfig+0x116>
 80053a2:	2b10      	cmp	r3, #16
 80053a4:	d04b      	beq.n	800543e <TIM_SlaveTimer_SetConfig+0x116>
 80053a6:	e047      	b.n	8005438 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80053b8:	f000 f8c1 	bl	800553e <TIM_ETR_SetConfig>
      break;
 80053bc:	e040      	b.n	8005440 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b05      	cmp	r3, #5
 80053c4:	d101      	bne.n	80053ca <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e03b      	b.n	8005442 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6a1a      	ldr	r2, [r3, #32]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 0201 	bic.w	r2, r2, #1
 80053e0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053f0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	621a      	str	r2, [r3, #32]
      break;
 800540e:	e017      	b.n	8005440 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800541c:	461a      	mov	r2, r3
 800541e:	f000 f814 	bl	800544a <TIM_TI1_ConfigInputStage>
      break;
 8005422:	e00d      	b.n	8005440 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005430:	461a      	mov	r2, r3
 8005432:	f000 f839 	bl	80054a8 <TIM_TI2_ConfigInputStage>
      break;
 8005436:	e003      	b.n	8005440 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	75fb      	strb	r3, [r7, #23]
      break;
 800543c:	e000      	b.n	8005440 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800543e:	bf00      	nop
  }

  return status;
 8005440:	7dfb      	ldrb	r3, [r7, #23]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3718      	adds	r7, #24
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800544a:	b480      	push	{r7}
 800544c:	b087      	sub	sp, #28
 800544e:	af00      	add	r7, sp, #0
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	60b9      	str	r1, [r7, #8]
 8005454:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	f023 0201 	bic.w	r2, r3, #1
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005474:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	4313      	orrs	r3, r2
 800547e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f023 030a 	bic.w	r3, r3, #10
 8005486:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	4313      	orrs	r3, r2
 800548e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	621a      	str	r2, [r3, #32]
}
 800549c:	bf00      	nop
 800549e:	371c      	adds	r7, #28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	f023 0210 	bic.w	r2, r3, #16
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	031b      	lsls	r3, r3, #12
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	4313      	orrs	r3, r2
 80054dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80054e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	011b      	lsls	r3, r3, #4
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	621a      	str	r2, [r3, #32]
}
 80054fc:	bf00      	nop
 80054fe:	371c      	adds	r7, #28
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800551e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	4313      	orrs	r3, r2
 8005526:	f043 0307 	orr.w	r3, r3, #7
 800552a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	609a      	str	r2, [r3, #8]
}
 8005532:	bf00      	nop
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800553e:	b480      	push	{r7}
 8005540:	b087      	sub	sp, #28
 8005542:	af00      	add	r7, sp, #0
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	60b9      	str	r1, [r7, #8]
 8005548:	607a      	str	r2, [r7, #4]
 800554a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005558:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	021a      	lsls	r2, r3, #8
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	431a      	orrs	r2, r3
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	4313      	orrs	r3, r2
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	4313      	orrs	r3, r2
 800556a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	609a      	str	r2, [r3, #8]
}
 8005572:	bf00      	nop
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
	...

08005580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005590:	2b01      	cmp	r3, #1
 8005592:	d101      	bne.n	8005598 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005594:	2302      	movs	r3, #2
 8005596:	e05a      	b.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a21      	ldr	r2, [pc, #132]	@ (800565c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d022      	beq.n	8005622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055e4:	d01d      	beq.n	8005622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005660 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d018      	beq.n	8005622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005664 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d013      	beq.n	8005622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a1a      	ldr	r2, [pc, #104]	@ (8005668 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d00e      	beq.n	8005622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a18      	ldr	r2, [pc, #96]	@ (800566c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d009      	beq.n	8005622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a17      	ldr	r2, [pc, #92]	@ (8005670 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d004      	beq.n	8005622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a15      	ldr	r2, [pc, #84]	@ (8005674 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d10c      	bne.n	800563c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005628:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	4313      	orrs	r3, r2
 8005632:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	40010000 	.word	0x40010000
 8005660:	40000400 	.word	0x40000400
 8005664:	40000800 	.word	0x40000800
 8005668:	40000c00 	.word	0x40000c00
 800566c:	40010400 	.word	0x40010400
 8005670:	40014000 	.word	0x40014000
 8005674:	40001800 	.word	0x40001800

08005678 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056a0:	b084      	sub	sp, #16
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b084      	sub	sp, #16
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	f107 001c 	add.w	r0, r7, #28
 80056ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056b2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d123      	bne.n	8005702 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80056ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d105      	bne.n	80056f6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f001 fae8 	bl	8006ccc <USB_CoreReset>
 80056fc:	4603      	mov	r3, r0
 80056fe:	73fb      	strb	r3, [r7, #15]
 8005700:	e01b      	b.n	800573a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f001 fadc 	bl	8006ccc <USB_CoreReset>
 8005714:	4603      	mov	r3, r0
 8005716:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005718:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800571c:	2b00      	cmp	r3, #0
 800571e:	d106      	bne.n	800572e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005724:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	639a      	str	r2, [r3, #56]	@ 0x38
 800572c:	e005      	b.n	800573a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005732:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800573a:	7fbb      	ldrb	r3, [r7, #30]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d10b      	bne.n	8005758 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f043 0206 	orr.w	r2, r3, #6
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f043 0220 	orr.w	r2, r3, #32
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005758:	7bfb      	ldrb	r3, [r7, #15]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005764:	b004      	add	sp, #16
 8005766:	4770      	bx	lr

08005768 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	4613      	mov	r3, r2
 8005774:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005776:	79fb      	ldrb	r3, [r7, #7]
 8005778:	2b02      	cmp	r3, #2
 800577a:	d165      	bne.n	8005848 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	4a41      	ldr	r2, [pc, #260]	@ (8005884 <USB_SetTurnaroundTime+0x11c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d906      	bls.n	8005792 <USB_SetTurnaroundTime+0x2a>
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	4a40      	ldr	r2, [pc, #256]	@ (8005888 <USB_SetTurnaroundTime+0x120>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d202      	bcs.n	8005792 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800578c:	230f      	movs	r3, #15
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	e062      	b.n	8005858 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	4a3c      	ldr	r2, [pc, #240]	@ (8005888 <USB_SetTurnaroundTime+0x120>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d306      	bcc.n	80057a8 <USB_SetTurnaroundTime+0x40>
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	4a3b      	ldr	r2, [pc, #236]	@ (800588c <USB_SetTurnaroundTime+0x124>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d202      	bcs.n	80057a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80057a2:	230e      	movs	r3, #14
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	e057      	b.n	8005858 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	4a38      	ldr	r2, [pc, #224]	@ (800588c <USB_SetTurnaroundTime+0x124>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d306      	bcc.n	80057be <USB_SetTurnaroundTime+0x56>
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4a37      	ldr	r2, [pc, #220]	@ (8005890 <USB_SetTurnaroundTime+0x128>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d202      	bcs.n	80057be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80057b8:	230d      	movs	r3, #13
 80057ba:	617b      	str	r3, [r7, #20]
 80057bc:	e04c      	b.n	8005858 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	4a33      	ldr	r2, [pc, #204]	@ (8005890 <USB_SetTurnaroundTime+0x128>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d306      	bcc.n	80057d4 <USB_SetTurnaroundTime+0x6c>
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	4a32      	ldr	r2, [pc, #200]	@ (8005894 <USB_SetTurnaroundTime+0x12c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d802      	bhi.n	80057d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80057ce:	230c      	movs	r3, #12
 80057d0:	617b      	str	r3, [r7, #20]
 80057d2:	e041      	b.n	8005858 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	4a2f      	ldr	r2, [pc, #188]	@ (8005894 <USB_SetTurnaroundTime+0x12c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d906      	bls.n	80057ea <USB_SetTurnaroundTime+0x82>
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	4a2e      	ldr	r2, [pc, #184]	@ (8005898 <USB_SetTurnaroundTime+0x130>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d802      	bhi.n	80057ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80057e4:	230b      	movs	r3, #11
 80057e6:	617b      	str	r3, [r7, #20]
 80057e8:	e036      	b.n	8005858 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	4a2a      	ldr	r2, [pc, #168]	@ (8005898 <USB_SetTurnaroundTime+0x130>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d906      	bls.n	8005800 <USB_SetTurnaroundTime+0x98>
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	4a29      	ldr	r2, [pc, #164]	@ (800589c <USB_SetTurnaroundTime+0x134>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d802      	bhi.n	8005800 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80057fa:	230a      	movs	r3, #10
 80057fc:	617b      	str	r3, [r7, #20]
 80057fe:	e02b      	b.n	8005858 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	4a26      	ldr	r2, [pc, #152]	@ (800589c <USB_SetTurnaroundTime+0x134>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d906      	bls.n	8005816 <USB_SetTurnaroundTime+0xae>
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	4a25      	ldr	r2, [pc, #148]	@ (80058a0 <USB_SetTurnaroundTime+0x138>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d202      	bcs.n	8005816 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005810:	2309      	movs	r3, #9
 8005812:	617b      	str	r3, [r7, #20]
 8005814:	e020      	b.n	8005858 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	4a21      	ldr	r2, [pc, #132]	@ (80058a0 <USB_SetTurnaroundTime+0x138>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d306      	bcc.n	800582c <USB_SetTurnaroundTime+0xc4>
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	4a20      	ldr	r2, [pc, #128]	@ (80058a4 <USB_SetTurnaroundTime+0x13c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d802      	bhi.n	800582c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005826:	2308      	movs	r3, #8
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	e015      	b.n	8005858 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	4a1d      	ldr	r2, [pc, #116]	@ (80058a4 <USB_SetTurnaroundTime+0x13c>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d906      	bls.n	8005842 <USB_SetTurnaroundTime+0xda>
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	4a1c      	ldr	r2, [pc, #112]	@ (80058a8 <USB_SetTurnaroundTime+0x140>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d202      	bcs.n	8005842 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800583c:	2307      	movs	r3, #7
 800583e:	617b      	str	r3, [r7, #20]
 8005840:	e00a      	b.n	8005858 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005842:	2306      	movs	r3, #6
 8005844:	617b      	str	r3, [r7, #20]
 8005846:	e007      	b.n	8005858 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005848:	79fb      	ldrb	r3, [r7, #7]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d102      	bne.n	8005854 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800584e:	2309      	movs	r3, #9
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	e001      	b.n	8005858 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005854:	2309      	movs	r3, #9
 8005856:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	68da      	ldr	r2, [r3, #12]
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	029b      	lsls	r3, r3, #10
 800586c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005870:	431a      	orrs	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	371c      	adds	r7, #28
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	00d8acbf 	.word	0x00d8acbf
 8005888:	00e4e1c0 	.word	0x00e4e1c0
 800588c:	00f42400 	.word	0x00f42400
 8005890:	01067380 	.word	0x01067380
 8005894:	011a499f 	.word	0x011a499f
 8005898:	01312cff 	.word	0x01312cff
 800589c:	014ca43f 	.word	0x014ca43f
 80058a0:	016e3600 	.word	0x016e3600
 80058a4:	01a6ab1f 	.word	0x01a6ab1f
 80058a8:	01e84800 	.word	0x01e84800

080058ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f043 0201 	orr.w	r2, r3, #1
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f023 0201 	bic.w	r2, r3, #1
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	460b      	mov	r3, r1
 80058fa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800590c:	78fb      	ldrb	r3, [r7, #3]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d115      	bne.n	800593e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800591e:	200a      	movs	r0, #10
 8005920:	f7fc fa66 	bl	8001df0 <HAL_Delay>
      ms += 10U;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	330a      	adds	r3, #10
 8005928:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f001 f93f 	bl	8006bae <USB_GetMode>
 8005930:	4603      	mov	r3, r0
 8005932:	2b01      	cmp	r3, #1
 8005934:	d01e      	beq.n	8005974 <USB_SetCurrentMode+0x84>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2bc7      	cmp	r3, #199	@ 0xc7
 800593a:	d9f0      	bls.n	800591e <USB_SetCurrentMode+0x2e>
 800593c:	e01a      	b.n	8005974 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800593e:	78fb      	ldrb	r3, [r7, #3]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d115      	bne.n	8005970 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005950:	200a      	movs	r0, #10
 8005952:	f7fc fa4d 	bl	8001df0 <HAL_Delay>
      ms += 10U;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	330a      	adds	r3, #10
 800595a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f001 f926 	bl	8006bae <USB_GetMode>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d005      	beq.n	8005974 <USB_SetCurrentMode+0x84>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2bc7      	cmp	r3, #199	@ 0xc7
 800596c:	d9f0      	bls.n	8005950 <USB_SetCurrentMode+0x60>
 800596e:	e001      	b.n	8005974 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e005      	b.n	8005980 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2bc8      	cmp	r3, #200	@ 0xc8
 8005978:	d101      	bne.n	800597e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e000      	b.n	8005980 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005988:	b084      	sub	sp, #16
 800598a:	b580      	push	{r7, lr}
 800598c:	b086      	sub	sp, #24
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
 8005992:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005996:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80059a2:	2300      	movs	r3, #0
 80059a4:	613b      	str	r3, [r7, #16]
 80059a6:	e009      	b.n	80059bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	3340      	adds	r3, #64	@ 0x40
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	2200      	movs	r2, #0
 80059b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	3301      	adds	r3, #1
 80059ba:	613b      	str	r3, [r7, #16]
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	2b0e      	cmp	r3, #14
 80059c0:	d9f2      	bls.n	80059a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80059c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d11c      	bne.n	8005a04 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059d8:	f043 0302 	orr.w	r3, r3, #2
 80059dc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ee:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a02:	e00b      	b.n	8005a1c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a08:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a14:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a22:	461a      	mov	r2, r3
 8005a24:	2300      	movs	r3, #0
 8005a26:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a28:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d10d      	bne.n	8005a4c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d104      	bne.n	8005a42 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a38:	2100      	movs	r1, #0
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f968 	bl	8005d10 <USB_SetDevSpeed>
 8005a40:	e008      	b.n	8005a54 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a42:	2101      	movs	r1, #1
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f963 	bl	8005d10 <USB_SetDevSpeed>
 8005a4a:	e003      	b.n	8005a54 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a4c:	2103      	movs	r1, #3
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f95e 	bl	8005d10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a54:	2110      	movs	r1, #16
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f8fa 	bl	8005c50 <USB_FlushTxFifo>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f924 	bl	8005cb4 <USB_FlushRxFifo>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	2300      	movs	r3, #0
 8005a80:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a88:	461a      	mov	r2, r3
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a94:	461a      	mov	r2, r3
 8005a96:	2300      	movs	r3, #0
 8005a98:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	613b      	str	r3, [r7, #16]
 8005a9e:	e043      	b.n	8005b28 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ab2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ab6:	d118      	bne.n	8005aea <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10a      	bne.n	8005ad4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aca:	461a      	mov	r2, r3
 8005acc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	e013      	b.n	8005afc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005ae6:	6013      	str	r3, [r2, #0]
 8005ae8:	e008      	b.n	8005afc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005af6:	461a      	mov	r2, r3
 8005af8:	2300      	movs	r3, #0
 8005afa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b08:	461a      	mov	r2, r3
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	3301      	adds	r3, #1
 8005b26:	613b      	str	r3, [r7, #16]
 8005b28:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d3b5      	bcc.n	8005aa0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b34:	2300      	movs	r3, #0
 8005b36:	613b      	str	r3, [r7, #16]
 8005b38:	e043      	b.n	8005bc2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b50:	d118      	bne.n	8005b84 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10a      	bne.n	8005b6e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b64:	461a      	mov	r2, r3
 8005b66:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005b6a:	6013      	str	r3, [r2, #0]
 8005b6c:	e013      	b.n	8005b96 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005b80:	6013      	str	r3, [r2, #0]
 8005b82:	e008      	b.n	8005b96 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b90:	461a      	mov	r2, r3
 8005b92:	2300      	movs	r3, #0
 8005b94:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005bba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	613b      	str	r3, [r7, #16]
 8005bc2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d3b5      	bcc.n	8005b3a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005bdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005be0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005bee:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005bf0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d105      	bne.n	8005c04 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	f043 0210 	orr.w	r2, r3, #16
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	699a      	ldr	r2, [r3, #24]
 8005c08:	4b10      	ldr	r3, [pc, #64]	@ (8005c4c <USB_DevInit+0x2c4>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c10:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d005      	beq.n	8005c24 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	f043 0208 	orr.w	r2, r3, #8
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c24:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d107      	bne.n	8005c3c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c34:	f043 0304 	orr.w	r3, r3, #4
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c48:	b004      	add	sp, #16
 8005c4a:	4770      	bx	lr
 8005c4c:	803c3800 	.word	0x803c3800

08005c50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	3301      	adds	r3, #1
 8005c62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c6a:	d901      	bls.n	8005c70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e01b      	b.n	8005ca8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	daf2      	bge.n	8005c5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	019b      	lsls	r3, r3, #6
 8005c80:	f043 0220 	orr.w	r2, r3, #32
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c94:	d901      	bls.n	8005c9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e006      	b.n	8005ca8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	f003 0320 	and.w	r3, r3, #32
 8005ca2:	2b20      	cmp	r3, #32
 8005ca4:	d0f0      	beq.n	8005c88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ccc:	d901      	bls.n	8005cd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e018      	b.n	8005d04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	daf2      	bge.n	8005cc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2210      	movs	r2, #16
 8005ce2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cf0:	d901      	bls.n	8005cf6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e006      	b.n	8005d04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	f003 0310 	and.w	r3, r3, #16
 8005cfe:	2b10      	cmp	r3, #16
 8005d00:	d0f0      	beq.n	8005ce4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	78fb      	ldrb	r3, [r7, #3]
 8005d2a:	68f9      	ldr	r1, [r7, #12]
 8005d2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d30:	4313      	orrs	r3, r2
 8005d32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b087      	sub	sp, #28
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f003 0306 	and.w	r3, r3, #6
 8005d5a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d102      	bne.n	8005d68 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005d62:	2300      	movs	r3, #0
 8005d64:	75fb      	strb	r3, [r7, #23]
 8005d66:	e00a      	b.n	8005d7e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d002      	beq.n	8005d74 <USB_GetDevSpeed+0x32>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2b06      	cmp	r3, #6
 8005d72:	d102      	bne.n	8005d7a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005d74:	2302      	movs	r3, #2
 8005d76:	75fb      	strb	r3, [r7, #23]
 8005d78:	e001      	b.n	8005d7e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005d7a:	230f      	movs	r3, #15
 8005d7c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	371c      	adds	r7, #28
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	785b      	ldrb	r3, [r3, #1]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d13a      	bne.n	8005e1e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dae:	69da      	ldr	r2, [r3, #28]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	f003 030f 	and.w	r3, r3, #15
 8005db8:	2101      	movs	r1, #1
 8005dba:	fa01 f303 	lsl.w	r3, r1, r3
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	68f9      	ldr	r1, [r7, #12]
 8005dc2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d155      	bne.n	8005e8c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	791b      	ldrb	r3, [r3, #4]
 8005dfa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005dfc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	059b      	lsls	r3, r3, #22
 8005e02:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e04:	4313      	orrs	r3, r2
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	0151      	lsls	r1, r2, #5
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	440a      	add	r2, r1
 8005e0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	e036      	b.n	8005e8c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e24:	69da      	ldr	r2, [r3, #28]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	f003 030f 	and.w	r3, r3, #15
 8005e2e:	2101      	movs	r1, #1
 8005e30:	fa01 f303 	lsl.w	r3, r1, r3
 8005e34:	041b      	lsls	r3, r3, #16
 8005e36:	68f9      	ldr	r1, [r7, #12]
 8005e38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d11a      	bne.n	8005e8c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	791b      	ldrb	r3, [r3, #4]
 8005e70:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e72:	430b      	orrs	r3, r1
 8005e74:	4313      	orrs	r3, r2
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	0151      	lsls	r1, r2, #5
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	440a      	add	r2, r1
 8005e7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e8a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
	...

08005e9c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	785b      	ldrb	r3, [r3, #1]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d161      	bne.n	8005f7c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005eca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ece:	d11f      	bne.n	8005f10 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	0151      	lsls	r1, r2, #5
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	440a      	add	r2, r1
 8005ee6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005eea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005eee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	0151      	lsls	r1, r2, #5
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	440a      	add	r2, r1
 8005f06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	f003 030f 	and.w	r3, r3, #15
 8005f20:	2101      	movs	r1, #1
 8005f22:	fa01 f303 	lsl.w	r3, r1, r3
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	43db      	mvns	r3, r3
 8005f2a:	68f9      	ldr	r1, [r7, #12]
 8005f2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f30:	4013      	ands	r3, r2
 8005f32:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f3a:	69da      	ldr	r2, [r3, #28]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	f003 030f 	and.w	r3, r3, #15
 8005f44:	2101      	movs	r1, #1
 8005f46:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	43db      	mvns	r3, r3
 8005f4e:	68f9      	ldr	r1, [r7, #12]
 8005f50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f54:	4013      	ands	r3, r2
 8005f56:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	0159      	lsls	r1, r3, #5
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	440b      	add	r3, r1
 8005f6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f72:	4619      	mov	r1, r3
 8005f74:	4b35      	ldr	r3, [pc, #212]	@ (800604c <USB_DeactivateEndpoint+0x1b0>)
 8005f76:	4013      	ands	r3, r2
 8005f78:	600b      	str	r3, [r1, #0]
 8005f7a:	e060      	b.n	800603e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f92:	d11f      	bne.n	8005fd4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	0151      	lsls	r1, r2, #5
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	440a      	add	r2, r1
 8005faa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005fb2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	0151      	lsls	r1, r2, #5
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	440a      	add	r2, r1
 8005fca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fd2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	f003 030f 	and.w	r3, r3, #15
 8005fe4:	2101      	movs	r1, #1
 8005fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8005fea:	041b      	lsls	r3, r3, #16
 8005fec:	43db      	mvns	r3, r3
 8005fee:	68f9      	ldr	r1, [r7, #12]
 8005ff0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ffe:	69da      	ldr	r2, [r3, #28]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	f003 030f 	and.w	r3, r3, #15
 8006008:	2101      	movs	r1, #1
 800600a:	fa01 f303 	lsl.w	r3, r1, r3
 800600e:	041b      	lsls	r3, r3, #16
 8006010:	43db      	mvns	r3, r3
 8006012:	68f9      	ldr	r1, [r7, #12]
 8006014:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006018:	4013      	ands	r3, r2
 800601a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	0159      	lsls	r1, r3, #5
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	440b      	add	r3, r1
 8006032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006036:	4619      	mov	r1, r3
 8006038:	4b05      	ldr	r3, [pc, #20]	@ (8006050 <USB_DeactivateEndpoint+0x1b4>)
 800603a:	4013      	ands	r3, r2
 800603c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3714      	adds	r7, #20
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	ec337800 	.word	0xec337800
 8006050:	eff37800 	.word	0xeff37800

08006054 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08a      	sub	sp, #40	@ 0x28
 8006058:	af02      	add	r7, sp, #8
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	4613      	mov	r3, r2
 8006060:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	785b      	ldrb	r3, [r3, #1]
 8006070:	2b01      	cmp	r3, #1
 8006072:	f040 817f 	bne.w	8006374 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d132      	bne.n	80060e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	4413      	add	r3, r2
 8006086:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	0151      	lsls	r1, r2, #5
 8006090:	69fa      	ldr	r2, [r7, #28]
 8006092:	440a      	add	r2, r1
 8006094:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006098:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800609c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80060a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	69ba      	ldr	r2, [r7, #24]
 80060b2:	0151      	lsls	r1, r2, #5
 80060b4:	69fa      	ldr	r2, [r7, #28]
 80060b6:	440a      	add	r2, r1
 80060b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80060c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	0151      	lsls	r1, r2, #5
 80060d4:	69fa      	ldr	r2, [r7, #28]
 80060d6:	440a      	add	r2, r1
 80060d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060dc:	0cdb      	lsrs	r3, r3, #19
 80060de:	04db      	lsls	r3, r3, #19
 80060e0:	6113      	str	r3, [r2, #16]
 80060e2:	e097      	b.n	8006214 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	0151      	lsls	r1, r2, #5
 80060f6:	69fa      	ldr	r2, [r7, #28]
 80060f8:	440a      	add	r2, r1
 80060fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060fe:	0cdb      	lsrs	r3, r3, #19
 8006100:	04db      	lsls	r3, r3, #19
 8006102:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	0151      	lsls	r1, r2, #5
 8006116:	69fa      	ldr	r2, [r7, #28]
 8006118:	440a      	add	r2, r1
 800611a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800611e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006122:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006126:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d11a      	bne.n	8006164 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	691a      	ldr	r2, [r3, #16]
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	429a      	cmp	r2, r3
 8006138:	d903      	bls.n	8006142 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	4413      	add	r3, r2
 800614a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	0151      	lsls	r1, r2, #5
 8006154:	69fa      	ldr	r2, [r7, #28]
 8006156:	440a      	add	r2, r1
 8006158:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800615c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006160:	6113      	str	r3, [r2, #16]
 8006162:	e044      	b.n	80061ee <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	691a      	ldr	r2, [r3, #16]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	4413      	add	r3, r2
 800616e:	1e5a      	subs	r2, r3, #1
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	fbb2 f3f3 	udiv	r3, r2, r3
 8006178:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	4413      	add	r3, r2
 8006182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006186:	691a      	ldr	r2, [r3, #16]
 8006188:	8afb      	ldrh	r3, [r7, #22]
 800618a:	04d9      	lsls	r1, r3, #19
 800618c:	4ba4      	ldr	r3, [pc, #656]	@ (8006420 <USB_EPStartXfer+0x3cc>)
 800618e:	400b      	ands	r3, r1
 8006190:	69b9      	ldr	r1, [r7, #24]
 8006192:	0148      	lsls	r0, r1, #5
 8006194:	69f9      	ldr	r1, [r7, #28]
 8006196:	4401      	add	r1, r0
 8006198:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800619c:	4313      	orrs	r3, r2
 800619e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	791b      	ldrb	r3, [r3, #4]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d122      	bne.n	80061ee <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	0151      	lsls	r1, r2, #5
 80061ba:	69fa      	ldr	r2, [r7, #28]
 80061bc:	440a      	add	r2, r1
 80061be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061c2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80061c6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061d4:	691a      	ldr	r2, [r3, #16]
 80061d6:	8afb      	ldrh	r3, [r7, #22]
 80061d8:	075b      	lsls	r3, r3, #29
 80061da:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80061de:	69b9      	ldr	r1, [r7, #24]
 80061e0:	0148      	lsls	r0, r1, #5
 80061e2:	69f9      	ldr	r1, [r7, #28]
 80061e4:	4401      	add	r1, r0
 80061e6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80061ea:	4313      	orrs	r3, r2
 80061ec:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006204:	69b9      	ldr	r1, [r7, #24]
 8006206:	0148      	lsls	r0, r1, #5
 8006208:	69f9      	ldr	r1, [r7, #28]
 800620a:	4401      	add	r1, r0
 800620c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006210:	4313      	orrs	r3, r2
 8006212:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006214:	79fb      	ldrb	r3, [r7, #7]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d14b      	bne.n	80062b2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d009      	beq.n	8006236 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800622e:	461a      	mov	r2, r3
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	791b      	ldrb	r3, [r3, #4]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d128      	bne.n	8006290 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800624a:	2b00      	cmp	r3, #0
 800624c:	d110      	bne.n	8006270 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	4413      	add	r3, r2
 8006256:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	69ba      	ldr	r2, [r7, #24]
 800625e:	0151      	lsls	r1, r2, #5
 8006260:	69fa      	ldr	r2, [r7, #28]
 8006262:	440a      	add	r2, r1
 8006264:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006268:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	e00f      	b.n	8006290 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	69ba      	ldr	r2, [r7, #24]
 8006280:	0151      	lsls	r1, r2, #5
 8006282:	69fa      	ldr	r2, [r7, #28]
 8006284:	440a      	add	r2, r1
 8006286:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800628a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800628e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	0151      	lsls	r1, r2, #5
 80062a2:	69fa      	ldr	r2, [r7, #28]
 80062a4:	440a      	add	r2, r1
 80062a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062aa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80062ae:	6013      	str	r3, [r2, #0]
 80062b0:	e166      	b.n	8006580 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	0151      	lsls	r1, r2, #5
 80062c4:	69fa      	ldr	r2, [r7, #28]
 80062c6:	440a      	add	r2, r1
 80062c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062cc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80062d0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	791b      	ldrb	r3, [r3, #4]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d015      	beq.n	8006306 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 814e 	beq.w	8006580 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	f003 030f 	and.w	r3, r3, #15
 80062f4:	2101      	movs	r1, #1
 80062f6:	fa01 f303 	lsl.w	r3, r1, r3
 80062fa:	69f9      	ldr	r1, [r7, #28]
 80062fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006300:	4313      	orrs	r3, r2
 8006302:	634b      	str	r3, [r1, #52]	@ 0x34
 8006304:	e13c      	b.n	8006580 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006312:	2b00      	cmp	r3, #0
 8006314:	d110      	bne.n	8006338 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	0151      	lsls	r1, r2, #5
 8006328:	69fa      	ldr	r2, [r7, #28]
 800632a:	440a      	add	r2, r1
 800632c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006330:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	e00f      	b.n	8006358 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	0151      	lsls	r1, r2, #5
 800634a:	69fa      	ldr	r2, [r7, #28]
 800634c:	440a      	add	r2, r1
 800634e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006352:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006356:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	68d9      	ldr	r1, [r3, #12]
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	781a      	ldrb	r2, [r3, #0]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	b298      	uxth	r0, r3
 8006366:	79fb      	ldrb	r3, [r7, #7]
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	4603      	mov	r3, r0
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 f9b9 	bl	80066e4 <USB_WritePacket>
 8006372:	e105      	b.n	8006580 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	0151      	lsls	r1, r2, #5
 8006386:	69fa      	ldr	r2, [r7, #28]
 8006388:	440a      	add	r2, r1
 800638a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800638e:	0cdb      	lsrs	r3, r3, #19
 8006390:	04db      	lsls	r3, r3, #19
 8006392:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	0151      	lsls	r1, r2, #5
 80063a6:	69fa      	ldr	r2, [r7, #28]
 80063a8:	440a      	add	r2, r1
 80063aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063ae:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80063b2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80063b6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d132      	bne.n	8006424 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	689a      	ldr	r2, [r3, #8]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	689a      	ldr	r2, [r3, #8]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063e2:	691a      	ldr	r2, [r3, #16]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	6a1b      	ldr	r3, [r3, #32]
 80063e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ec:	69b9      	ldr	r1, [r7, #24]
 80063ee:	0148      	lsls	r0, r1, #5
 80063f0:	69f9      	ldr	r1, [r7, #28]
 80063f2:	4401      	add	r1, r0
 80063f4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80063f8:	4313      	orrs	r3, r2
 80063fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	015a      	lsls	r2, r3, #5
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	4413      	add	r3, r2
 8006404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	0151      	lsls	r1, r2, #5
 800640e:	69fa      	ldr	r2, [r7, #28]
 8006410:	440a      	add	r2, r1
 8006412:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006416:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800641a:	6113      	str	r3, [r2, #16]
 800641c:	e062      	b.n	80064e4 <USB_EPStartXfer+0x490>
 800641e:	bf00      	nop
 8006420:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d123      	bne.n	8006474 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	4413      	add	r3, r2
 8006434:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006438:	691a      	ldr	r2, [r3, #16]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006442:	69b9      	ldr	r1, [r7, #24]
 8006444:	0148      	lsls	r0, r1, #5
 8006446:	69f9      	ldr	r1, [r7, #28]
 8006448:	4401      	add	r1, r0
 800644a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800644e:	4313      	orrs	r3, r2
 8006450:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	4413      	add	r3, r2
 800645a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	69ba      	ldr	r2, [r7, #24]
 8006462:	0151      	lsls	r1, r2, #5
 8006464:	69fa      	ldr	r2, [r7, #28]
 8006466:	440a      	add	r2, r1
 8006468:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800646c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006470:	6113      	str	r3, [r2, #16]
 8006472:	e037      	b.n	80064e4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	691a      	ldr	r2, [r3, #16]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	4413      	add	r3, r2
 800647e:	1e5a      	subs	r2, r3, #1
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	fbb2 f3f3 	udiv	r3, r2, r3
 8006488:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	8afa      	ldrh	r2, [r7, #22]
 8006490:	fb03 f202 	mul.w	r2, r3, r2
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064a4:	691a      	ldr	r2, [r3, #16]
 80064a6:	8afb      	ldrh	r3, [r7, #22]
 80064a8:	04d9      	lsls	r1, r3, #19
 80064aa:	4b38      	ldr	r3, [pc, #224]	@ (800658c <USB_EPStartXfer+0x538>)
 80064ac:	400b      	ands	r3, r1
 80064ae:	69b9      	ldr	r1, [r7, #24]
 80064b0:	0148      	lsls	r0, r1, #5
 80064b2:	69f9      	ldr	r1, [r7, #28]
 80064b4:	4401      	add	r1, r0
 80064b6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80064ba:	4313      	orrs	r3, r2
 80064bc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ca:	691a      	ldr	r2, [r3, #16]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	6a1b      	ldr	r3, [r3, #32]
 80064d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064d4:	69b9      	ldr	r1, [r7, #24]
 80064d6:	0148      	lsls	r0, r1, #5
 80064d8:	69f9      	ldr	r1, [r7, #28]
 80064da:	4401      	add	r1, r0
 80064dc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80064e0:	4313      	orrs	r3, r2
 80064e2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80064e4:	79fb      	ldrb	r3, [r7, #7]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d10d      	bne.n	8006506 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d009      	beq.n	8006506 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	68d9      	ldr	r1, [r3, #12]
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006502:	460a      	mov	r2, r1
 8006504:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	791b      	ldrb	r3, [r3, #4]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d128      	bne.n	8006560 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800651a:	2b00      	cmp	r3, #0
 800651c:	d110      	bne.n	8006540 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	4413      	add	r3, r2
 8006526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	0151      	lsls	r1, r2, #5
 8006530:	69fa      	ldr	r2, [r7, #28]
 8006532:	440a      	add	r2, r1
 8006534:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006538:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800653c:	6013      	str	r3, [r2, #0]
 800653e:	e00f      	b.n	8006560 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	4413      	add	r3, r2
 8006548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	0151      	lsls	r1, r2, #5
 8006552:	69fa      	ldr	r2, [r7, #28]
 8006554:	440a      	add	r2, r1
 8006556:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800655a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800655e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69ba      	ldr	r2, [r7, #24]
 8006570:	0151      	lsls	r1, r2, #5
 8006572:	69fa      	ldr	r2, [r7, #28]
 8006574:	440a      	add	r2, r1
 8006576:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800657a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800657e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3720      	adds	r7, #32
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	1ff80000 	.word	0x1ff80000

08006590 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800659a:	2300      	movs	r3, #0
 800659c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	785b      	ldrb	r3, [r3, #1]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d14a      	bne.n	8006644 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	015a      	lsls	r2, r3, #5
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065c6:	f040 8086 	bne.w	80066d6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	7812      	ldrb	r2, [r2, #0]
 80065de:	0151      	lsls	r1, r2, #5
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	440a      	add	r2, r1
 80065e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80065ec:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	7812      	ldrb	r2, [r2, #0]
 8006602:	0151      	lsls	r1, r2, #5
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	440a      	add	r2, r1
 8006608:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800660c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006610:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	3301      	adds	r3, #1
 8006616:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800661e:	4293      	cmp	r3, r2
 8006620:	d902      	bls.n	8006628 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	75fb      	strb	r3, [r7, #23]
          break;
 8006626:	e056      	b.n	80066d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	015a      	lsls	r2, r3, #5
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	4413      	add	r3, r2
 8006632:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800663c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006640:	d0e7      	beq.n	8006612 <USB_EPStopXfer+0x82>
 8006642:	e048      	b.n	80066d6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006658:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800665c:	d13b      	bne.n	80066d6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	4413      	add	r3, r2
 8006668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	7812      	ldrb	r2, [r2, #0]
 8006672:	0151      	lsls	r1, r2, #5
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	440a      	add	r2, r1
 8006678:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800667c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006680:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	4413      	add	r3, r2
 800668c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	7812      	ldrb	r2, [r2, #0]
 8006696:	0151      	lsls	r1, r2, #5
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	440a      	add	r2, r1
 800669c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	3301      	adds	r3, #1
 80066aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f242 7210 	movw	r2, #10000	@ 0x2710
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d902      	bls.n	80066bc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	75fb      	strb	r3, [r7, #23]
          break;
 80066ba:	e00c      	b.n	80066d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066d4:	d0e7      	beq.n	80066a6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80066d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	371c      	adds	r7, #28
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b089      	sub	sp, #36	@ 0x24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	4611      	mov	r1, r2
 80066f0:	461a      	mov	r2, r3
 80066f2:	460b      	mov	r3, r1
 80066f4:	71fb      	strb	r3, [r7, #7]
 80066f6:	4613      	mov	r3, r2
 80066f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006702:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006706:	2b00      	cmp	r3, #0
 8006708:	d123      	bne.n	8006752 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800670a:	88bb      	ldrh	r3, [r7, #4]
 800670c:	3303      	adds	r3, #3
 800670e:	089b      	lsrs	r3, r3, #2
 8006710:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006712:	2300      	movs	r3, #0
 8006714:	61bb      	str	r3, [r7, #24]
 8006716:	e018      	b.n	800674a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006718:	79fb      	ldrb	r3, [r7, #7]
 800671a:	031a      	lsls	r2, r3, #12
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	4413      	add	r3, r2
 8006720:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006724:	461a      	mov	r2, r3
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	3301      	adds	r3, #1
 8006730:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	3301      	adds	r3, #1
 8006736:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	3301      	adds	r3, #1
 800673c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	3301      	adds	r3, #1
 8006742:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	3301      	adds	r3, #1
 8006748:	61bb      	str	r3, [r7, #24]
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	429a      	cmp	r2, r3
 8006750:	d3e2      	bcc.n	8006718 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3724      	adds	r7, #36	@ 0x24
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006760:	b480      	push	{r7}
 8006762:	b08b      	sub	sp, #44	@ 0x2c
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	4613      	mov	r3, r2
 800676c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006776:	88fb      	ldrh	r3, [r7, #6]
 8006778:	089b      	lsrs	r3, r3, #2
 800677a:	b29b      	uxth	r3, r3
 800677c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800677e:	88fb      	ldrh	r3, [r7, #6]
 8006780:	f003 0303 	and.w	r3, r3, #3
 8006784:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006786:	2300      	movs	r3, #0
 8006788:	623b      	str	r3, [r7, #32]
 800678a:	e014      	b.n	80067b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006796:	601a      	str	r2, [r3, #0]
    pDest++;
 8006798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679a:	3301      	adds	r3, #1
 800679c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800679e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a0:	3301      	adds	r3, #1
 80067a2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80067a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a6:	3301      	adds	r3, #1
 80067a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80067aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ac:	3301      	adds	r3, #1
 80067ae:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	3301      	adds	r3, #1
 80067b4:	623b      	str	r3, [r7, #32]
 80067b6:	6a3a      	ldr	r2, [r7, #32]
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d3e6      	bcc.n	800678c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80067be:	8bfb      	ldrh	r3, [r7, #30]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d01e      	beq.n	8006802 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80067c4:	2300      	movs	r3, #0
 80067c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067ce:	461a      	mov	r2, r3
 80067d0:	f107 0310 	add.w	r3, r7, #16
 80067d4:	6812      	ldr	r2, [r2, #0]
 80067d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	6a3b      	ldr	r3, [r7, #32]
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	00db      	lsls	r3, r3, #3
 80067e0:	fa22 f303 	lsr.w	r3, r2, r3
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e8:	701a      	strb	r2, [r3, #0]
      i++;
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	3301      	adds	r3, #1
 80067ee:	623b      	str	r3, [r7, #32]
      pDest++;
 80067f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f2:	3301      	adds	r3, #1
 80067f4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80067f6:	8bfb      	ldrh	r3, [r7, #30]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80067fc:	8bfb      	ldrh	r3, [r7, #30]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1ea      	bne.n	80067d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006804:	4618      	mov	r0, r3
 8006806:	372c      	adds	r7, #44	@ 0x2c
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	785b      	ldrb	r3, [r3, #1]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d12c      	bne.n	8006886 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	db12      	blt.n	8006864 <USB_EPSetStall+0x54>
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00f      	beq.n	8006864 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	0151      	lsls	r1, r2, #5
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	440a      	add	r2, r1
 800685a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800685e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006862:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	0151      	lsls	r1, r2, #5
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	440a      	add	r2, r1
 800687a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800687e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	e02b      	b.n	80068de <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	4413      	add	r3, r2
 800688e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	db12      	blt.n	80068be <USB_EPSetStall+0xae>
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00f      	beq.n	80068be <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	0151      	lsls	r1, r2, #5
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	440a      	add	r2, r1
 80068b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80068bc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	0151      	lsls	r1, r2, #5
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	440a      	add	r2, r1
 80068d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80068dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3714      	adds	r7, #20
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	785b      	ldrb	r3, [r3, #1]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d128      	bne.n	800695a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4413      	add	r3, r2
 8006910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	0151      	lsls	r1, r2, #5
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	440a      	add	r2, r1
 800691e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006922:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006926:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	791b      	ldrb	r3, [r3, #4]
 800692c:	2b03      	cmp	r3, #3
 800692e:	d003      	beq.n	8006938 <USB_EPClearStall+0x4c>
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	791b      	ldrb	r3, [r3, #4]
 8006934:	2b02      	cmp	r3, #2
 8006936:	d138      	bne.n	80069aa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	0151      	lsls	r1, r2, #5
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	440a      	add	r2, r1
 800694e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006952:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	e027      	b.n	80069aa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	0151      	lsls	r1, r2, #5
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	440a      	add	r2, r1
 8006970:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006974:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006978:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	791b      	ldrb	r3, [r3, #4]
 800697e:	2b03      	cmp	r3, #3
 8006980:	d003      	beq.n	800698a <USB_EPClearStall+0x9e>
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	791b      	ldrb	r3, [r3, #4]
 8006986:	2b02      	cmp	r3, #2
 8006988:	d10f      	bne.n	80069aa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	4413      	add	r3, r2
 8006992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	0151      	lsls	r1, r2, #5
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	440a      	add	r2, r1
 80069a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069a8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3714      	adds	r7, #20
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	460b      	mov	r3, r1
 80069c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069d6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80069da:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	78fb      	ldrb	r3, [r7, #3]
 80069e6:	011b      	lsls	r3, r3, #4
 80069e8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80069ec:	68f9      	ldr	r1, [r7, #12]
 80069ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069f2:	4313      	orrs	r3, r2
 80069f4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006a1e:	f023 0303 	bic.w	r3, r3, #3
 8006a22:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a32:	f023 0302 	bic.w	r3, r3, #2
 8006a36:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b085      	sub	sp, #20
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006a60:	f023 0303 	bic.w	r3, r3, #3
 8006a64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a74:	f043 0302 	orr.w	r3, r3, #2
 8006a78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	695b      	ldr	r3, [r3, #20]
 8006a94:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b085      	sub	sp, #20
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	4013      	ands	r3, r2
 8006ad0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	0c1b      	lsrs	r3, r3, #16
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b085      	sub	sp, #20
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006afe:	69db      	ldr	r3, [r3, #28]
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	4013      	ands	r3, r2
 8006b04:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	b29b      	uxth	r3, r3
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b085      	sub	sp, #20
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	460b      	mov	r3, r1
 8006b20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006b26:	78fb      	ldrb	r3, [r7, #3]
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	4013      	ands	r3, r2
 8006b42:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b44:	68bb      	ldr	r3, [r7, #8]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b087      	sub	sp, #28
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b74:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006b76:	78fb      	ldrb	r3, [r7, #3]
 8006b78:	f003 030f 	and.w	r3, r3, #15
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b82:	01db      	lsls	r3, r3, #7
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006b8c:	78fb      	ldrb	r3, [r7, #3]
 8006b8e:	015a      	lsls	r2, r3, #5
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	371c      	adds	r7, #28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	f003 0301 	and.w	r3, r3, #1
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b085      	sub	sp, #20
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006be4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006be8:	f023 0307 	bic.w	r3, r3, #7
 8006bec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006bfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b087      	sub	sp, #28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	607a      	str	r2, [r7, #4]
 8006c1c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	333c      	adds	r3, #60	@ 0x3c
 8006c26:	3304      	adds	r3, #4
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	4a26      	ldr	r2, [pc, #152]	@ (8006cc8 <USB_EP0_OutStart+0xb8>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d90a      	bls.n	8006c4a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c44:	d101      	bne.n	8006c4a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	e037      	b.n	8006cba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c50:	461a      	mov	r2, r3
 8006c52:	2300      	movs	r3, #0
 8006c54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c78:	f043 0318 	orr.w	r3, r3, #24
 8006c7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c8c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006c90:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006c92:	7afb      	ldrb	r3, [r7, #11]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d10f      	bne.n	8006cb8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cb2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006cb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	371c      	adds	r7, #28
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	4f54300a 	.word	0x4f54300a

08006ccc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ce4:	d901      	bls.n	8006cea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e01b      	b.n	8006d22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	daf2      	bge.n	8006cd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	f043 0201 	orr.w	r2, r3, #1
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	3301      	adds	r3, #1
 8006d06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d0e:	d901      	bls.n	8006d14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e006      	b.n	8006d22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	f003 0301 	and.w	r3, r3, #1
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d0f0      	beq.n	8006d02 <USB_CoreReset+0x36>

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
	...

08006d30 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	460b      	mov	r3, r1
 8006d3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d3c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006d40:	f002 fcc6 	bl	80096d0 <USBD_static_malloc>
 8006d44:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d109      	bne.n	8006d60 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	32b0      	adds	r2, #176	@ 0xb0
 8006d56:	2100      	movs	r1, #0
 8006d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	e0d4      	b.n	8006f0a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006d60:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006d64:	2100      	movs	r1, #0
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f003 fe56 	bl	800aa18 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	32b0      	adds	r2, #176	@ 0xb0
 8006d76:	68f9      	ldr	r1, [r7, #12]
 8006d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	32b0      	adds	r2, #176	@ 0xb0
 8006d86:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	7c1b      	ldrb	r3, [r3, #16]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d138      	bne.n	8006e0a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006d98:	4b5e      	ldr	r3, [pc, #376]	@ (8006f14 <USBD_CDC_Init+0x1e4>)
 8006d9a:	7819      	ldrb	r1, [r3, #0]
 8006d9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006da0:	2202      	movs	r2, #2
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f002 fb71 	bl	800948a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006da8:	4b5a      	ldr	r3, [pc, #360]	@ (8006f14 <USBD_CDC_Init+0x1e4>)
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	f003 020f 	and.w	r2, r3, #15
 8006db0:	6879      	ldr	r1, [r7, #4]
 8006db2:	4613      	mov	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	440b      	add	r3, r1
 8006dbc:	3324      	adds	r3, #36	@ 0x24
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006dc2:	4b55      	ldr	r3, [pc, #340]	@ (8006f18 <USBD_CDC_Init+0x1e8>)
 8006dc4:	7819      	ldrb	r1, [r3, #0]
 8006dc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006dca:	2202      	movs	r2, #2
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f002 fb5c 	bl	800948a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006dd2:	4b51      	ldr	r3, [pc, #324]	@ (8006f18 <USBD_CDC_Init+0x1e8>)
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	f003 020f 	and.w	r2, r3, #15
 8006dda:	6879      	ldr	r1, [r7, #4]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	440b      	add	r3, r1
 8006de6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006dea:	2201      	movs	r2, #1
 8006dec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006dee:	4b4b      	ldr	r3, [pc, #300]	@ (8006f1c <USBD_CDC_Init+0x1ec>)
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	f003 020f 	and.w	r2, r3, #15
 8006df6:	6879      	ldr	r1, [r7, #4]
 8006df8:	4613      	mov	r3, r2
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4413      	add	r3, r2
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	440b      	add	r3, r1
 8006e02:	3326      	adds	r3, #38	@ 0x26
 8006e04:	2210      	movs	r2, #16
 8006e06:	801a      	strh	r2, [r3, #0]
 8006e08:	e035      	b.n	8006e76 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e0a:	4b42      	ldr	r3, [pc, #264]	@ (8006f14 <USBD_CDC_Init+0x1e4>)
 8006e0c:	7819      	ldrb	r1, [r3, #0]
 8006e0e:	2340      	movs	r3, #64	@ 0x40
 8006e10:	2202      	movs	r2, #2
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f002 fb39 	bl	800948a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e18:	4b3e      	ldr	r3, [pc, #248]	@ (8006f14 <USBD_CDC_Init+0x1e4>)
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	f003 020f 	and.w	r2, r3, #15
 8006e20:	6879      	ldr	r1, [r7, #4]
 8006e22:	4613      	mov	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4413      	add	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	440b      	add	r3, r1
 8006e2c:	3324      	adds	r3, #36	@ 0x24
 8006e2e:	2201      	movs	r2, #1
 8006e30:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e32:	4b39      	ldr	r3, [pc, #228]	@ (8006f18 <USBD_CDC_Init+0x1e8>)
 8006e34:	7819      	ldrb	r1, [r3, #0]
 8006e36:	2340      	movs	r3, #64	@ 0x40
 8006e38:	2202      	movs	r2, #2
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f002 fb25 	bl	800948a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e40:	4b35      	ldr	r3, [pc, #212]	@ (8006f18 <USBD_CDC_Init+0x1e8>)
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	f003 020f 	and.w	r2, r3, #15
 8006e48:	6879      	ldr	r1, [r7, #4]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	440b      	add	r3, r1
 8006e54:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006e58:	2201      	movs	r2, #1
 8006e5a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006e5c:	4b2f      	ldr	r3, [pc, #188]	@ (8006f1c <USBD_CDC_Init+0x1ec>)
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	f003 020f 	and.w	r2, r3, #15
 8006e64:	6879      	ldr	r1, [r7, #4]
 8006e66:	4613      	mov	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	440b      	add	r3, r1
 8006e70:	3326      	adds	r3, #38	@ 0x26
 8006e72:	2210      	movs	r2, #16
 8006e74:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e76:	4b29      	ldr	r3, [pc, #164]	@ (8006f1c <USBD_CDC_Init+0x1ec>)
 8006e78:	7819      	ldrb	r1, [r3, #0]
 8006e7a:	2308      	movs	r3, #8
 8006e7c:	2203      	movs	r2, #3
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f002 fb03 	bl	800948a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006e84:	4b25      	ldr	r3, [pc, #148]	@ (8006f1c <USBD_CDC_Init+0x1ec>)
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	f003 020f 	and.w	r2, r3, #15
 8006e8c:	6879      	ldr	r1, [r7, #4]
 8006e8e:	4613      	mov	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4413      	add	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	440b      	add	r3, r1
 8006e98:	3324      	adds	r3, #36	@ 0x24
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	33b0      	adds	r3, #176	@ 0xb0
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	e018      	b.n	8006f0a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	7c1b      	ldrb	r3, [r3, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10a      	bne.n	8006ef6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8006f18 <USBD_CDC_Init+0x1e8>)
 8006ee2:	7819      	ldrb	r1, [r3, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006eea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f002 fbba 	bl	8009668 <USBD_LL_PrepareReceive>
 8006ef4:	e008      	b.n	8006f08 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ef6:	4b08      	ldr	r3, [pc, #32]	@ (8006f18 <USBD_CDC_Init+0x1e8>)
 8006ef8:	7819      	ldrb	r1, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f00:	2340      	movs	r3, #64	@ 0x40
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f002 fbb0 	bl	8009668 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	2000888f 	.word	0x2000888f
 8006f18:	20008890 	.word	0x20008890
 8006f1c:	20008891 	.word	0x20008891

08006f20 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	460b      	mov	r3, r1
 8006f2a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006f2c:	4b3a      	ldr	r3, [pc, #232]	@ (8007018 <USBD_CDC_DeInit+0xf8>)
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	4619      	mov	r1, r3
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f002 facf 	bl	80094d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006f38:	4b37      	ldr	r3, [pc, #220]	@ (8007018 <USBD_CDC_DeInit+0xf8>)
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	f003 020f 	and.w	r2, r3, #15
 8006f40:	6879      	ldr	r1, [r7, #4]
 8006f42:	4613      	mov	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	440b      	add	r3, r1
 8006f4c:	3324      	adds	r3, #36	@ 0x24
 8006f4e:	2200      	movs	r2, #0
 8006f50:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006f52:	4b32      	ldr	r3, [pc, #200]	@ (800701c <USBD_CDC_DeInit+0xfc>)
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	4619      	mov	r1, r3
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f002 fabc 	bl	80094d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006f5e:	4b2f      	ldr	r3, [pc, #188]	@ (800701c <USBD_CDC_DeInit+0xfc>)
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	f003 020f 	and.w	r2, r3, #15
 8006f66:	6879      	ldr	r1, [r7, #4]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	440b      	add	r3, r1
 8006f72:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006f76:	2200      	movs	r2, #0
 8006f78:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006f7a:	4b29      	ldr	r3, [pc, #164]	@ (8007020 <USBD_CDC_DeInit+0x100>)
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f002 faa8 	bl	80094d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006f86:	4b26      	ldr	r3, [pc, #152]	@ (8007020 <USBD_CDC_DeInit+0x100>)
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	f003 020f 	and.w	r2, r3, #15
 8006f8e:	6879      	ldr	r1, [r7, #4]
 8006f90:	4613      	mov	r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	440b      	add	r3, r1
 8006f9a:	3324      	adds	r3, #36	@ 0x24
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006fa0:	4b1f      	ldr	r3, [pc, #124]	@ (8007020 <USBD_CDC_DeInit+0x100>)
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	f003 020f 	and.w	r2, r3, #15
 8006fa8:	6879      	ldr	r1, [r7, #4]
 8006faa:	4613      	mov	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	440b      	add	r3, r1
 8006fb4:	3326      	adds	r3, #38	@ 0x26
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	32b0      	adds	r2, #176	@ 0xb0
 8006fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d01f      	beq.n	800700c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	33b0      	adds	r3, #176	@ 0xb0
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	32b0      	adds	r2, #176	@ 0xb0
 8006fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f002 fb7c 	bl	80096ec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	32b0      	adds	r2, #176	@ 0xb0
 8006ffe:	2100      	movs	r1, #0
 8007000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	2000888f 	.word	0x2000888f
 800701c:	20008890 	.word	0x20008890
 8007020:	20008891 	.word	0x20008891

08007024 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	32b0      	adds	r2, #176	@ 0xb0
 8007038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800703c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800703e:	2300      	movs	r3, #0
 8007040:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007042:	2300      	movs	r3, #0
 8007044:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007050:	2303      	movs	r3, #3
 8007052:	e0bf      	b.n	80071d4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800705c:	2b00      	cmp	r3, #0
 800705e:	d050      	beq.n	8007102 <USBD_CDC_Setup+0xde>
 8007060:	2b20      	cmp	r3, #32
 8007062:	f040 80af 	bne.w	80071c4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	88db      	ldrh	r3, [r3, #6]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d03a      	beq.n	80070e4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	b25b      	sxtb	r3, r3
 8007074:	2b00      	cmp	r3, #0
 8007076:	da1b      	bge.n	80070b0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	33b0      	adds	r3, #176	@ 0xb0
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800708e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	88d2      	ldrh	r2, [r2, #6]
 8007094:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	88db      	ldrh	r3, [r3, #6]
 800709a:	2b07      	cmp	r3, #7
 800709c:	bf28      	it	cs
 800709e:	2307      	movcs	r3, #7
 80070a0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	89fa      	ldrh	r2, [r7, #14]
 80070a6:	4619      	mov	r1, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f001 fd93 	bl	8008bd4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80070ae:	e090      	b.n	80071d2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	785a      	ldrb	r2, [r3, #1]
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	88db      	ldrh	r3, [r3, #6]
 80070be:	2b3f      	cmp	r3, #63	@ 0x3f
 80070c0:	d803      	bhi.n	80070ca <USBD_CDC_Setup+0xa6>
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	88db      	ldrh	r3, [r3, #6]
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	e000      	b.n	80070cc <USBD_CDC_Setup+0xa8>
 80070ca:	2240      	movs	r2, #64	@ 0x40
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80070d2:	6939      	ldr	r1, [r7, #16]
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80070da:	461a      	mov	r2, r3
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f001 fda5 	bl	8008c2c <USBD_CtlPrepareRx>
      break;
 80070e2:	e076      	b.n	80071d2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	33b0      	adds	r3, #176	@ 0xb0
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4413      	add	r3, r2
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	7850      	ldrb	r0, [r2, #1]
 80070fa:	2200      	movs	r2, #0
 80070fc:	6839      	ldr	r1, [r7, #0]
 80070fe:	4798      	blx	r3
      break;
 8007100:	e067      	b.n	80071d2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	785b      	ldrb	r3, [r3, #1]
 8007106:	2b0b      	cmp	r3, #11
 8007108:	d851      	bhi.n	80071ae <USBD_CDC_Setup+0x18a>
 800710a:	a201      	add	r2, pc, #4	@ (adr r2, 8007110 <USBD_CDC_Setup+0xec>)
 800710c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007110:	08007141 	.word	0x08007141
 8007114:	080071bd 	.word	0x080071bd
 8007118:	080071af 	.word	0x080071af
 800711c:	080071af 	.word	0x080071af
 8007120:	080071af 	.word	0x080071af
 8007124:	080071af 	.word	0x080071af
 8007128:	080071af 	.word	0x080071af
 800712c:	080071af 	.word	0x080071af
 8007130:	080071af 	.word	0x080071af
 8007134:	080071af 	.word	0x080071af
 8007138:	0800716b 	.word	0x0800716b
 800713c:	08007195 	.word	0x08007195
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b03      	cmp	r3, #3
 800714a:	d107      	bne.n	800715c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800714c:	f107 030a 	add.w	r3, r7, #10
 8007150:	2202      	movs	r2, #2
 8007152:	4619      	mov	r1, r3
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f001 fd3d 	bl	8008bd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800715a:	e032      	b.n	80071c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800715c:	6839      	ldr	r1, [r7, #0]
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f001 fcbb 	bl	8008ada <USBD_CtlError>
            ret = USBD_FAIL;
 8007164:	2303      	movs	r3, #3
 8007166:	75fb      	strb	r3, [r7, #23]
          break;
 8007168:	e02b      	b.n	80071c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007170:	b2db      	uxtb	r3, r3
 8007172:	2b03      	cmp	r3, #3
 8007174:	d107      	bne.n	8007186 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007176:	f107 030d 	add.w	r3, r7, #13
 800717a:	2201      	movs	r2, #1
 800717c:	4619      	mov	r1, r3
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f001 fd28 	bl	8008bd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007184:	e01d      	b.n	80071c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007186:	6839      	ldr	r1, [r7, #0]
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f001 fca6 	bl	8008ada <USBD_CtlError>
            ret = USBD_FAIL;
 800718e:	2303      	movs	r3, #3
 8007190:	75fb      	strb	r3, [r7, #23]
          break;
 8007192:	e016      	b.n	80071c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b03      	cmp	r3, #3
 800719e:	d00f      	beq.n	80071c0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80071a0:	6839      	ldr	r1, [r7, #0]
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f001 fc99 	bl	8008ada <USBD_CtlError>
            ret = USBD_FAIL;
 80071a8:	2303      	movs	r3, #3
 80071aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80071ac:	e008      	b.n	80071c0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80071ae:	6839      	ldr	r1, [r7, #0]
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f001 fc92 	bl	8008ada <USBD_CtlError>
          ret = USBD_FAIL;
 80071b6:	2303      	movs	r3, #3
 80071b8:	75fb      	strb	r3, [r7, #23]
          break;
 80071ba:	e002      	b.n	80071c2 <USBD_CDC_Setup+0x19e>
          break;
 80071bc:	bf00      	nop
 80071be:	e008      	b.n	80071d2 <USBD_CDC_Setup+0x1ae>
          break;
 80071c0:	bf00      	nop
      }
      break;
 80071c2:	e006      	b.n	80071d2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80071c4:	6839      	ldr	r1, [r7, #0]
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f001 fc87 	bl	8008ada <USBD_CtlError>
      ret = USBD_FAIL;
 80071cc:	2303      	movs	r3, #3
 80071ce:	75fb      	strb	r3, [r7, #23]
      break;
 80071d0:	bf00      	nop
  }

  return (uint8_t)ret;
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3718      	adds	r7, #24
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	460b      	mov	r3, r1
 80071e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80071ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	32b0      	adds	r2, #176	@ 0xb0
 80071fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d101      	bne.n	8007206 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007202:	2303      	movs	r3, #3
 8007204:	e065      	b.n	80072d2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	32b0      	adds	r2, #176	@ 0xb0
 8007210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007214:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007216:	78fb      	ldrb	r3, [r7, #3]
 8007218:	f003 020f 	and.w	r2, r3, #15
 800721c:	6879      	ldr	r1, [r7, #4]
 800721e:	4613      	mov	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	440b      	add	r3, r1
 8007228:	3318      	adds	r3, #24
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d02f      	beq.n	8007290 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007230:	78fb      	ldrb	r3, [r7, #3]
 8007232:	f003 020f 	and.w	r2, r3, #15
 8007236:	6879      	ldr	r1, [r7, #4]
 8007238:	4613      	mov	r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4413      	add	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	440b      	add	r3, r1
 8007242:	3318      	adds	r3, #24
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	78fb      	ldrb	r3, [r7, #3]
 8007248:	f003 010f 	and.w	r1, r3, #15
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	460b      	mov	r3, r1
 8007250:	00db      	lsls	r3, r3, #3
 8007252:	440b      	add	r3, r1
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	4403      	add	r3, r0
 8007258:	331c      	adds	r3, #28
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007260:	fb01 f303 	mul.w	r3, r1, r3
 8007264:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007266:	2b00      	cmp	r3, #0
 8007268:	d112      	bne.n	8007290 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800726a:	78fb      	ldrb	r3, [r7, #3]
 800726c:	f003 020f 	and.w	r2, r3, #15
 8007270:	6879      	ldr	r1, [r7, #4]
 8007272:	4613      	mov	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	440b      	add	r3, r1
 800727c:	3318      	adds	r3, #24
 800727e:	2200      	movs	r2, #0
 8007280:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007282:	78f9      	ldrb	r1, [r7, #3]
 8007284:	2300      	movs	r3, #0
 8007286:	2200      	movs	r2, #0
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f002 f9cc 	bl	8009626 <USBD_LL_Transmit>
 800728e:	e01f      	b.n	80072d0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	2200      	movs	r2, #0
 8007294:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	33b0      	adds	r3, #176	@ 0xb0
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	4413      	add	r3, r2
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d010      	beq.n	80072d0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	33b0      	adds	r3, #176	@ 0xb0
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4413      	add	r3, r2
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80072cc:	78fa      	ldrb	r2, [r7, #3]
 80072ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b084      	sub	sp, #16
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	460b      	mov	r3, r1
 80072e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	32b0      	adds	r2, #176	@ 0xb0
 80072f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	32b0      	adds	r2, #176	@ 0xb0
 8007300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007308:	2303      	movs	r3, #3
 800730a:	e01a      	b.n	8007342 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800730c:	78fb      	ldrb	r3, [r7, #3]
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f002 f9ca 	bl	80096aa <USBD_LL_GetRxDataSize>
 8007316:	4602      	mov	r2, r0
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	33b0      	adds	r3, #176	@ 0xb0
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800733c:	4611      	mov	r1, r2
 800733e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b084      	sub	sp, #16
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	32b0      	adds	r2, #176	@ 0xb0
 800735c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007360:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d101      	bne.n	800736c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007368:	2303      	movs	r3, #3
 800736a:	e024      	b.n	80073b6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	33b0      	adds	r3, #176	@ 0xb0
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4413      	add	r3, r2
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d019      	beq.n	80073b4 <USBD_CDC_EP0_RxReady+0x6a>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007386:	2bff      	cmp	r3, #255	@ 0xff
 8007388:	d014      	beq.n	80073b4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	33b0      	adds	r3, #176	@ 0xb0
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80073a2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80073aa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	22ff      	movs	r2, #255	@ 0xff
 80073b0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
	...

080073c0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80073c8:	2182      	movs	r1, #130	@ 0x82
 80073ca:	4818      	ldr	r0, [pc, #96]	@ (800742c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80073cc:	f000 fd4f 	bl	8007e6e <USBD_GetEpDesc>
 80073d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80073d2:	2101      	movs	r1, #1
 80073d4:	4815      	ldr	r0, [pc, #84]	@ (800742c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80073d6:	f000 fd4a 	bl	8007e6e <USBD_GetEpDesc>
 80073da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80073dc:	2181      	movs	r1, #129	@ 0x81
 80073de:	4813      	ldr	r0, [pc, #76]	@ (800742c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80073e0:	f000 fd45 	bl	8007e6e <USBD_GetEpDesc>
 80073e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	2210      	movs	r2, #16
 80073f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d006      	beq.n	8007406 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007400:	711a      	strb	r2, [r3, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d006      	beq.n	800741a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007414:	711a      	strb	r2, [r3, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2243      	movs	r2, #67	@ 0x43
 800741e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007420:	4b02      	ldr	r3, [pc, #8]	@ (800742c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007422:	4618      	mov	r0, r3
 8007424:	3718      	adds	r7, #24
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	2000884c 	.word	0x2000884c

08007430 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007438:	2182      	movs	r1, #130	@ 0x82
 800743a:	4818      	ldr	r0, [pc, #96]	@ (800749c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800743c:	f000 fd17 	bl	8007e6e <USBD_GetEpDesc>
 8007440:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007442:	2101      	movs	r1, #1
 8007444:	4815      	ldr	r0, [pc, #84]	@ (800749c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007446:	f000 fd12 	bl	8007e6e <USBD_GetEpDesc>
 800744a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800744c:	2181      	movs	r1, #129	@ 0x81
 800744e:	4813      	ldr	r0, [pc, #76]	@ (800749c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007450:	f000 fd0d 	bl	8007e6e <USBD_GetEpDesc>
 8007454:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d002      	beq.n	8007462 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	2210      	movs	r2, #16
 8007460:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d006      	beq.n	8007476 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	2200      	movs	r2, #0
 800746c:	711a      	strb	r2, [r3, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f042 0202 	orr.w	r2, r2, #2
 8007474:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d006      	beq.n	800748a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	711a      	strb	r2, [r3, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f042 0202 	orr.w	r2, r2, #2
 8007488:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2243      	movs	r2, #67	@ 0x43
 800748e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007490:	4b02      	ldr	r3, [pc, #8]	@ (800749c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007492:	4618      	mov	r0, r3
 8007494:	3718      	adds	r7, #24
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	2000884c 	.word	0x2000884c

080074a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074a8:	2182      	movs	r1, #130	@ 0x82
 80074aa:	4818      	ldr	r0, [pc, #96]	@ (800750c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80074ac:	f000 fcdf 	bl	8007e6e <USBD_GetEpDesc>
 80074b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074b2:	2101      	movs	r1, #1
 80074b4:	4815      	ldr	r0, [pc, #84]	@ (800750c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80074b6:	f000 fcda 	bl	8007e6e <USBD_GetEpDesc>
 80074ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074bc:	2181      	movs	r1, #129	@ 0x81
 80074be:	4813      	ldr	r0, [pc, #76]	@ (800750c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80074c0:	f000 fcd5 	bl	8007e6e <USBD_GetEpDesc>
 80074c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d002      	beq.n	80074d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	2210      	movs	r2, #16
 80074d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d006      	beq.n	80074e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	2200      	movs	r2, #0
 80074dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074e0:	711a      	strb	r2, [r3, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d006      	beq.n	80074fa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074f4:	711a      	strb	r2, [r3, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2243      	movs	r2, #67	@ 0x43
 80074fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007500:	4b02      	ldr	r3, [pc, #8]	@ (800750c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007502:	4618      	mov	r0, r3
 8007504:	3718      	adds	r7, #24
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	2000884c 	.word	0x2000884c

08007510 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	220a      	movs	r2, #10
 800751c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800751e:	4b03      	ldr	r3, [pc, #12]	@ (800752c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007520:	4618      	mov	r0, r3
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr
 800752c:	20008808 	.word	0x20008808

08007530 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d101      	bne.n	8007544 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007540:	2303      	movs	r3, #3
 8007542:	e009      	b.n	8007558 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	33b0      	adds	r3, #176	@ 0xb0
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	683a      	ldr	r2, [r7, #0]
 8007554:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007564:	b480      	push	{r7}
 8007566:	b087      	sub	sp, #28
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	32b0      	adds	r2, #176	@ 0xb0
 800757a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800757e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007586:	2303      	movs	r3, #3
 8007588:	e008      	b.n	800759c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	371c      	adds	r7, #28
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	32b0      	adds	r2, #176	@ 0xb0
 80075bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d101      	bne.n	80075cc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e004      	b.n	80075d6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
	...

080075e4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	32b0      	adds	r2, #176	@ 0xb0
 80075f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075fa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80075fc:	2301      	movs	r3, #1
 80075fe:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d101      	bne.n	800760a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007606:	2303      	movs	r3, #3
 8007608:	e025      	b.n	8007656 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007610:	2b00      	cmp	r3, #0
 8007612:	d11f      	bne.n	8007654 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	2201      	movs	r2, #1
 8007618:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800761c:	4b10      	ldr	r3, [pc, #64]	@ (8007660 <USBD_CDC_TransmitPacket+0x7c>)
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	f003 020f 	and.w	r2, r3, #15
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	4613      	mov	r3, r2
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	4403      	add	r3, r0
 8007636:	3318      	adds	r3, #24
 8007638:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800763a:	4b09      	ldr	r3, [pc, #36]	@ (8007660 <USBD_CDC_TransmitPacket+0x7c>)
 800763c:	7819      	ldrb	r1, [r3, #0]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f001 ffeb 	bl	8009626 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007650:	2300      	movs	r3, #0
 8007652:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007654:	7bfb      	ldrb	r3, [r7, #15]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	2000888f 	.word	0x2000888f

08007664 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	32b0      	adds	r2, #176	@ 0xb0
 8007676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800767a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	32b0      	adds	r2, #176	@ 0xb0
 8007686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800768e:	2303      	movs	r3, #3
 8007690:	e018      	b.n	80076c4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	7c1b      	ldrb	r3, [r3, #16]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10a      	bne.n	80076b0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800769a:	4b0c      	ldr	r3, [pc, #48]	@ (80076cc <USBD_CDC_ReceivePacket+0x68>)
 800769c:	7819      	ldrb	r1, [r3, #0]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80076a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f001 ffdd 	bl	8009668 <USBD_LL_PrepareReceive>
 80076ae:	e008      	b.n	80076c2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076b0:	4b06      	ldr	r3, [pc, #24]	@ (80076cc <USBD_CDC_ReceivePacket+0x68>)
 80076b2:	7819      	ldrb	r1, [r3, #0]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80076ba:	2340      	movs	r3, #64	@ 0x40
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f001 ffd3 	bl	8009668 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	20008890 	.word	0x20008890

080076d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	4613      	mov	r3, r2
 80076dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d101      	bne.n	80076e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e01f      	b.n	8007728 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d003      	beq.n	800770e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	79fa      	ldrb	r2, [r7, #7]
 800771a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f001 fe4d 	bl	80093bc <USBD_LL_Init>
 8007722:	4603      	mov	r3, r0
 8007724:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007726:	7dfb      	ldrb	r3, [r7, #23]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3718      	adds	r7, #24
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800773a:	2300      	movs	r3, #0
 800773c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d101      	bne.n	8007748 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007744:	2303      	movs	r3, #3
 8007746:	e025      	b.n	8007794 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	32ae      	adds	r2, #174	@ 0xae
 800775a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800775e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00f      	beq.n	8007784 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	32ae      	adds	r2, #174	@ 0xae
 800776e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007774:	f107 020e 	add.w	r2, r7, #14
 8007778:	4610      	mov	r0, r2
 800777a:	4798      	blx	r3
 800777c:	4602      	mov	r2, r0
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800778a:	1c5a      	adds	r2, r3, #1
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f001 fe55 	bl	8009454 <USBD_LL_Start>
 80077aa:	4603      	mov	r3, r0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80077bc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80077be:	4618      	mov	r0, r3
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b084      	sub	sp, #16
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
 80077d2:	460b      	mov	r3, r1
 80077d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d009      	beq.n	80077f8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	78fa      	ldrb	r2, [r7, #3]
 80077ee:	4611      	mov	r1, r2
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	4798      	blx	r3
 80077f4:	4603      	mov	r3, r0
 80077f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b084      	sub	sp, #16
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
 800780a:	460b      	mov	r3, r1
 800780c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	78fa      	ldrb	r2, [r7, #3]
 800781c:	4611      	mov	r1, r2
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	4798      	blx	r3
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d001      	beq.n	800782c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007828:	2303      	movs	r3, #3
 800782a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800782c:	7bfb      	ldrb	r3, [r7, #15]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b084      	sub	sp, #16
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
 800783e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007846:	6839      	ldr	r1, [r7, #0]
 8007848:	4618      	mov	r0, r3
 800784a:	f001 f90c 	bl	8008a66 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800785c:	461a      	mov	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800786a:	f003 031f 	and.w	r3, r3, #31
 800786e:	2b02      	cmp	r3, #2
 8007870:	d01a      	beq.n	80078a8 <USBD_LL_SetupStage+0x72>
 8007872:	2b02      	cmp	r3, #2
 8007874:	d822      	bhi.n	80078bc <USBD_LL_SetupStage+0x86>
 8007876:	2b00      	cmp	r3, #0
 8007878:	d002      	beq.n	8007880 <USBD_LL_SetupStage+0x4a>
 800787a:	2b01      	cmp	r3, #1
 800787c:	d00a      	beq.n	8007894 <USBD_LL_SetupStage+0x5e>
 800787e:	e01d      	b.n	80078bc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007886:	4619      	mov	r1, r3
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fb63 	bl	8007f54 <USBD_StdDevReq>
 800788e:	4603      	mov	r3, r0
 8007890:	73fb      	strb	r3, [r7, #15]
      break;
 8007892:	e020      	b.n	80078d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800789a:	4619      	mov	r1, r3
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fbcb 	bl	8008038 <USBD_StdItfReq>
 80078a2:	4603      	mov	r3, r0
 80078a4:	73fb      	strb	r3, [r7, #15]
      break;
 80078a6:	e016      	b.n	80078d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80078ae:	4619      	mov	r1, r3
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fc2d 	bl	8008110 <USBD_StdEPReq>
 80078b6:	4603      	mov	r3, r0
 80078b8:	73fb      	strb	r3, [r7, #15]
      break;
 80078ba:	e00c      	b.n	80078d6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80078c2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	4619      	mov	r1, r3
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f001 fe22 	bl	8009514 <USBD_LL_StallEP>
 80078d0:	4603      	mov	r3, r0
 80078d2:	73fb      	strb	r3, [r7, #15]
      break;
 80078d4:	bf00      	nop
  }

  return ret;
 80078d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	460b      	mov	r3, r1
 80078ea:	607a      	str	r2, [r7, #4]
 80078ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80078ee:	2300      	movs	r3, #0
 80078f0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80078f2:	7afb      	ldrb	r3, [r7, #11]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d16e      	bne.n	80079d6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80078fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007906:	2b03      	cmp	r3, #3
 8007908:	f040 8098 	bne.w	8007a3c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	689a      	ldr	r2, [r3, #8]
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	429a      	cmp	r2, r3
 8007916:	d913      	bls.n	8007940 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	689a      	ldr	r2, [r3, #8]
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	1ad2      	subs	r2, r2, r3
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	68da      	ldr	r2, [r3, #12]
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	4293      	cmp	r3, r2
 8007930:	bf28      	it	cs
 8007932:	4613      	movcs	r3, r2
 8007934:	461a      	mov	r2, r3
 8007936:	6879      	ldr	r1, [r7, #4]
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f001 f994 	bl	8008c66 <USBD_CtlContinueRx>
 800793e:	e07d      	b.n	8007a3c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007946:	f003 031f 	and.w	r3, r3, #31
 800794a:	2b02      	cmp	r3, #2
 800794c:	d014      	beq.n	8007978 <USBD_LL_DataOutStage+0x98>
 800794e:	2b02      	cmp	r3, #2
 8007950:	d81d      	bhi.n	800798e <USBD_LL_DataOutStage+0xae>
 8007952:	2b00      	cmp	r3, #0
 8007954:	d002      	beq.n	800795c <USBD_LL_DataOutStage+0x7c>
 8007956:	2b01      	cmp	r3, #1
 8007958:	d003      	beq.n	8007962 <USBD_LL_DataOutStage+0x82>
 800795a:	e018      	b.n	800798e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800795c:	2300      	movs	r3, #0
 800795e:	75bb      	strb	r3, [r7, #22]
            break;
 8007960:	e018      	b.n	8007994 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007968:	b2db      	uxtb	r3, r3
 800796a:	4619      	mov	r1, r3
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f000 fa64 	bl	8007e3a <USBD_CoreFindIF>
 8007972:	4603      	mov	r3, r0
 8007974:	75bb      	strb	r3, [r7, #22]
            break;
 8007976:	e00d      	b.n	8007994 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800797e:	b2db      	uxtb	r3, r3
 8007980:	4619      	mov	r1, r3
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 fa66 	bl	8007e54 <USBD_CoreFindEP>
 8007988:	4603      	mov	r3, r0
 800798a:	75bb      	strb	r3, [r7, #22]
            break;
 800798c:	e002      	b.n	8007994 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800798e:	2300      	movs	r3, #0
 8007990:	75bb      	strb	r3, [r7, #22]
            break;
 8007992:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007994:	7dbb      	ldrb	r3, [r7, #22]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d119      	bne.n	80079ce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b03      	cmp	r3, #3
 80079a4:	d113      	bne.n	80079ce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80079a6:	7dba      	ldrb	r2, [r7, #22]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	32ae      	adds	r2, #174	@ 0xae
 80079ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00b      	beq.n	80079ce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80079b6:	7dba      	ldrb	r2, [r7, #22]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80079be:	7dba      	ldrb	r2, [r7, #22]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	32ae      	adds	r2, #174	@ 0xae
 80079c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	68f8      	ldr	r0, [r7, #12]
 80079cc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f001 f95a 	bl	8008c88 <USBD_CtlSendStatus>
 80079d4:	e032      	b.n	8007a3c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80079d6:	7afb      	ldrb	r3, [r7, #11]
 80079d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	4619      	mov	r1, r3
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f000 fa37 	bl	8007e54 <USBD_CoreFindEP>
 80079e6:	4603      	mov	r3, r0
 80079e8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079ea:	7dbb      	ldrb	r3, [r7, #22]
 80079ec:	2bff      	cmp	r3, #255	@ 0xff
 80079ee:	d025      	beq.n	8007a3c <USBD_LL_DataOutStage+0x15c>
 80079f0:	7dbb      	ldrb	r3, [r7, #22]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d122      	bne.n	8007a3c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	d117      	bne.n	8007a32 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007a02:	7dba      	ldrb	r2, [r7, #22]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	32ae      	adds	r2, #174	@ 0xae
 8007a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00f      	beq.n	8007a32 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007a12:	7dba      	ldrb	r2, [r7, #22]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007a1a:	7dba      	ldrb	r2, [r7, #22]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	32ae      	adds	r2, #174	@ 0xae
 8007a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	7afa      	ldrb	r2, [r7, #11]
 8007a28:	4611      	mov	r1, r2
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	4798      	blx	r3
 8007a2e:	4603      	mov	r3, r0
 8007a30:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007a32:	7dfb      	ldrb	r3, [r7, #23]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d001      	beq.n	8007a3c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007a38:	7dfb      	ldrb	r3, [r7, #23]
 8007a3a:	e000      	b.n	8007a3e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3718      	adds	r7, #24
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b086      	sub	sp, #24
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	60f8      	str	r0, [r7, #12]
 8007a4e:	460b      	mov	r3, r1
 8007a50:	607a      	str	r2, [r7, #4]
 8007a52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007a54:	7afb      	ldrb	r3, [r7, #11]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d16f      	bne.n	8007b3a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	3314      	adds	r3, #20
 8007a5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d15a      	bne.n	8007b20 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	689a      	ldr	r2, [r3, #8]
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d914      	bls.n	8007aa0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	689a      	ldr	r2, [r3, #8]
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	1ad2      	subs	r2, r2, r3
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	461a      	mov	r2, r3
 8007a8a:	6879      	ldr	r1, [r7, #4]
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f001 f8bc 	bl	8008c0a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a92:	2300      	movs	r3, #0
 8007a94:	2200      	movs	r2, #0
 8007a96:	2100      	movs	r1, #0
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f001 fde5 	bl	8009668 <USBD_LL_PrepareReceive>
 8007a9e:	e03f      	b.n	8007b20 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	68da      	ldr	r2, [r3, #12]
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d11c      	bne.n	8007ae6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	685a      	ldr	r2, [r3, #4]
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d316      	bcc.n	8007ae6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d20f      	bcs.n	8007ae6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	2100      	movs	r1, #0
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f001 f89d 	bl	8008c0a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ad8:	2300      	movs	r3, #0
 8007ada:	2200      	movs	r2, #0
 8007adc:	2100      	movs	r1, #0
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f001 fdc2 	bl	8009668 <USBD_LL_PrepareReceive>
 8007ae4:	e01c      	b.n	8007b20 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d10f      	bne.n	8007b12 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d009      	beq.n	8007b12 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b12:	2180      	movs	r1, #128	@ 0x80
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f001 fcfd 	bl	8009514 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f001 f8c7 	bl	8008cae <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d03a      	beq.n	8007ba0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f7ff fe42 	bl	80077b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007b38:	e032      	b.n	8007ba0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007b3a:	7afb      	ldrb	r3, [r7, #11]
 8007b3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	4619      	mov	r1, r3
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f000 f985 	bl	8007e54 <USBD_CoreFindEP>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b4e:	7dfb      	ldrb	r3, [r7, #23]
 8007b50:	2bff      	cmp	r3, #255	@ 0xff
 8007b52:	d025      	beq.n	8007ba0 <USBD_LL_DataInStage+0x15a>
 8007b54:	7dfb      	ldrb	r3, [r7, #23]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d122      	bne.n	8007ba0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	2b03      	cmp	r3, #3
 8007b64:	d11c      	bne.n	8007ba0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007b66:	7dfa      	ldrb	r2, [r7, #23]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	32ae      	adds	r2, #174	@ 0xae
 8007b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d014      	beq.n	8007ba0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007b76:	7dfa      	ldrb	r2, [r7, #23]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007b7e:	7dfa      	ldrb	r2, [r7, #23]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	32ae      	adds	r2, #174	@ 0xae
 8007b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	7afa      	ldrb	r2, [r7, #11]
 8007b8c:	4611      	mov	r1, r2
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	4798      	blx	r3
 8007b92:	4603      	mov	r3, r0
 8007b94:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007b96:	7dbb      	ldrb	r3, [r7, #22]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d001      	beq.n	8007ba0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007b9c:	7dbb      	ldrb	r3, [r7, #22]
 8007b9e:	e000      	b.n	8007ba2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3718      	adds	r7, #24
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b084      	sub	sp, #16
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d014      	beq.n	8007c10 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d00e      	beq.n	8007c10 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	6852      	ldr	r2, [r2, #4]
 8007bfe:	b2d2      	uxtb	r2, r2
 8007c00:	4611      	mov	r1, r2
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	4798      	blx	r3
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d001      	beq.n	8007c10 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c10:	2340      	movs	r3, #64	@ 0x40
 8007c12:	2200      	movs	r2, #0
 8007c14:	2100      	movs	r1, #0
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f001 fc37 	bl	800948a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2240      	movs	r2, #64	@ 0x40
 8007c28:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c2c:	2340      	movs	r3, #64	@ 0x40
 8007c2e:	2200      	movs	r2, #0
 8007c30:	2180      	movs	r1, #128	@ 0x80
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f001 fc29 	bl	800948a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2240      	movs	r2, #64	@ 0x40
 8007c42:	621a      	str	r2, [r3, #32]

  return ret;
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b083      	sub	sp, #12
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	460b      	mov	r3, r1
 8007c58:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	78fa      	ldrb	r2, [r7, #3]
 8007c5e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b083      	sub	sp, #12
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b04      	cmp	r3, #4
 8007c80:	d006      	beq.n	8007c90 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c88:	b2da      	uxtb	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2204      	movs	r2, #4
 8007c94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	370c      	adds	r7, #12
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	b083      	sub	sp, #12
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b04      	cmp	r3, #4
 8007cb8:	d106      	bne.n	8007cc8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	370c      	adds	r7, #12
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr

08007cd6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b082      	sub	sp, #8
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b03      	cmp	r3, #3
 8007ce8:	d110      	bne.n	8007d0c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00b      	beq.n	8007d0c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cfa:	69db      	ldr	r3, [r3, #28]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d005      	beq.n	8007d0c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d06:	69db      	ldr	r3, [r3, #28]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3708      	adds	r7, #8
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b082      	sub	sp, #8
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	460b      	mov	r3, r1
 8007d20:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	32ae      	adds	r2, #174	@ 0xae
 8007d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d101      	bne.n	8007d38 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e01c      	b.n	8007d72 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b03      	cmp	r3, #3
 8007d42:	d115      	bne.n	8007d70 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	32ae      	adds	r2, #174	@ 0xae
 8007d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d52:	6a1b      	ldr	r3, [r3, #32]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00b      	beq.n	8007d70 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	32ae      	adds	r2, #174	@ 0xae
 8007d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	78fa      	ldrb	r2, [r7, #3]
 8007d6a:	4611      	mov	r1, r2
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b082      	sub	sp, #8
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
 8007d82:	460b      	mov	r3, r1
 8007d84:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	32ae      	adds	r2, #174	@ 0xae
 8007d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d101      	bne.n	8007d9c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007d98:	2303      	movs	r3, #3
 8007d9a:	e01c      	b.n	8007dd6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b03      	cmp	r3, #3
 8007da6:	d115      	bne.n	8007dd4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	32ae      	adds	r2, #174	@ 0xae
 8007db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00b      	beq.n	8007dd4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	32ae      	adds	r2, #174	@ 0xae
 8007dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dcc:	78fa      	ldrb	r2, [r7, #3]
 8007dce:	4611      	mov	r1, r2
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007dde:	b480      	push	{r7}
 8007de0:	b083      	sub	sp, #12
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00e      	beq.n	8007e30 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	6852      	ldr	r2, [r2, #4]
 8007e1e:	b2d2      	uxtb	r2, r2
 8007e20:	4611      	mov	r1, r2
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	4798      	blx	r3
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d001      	beq.n	8007e30 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007e3a:	b480      	push	{r7}
 8007e3c:	b083      	sub	sp, #12
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
 8007e42:	460b      	mov	r3, r1
 8007e44:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007e46:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007e60:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b086      	sub	sp, #24
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	460b      	mov	r3, r1
 8007e78:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007e82:	2300      	movs	r3, #0
 8007e84:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	885b      	ldrh	r3, [r3, #2]
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	7812      	ldrb	r2, [r2, #0]
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d91f      	bls.n	8007ed4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007e9a:	e013      	b.n	8007ec4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007e9c:	f107 030a 	add.w	r3, r7, #10
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	6978      	ldr	r0, [r7, #20]
 8007ea4:	f000 f81b 	bl	8007ede <USBD_GetNextDesc>
 8007ea8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	785b      	ldrb	r3, [r3, #1]
 8007eae:	2b05      	cmp	r3, #5
 8007eb0:	d108      	bne.n	8007ec4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	789b      	ldrb	r3, [r3, #2]
 8007eba:	78fa      	ldrb	r2, [r7, #3]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d008      	beq.n	8007ed2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	885b      	ldrh	r3, [r3, #2]
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	897b      	ldrh	r3, [r7, #10]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d8e5      	bhi.n	8007e9c <USBD_GetEpDesc+0x2e>
 8007ed0:	e000      	b.n	8007ed4 <USBD_GetEpDesc+0x66>
          break;
 8007ed2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007ed4:	693b      	ldr	r3, [r7, #16]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3718      	adds	r7, #24
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b085      	sub	sp, #20
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
 8007ee6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	881b      	ldrh	r3, [r3, #0]
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	7812      	ldrb	r2, [r2, #0]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	461a      	mov	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4413      	add	r3, r2
 8007f06:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007f08:	68fb      	ldr	r3, [r7, #12]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3714      	adds	r7, #20
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007f16:	b480      	push	{r7}
 8007f18:	b087      	sub	sp, #28
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007f34:	8a3b      	ldrh	r3, [r7, #16]
 8007f36:	021b      	lsls	r3, r3, #8
 8007f38:	b21a      	sxth	r2, r3
 8007f3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	b21b      	sxth	r3, r3
 8007f42:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007f44:	89fb      	ldrh	r3, [r7, #14]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	371c      	adds	r7, #28
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
	...

08007f54 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f6a:	2b40      	cmp	r3, #64	@ 0x40
 8007f6c:	d005      	beq.n	8007f7a <USBD_StdDevReq+0x26>
 8007f6e:	2b40      	cmp	r3, #64	@ 0x40
 8007f70:	d857      	bhi.n	8008022 <USBD_StdDevReq+0xce>
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00f      	beq.n	8007f96 <USBD_StdDevReq+0x42>
 8007f76:	2b20      	cmp	r3, #32
 8007f78:	d153      	bne.n	8008022 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	32ae      	adds	r2, #174	@ 0xae
 8007f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	6839      	ldr	r1, [r7, #0]
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	4798      	blx	r3
 8007f90:	4603      	mov	r3, r0
 8007f92:	73fb      	strb	r3, [r7, #15]
      break;
 8007f94:	e04a      	b.n	800802c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	785b      	ldrb	r3, [r3, #1]
 8007f9a:	2b09      	cmp	r3, #9
 8007f9c:	d83b      	bhi.n	8008016 <USBD_StdDevReq+0xc2>
 8007f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007fa4 <USBD_StdDevReq+0x50>)
 8007fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa4:	08007ff9 	.word	0x08007ff9
 8007fa8:	0800800d 	.word	0x0800800d
 8007fac:	08008017 	.word	0x08008017
 8007fb0:	08008003 	.word	0x08008003
 8007fb4:	08008017 	.word	0x08008017
 8007fb8:	08007fd7 	.word	0x08007fd7
 8007fbc:	08007fcd 	.word	0x08007fcd
 8007fc0:	08008017 	.word	0x08008017
 8007fc4:	08007fef 	.word	0x08007fef
 8007fc8:	08007fe1 	.word	0x08007fe1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007fcc:	6839      	ldr	r1, [r7, #0]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fa3c 	bl	800844c <USBD_GetDescriptor>
          break;
 8007fd4:	e024      	b.n	8008020 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007fd6:	6839      	ldr	r1, [r7, #0]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 fba1 	bl	8008720 <USBD_SetAddress>
          break;
 8007fde:	e01f      	b.n	8008020 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007fe0:	6839      	ldr	r1, [r7, #0]
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fbe0 	bl	80087a8 <USBD_SetConfig>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	73fb      	strb	r3, [r7, #15]
          break;
 8007fec:	e018      	b.n	8008020 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007fee:	6839      	ldr	r1, [r7, #0]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fc83 	bl	80088fc <USBD_GetConfig>
          break;
 8007ff6:	e013      	b.n	8008020 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007ff8:	6839      	ldr	r1, [r7, #0]
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 fcb4 	bl	8008968 <USBD_GetStatus>
          break;
 8008000:	e00e      	b.n	8008020 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008002:	6839      	ldr	r1, [r7, #0]
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fce3 	bl	80089d0 <USBD_SetFeature>
          break;
 800800a:	e009      	b.n	8008020 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fd07 	bl	8008a22 <USBD_ClrFeature>
          break;
 8008014:	e004      	b.n	8008020 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008016:	6839      	ldr	r1, [r7, #0]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 fd5e 	bl	8008ada <USBD_CtlError>
          break;
 800801e:	bf00      	nop
      }
      break;
 8008020:	e004      	b.n	800802c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fd58 	bl	8008ada <USBD_CtlError>
      break;
 800802a:	bf00      	nop
  }

  return ret;
 800802c:	7bfb      	ldrb	r3, [r7, #15]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop

08008038 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008042:	2300      	movs	r3, #0
 8008044:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800804e:	2b40      	cmp	r3, #64	@ 0x40
 8008050:	d005      	beq.n	800805e <USBD_StdItfReq+0x26>
 8008052:	2b40      	cmp	r3, #64	@ 0x40
 8008054:	d852      	bhi.n	80080fc <USBD_StdItfReq+0xc4>
 8008056:	2b00      	cmp	r3, #0
 8008058:	d001      	beq.n	800805e <USBD_StdItfReq+0x26>
 800805a:	2b20      	cmp	r3, #32
 800805c:	d14e      	bne.n	80080fc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008064:	b2db      	uxtb	r3, r3
 8008066:	3b01      	subs	r3, #1
 8008068:	2b02      	cmp	r3, #2
 800806a:	d840      	bhi.n	80080ee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	889b      	ldrh	r3, [r3, #4]
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b01      	cmp	r3, #1
 8008074:	d836      	bhi.n	80080e4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	889b      	ldrh	r3, [r3, #4]
 800807a:	b2db      	uxtb	r3, r3
 800807c:	4619      	mov	r1, r3
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f7ff fedb 	bl	8007e3a <USBD_CoreFindIF>
 8008084:	4603      	mov	r3, r0
 8008086:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008088:	7bbb      	ldrb	r3, [r7, #14]
 800808a:	2bff      	cmp	r3, #255	@ 0xff
 800808c:	d01d      	beq.n	80080ca <USBD_StdItfReq+0x92>
 800808e:	7bbb      	ldrb	r3, [r7, #14]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d11a      	bne.n	80080ca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008094:	7bba      	ldrb	r2, [r7, #14]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	32ae      	adds	r2, #174	@ 0xae
 800809a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00f      	beq.n	80080c4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80080a4:	7bba      	ldrb	r2, [r7, #14]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80080ac:	7bba      	ldrb	r2, [r7, #14]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	32ae      	adds	r2, #174	@ 0xae
 80080b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	6839      	ldr	r1, [r7, #0]
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	4798      	blx	r3
 80080be:	4603      	mov	r3, r0
 80080c0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80080c2:	e004      	b.n	80080ce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80080c4:	2303      	movs	r3, #3
 80080c6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80080c8:	e001      	b.n	80080ce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80080ca:	2303      	movs	r3, #3
 80080cc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	88db      	ldrh	r3, [r3, #6]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d110      	bne.n	80080f8 <USBD_StdItfReq+0xc0>
 80080d6:	7bfb      	ldrb	r3, [r7, #15]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d10d      	bne.n	80080f8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 fdd3 	bl	8008c88 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80080e2:	e009      	b.n	80080f8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80080e4:	6839      	ldr	r1, [r7, #0]
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fcf7 	bl	8008ada <USBD_CtlError>
          break;
 80080ec:	e004      	b.n	80080f8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80080ee:	6839      	ldr	r1, [r7, #0]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fcf2 	bl	8008ada <USBD_CtlError>
          break;
 80080f6:	e000      	b.n	80080fa <USBD_StdItfReq+0xc2>
          break;
 80080f8:	bf00      	nop
      }
      break;
 80080fa:	e004      	b.n	8008106 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80080fc:	6839      	ldr	r1, [r7, #0]
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fceb 	bl	8008ada <USBD_CtlError>
      break;
 8008104:	bf00      	nop
  }

  return ret;
 8008106:	7bfb      	ldrb	r3, [r7, #15]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800811a:	2300      	movs	r3, #0
 800811c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	889b      	ldrh	r3, [r3, #4]
 8008122:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800812c:	2b40      	cmp	r3, #64	@ 0x40
 800812e:	d007      	beq.n	8008140 <USBD_StdEPReq+0x30>
 8008130:	2b40      	cmp	r3, #64	@ 0x40
 8008132:	f200 817f 	bhi.w	8008434 <USBD_StdEPReq+0x324>
 8008136:	2b00      	cmp	r3, #0
 8008138:	d02a      	beq.n	8008190 <USBD_StdEPReq+0x80>
 800813a:	2b20      	cmp	r3, #32
 800813c:	f040 817a 	bne.w	8008434 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008140:	7bbb      	ldrb	r3, [r7, #14]
 8008142:	4619      	mov	r1, r3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f7ff fe85 	bl	8007e54 <USBD_CoreFindEP>
 800814a:	4603      	mov	r3, r0
 800814c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800814e:	7b7b      	ldrb	r3, [r7, #13]
 8008150:	2bff      	cmp	r3, #255	@ 0xff
 8008152:	f000 8174 	beq.w	800843e <USBD_StdEPReq+0x32e>
 8008156:	7b7b      	ldrb	r3, [r7, #13]
 8008158:	2b00      	cmp	r3, #0
 800815a:	f040 8170 	bne.w	800843e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800815e:	7b7a      	ldrb	r2, [r7, #13]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008166:	7b7a      	ldrb	r2, [r7, #13]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	32ae      	adds	r2, #174	@ 0xae
 800816c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 8163 	beq.w	800843e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008178:	7b7a      	ldrb	r2, [r7, #13]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	32ae      	adds	r2, #174	@ 0xae
 800817e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	6839      	ldr	r1, [r7, #0]
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	4798      	blx	r3
 800818a:	4603      	mov	r3, r0
 800818c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800818e:	e156      	b.n	800843e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	785b      	ldrb	r3, [r3, #1]
 8008194:	2b03      	cmp	r3, #3
 8008196:	d008      	beq.n	80081aa <USBD_StdEPReq+0x9a>
 8008198:	2b03      	cmp	r3, #3
 800819a:	f300 8145 	bgt.w	8008428 <USBD_StdEPReq+0x318>
 800819e:	2b00      	cmp	r3, #0
 80081a0:	f000 809b 	beq.w	80082da <USBD_StdEPReq+0x1ca>
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d03c      	beq.n	8008222 <USBD_StdEPReq+0x112>
 80081a8:	e13e      	b.n	8008428 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d002      	beq.n	80081bc <USBD_StdEPReq+0xac>
 80081b6:	2b03      	cmp	r3, #3
 80081b8:	d016      	beq.n	80081e8 <USBD_StdEPReq+0xd8>
 80081ba:	e02c      	b.n	8008216 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081bc:	7bbb      	ldrb	r3, [r7, #14]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00d      	beq.n	80081de <USBD_StdEPReq+0xce>
 80081c2:	7bbb      	ldrb	r3, [r7, #14]
 80081c4:	2b80      	cmp	r3, #128	@ 0x80
 80081c6:	d00a      	beq.n	80081de <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80081c8:	7bbb      	ldrb	r3, [r7, #14]
 80081ca:	4619      	mov	r1, r3
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f001 f9a1 	bl	8009514 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80081d2:	2180      	movs	r1, #128	@ 0x80
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f001 f99d 	bl	8009514 <USBD_LL_StallEP>
 80081da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081dc:	e020      	b.n	8008220 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80081de:	6839      	ldr	r1, [r7, #0]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fc7a 	bl	8008ada <USBD_CtlError>
              break;
 80081e6:	e01b      	b.n	8008220 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	885b      	ldrh	r3, [r3, #2]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10e      	bne.n	800820e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80081f0:	7bbb      	ldrb	r3, [r7, #14]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00b      	beq.n	800820e <USBD_StdEPReq+0xfe>
 80081f6:	7bbb      	ldrb	r3, [r7, #14]
 80081f8:	2b80      	cmp	r3, #128	@ 0x80
 80081fa:	d008      	beq.n	800820e <USBD_StdEPReq+0xfe>
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	88db      	ldrh	r3, [r3, #6]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d104      	bne.n	800820e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008204:	7bbb      	ldrb	r3, [r7, #14]
 8008206:	4619      	mov	r1, r3
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f001 f983 	bl	8009514 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 fd3a 	bl	8008c88 <USBD_CtlSendStatus>

              break;
 8008214:	e004      	b.n	8008220 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fc5e 	bl	8008ada <USBD_CtlError>
              break;
 800821e:	bf00      	nop
          }
          break;
 8008220:	e107      	b.n	8008432 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b02      	cmp	r3, #2
 800822c:	d002      	beq.n	8008234 <USBD_StdEPReq+0x124>
 800822e:	2b03      	cmp	r3, #3
 8008230:	d016      	beq.n	8008260 <USBD_StdEPReq+0x150>
 8008232:	e04b      	b.n	80082cc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008234:	7bbb      	ldrb	r3, [r7, #14]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00d      	beq.n	8008256 <USBD_StdEPReq+0x146>
 800823a:	7bbb      	ldrb	r3, [r7, #14]
 800823c:	2b80      	cmp	r3, #128	@ 0x80
 800823e:	d00a      	beq.n	8008256 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008240:	7bbb      	ldrb	r3, [r7, #14]
 8008242:	4619      	mov	r1, r3
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f001 f965 	bl	8009514 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800824a:	2180      	movs	r1, #128	@ 0x80
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f001 f961 	bl	8009514 <USBD_LL_StallEP>
 8008252:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008254:	e040      	b.n	80082d8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008256:	6839      	ldr	r1, [r7, #0]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 fc3e 	bl	8008ada <USBD_CtlError>
              break;
 800825e:	e03b      	b.n	80082d8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	885b      	ldrh	r3, [r3, #2]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d136      	bne.n	80082d6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008268:	7bbb      	ldrb	r3, [r7, #14]
 800826a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800826e:	2b00      	cmp	r3, #0
 8008270:	d004      	beq.n	800827c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008272:	7bbb      	ldrb	r3, [r7, #14]
 8008274:	4619      	mov	r1, r3
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f001 f96b 	bl	8009552 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 fd03 	bl	8008c88 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008282:	7bbb      	ldrb	r3, [r7, #14]
 8008284:	4619      	mov	r1, r3
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f7ff fde4 	bl	8007e54 <USBD_CoreFindEP>
 800828c:	4603      	mov	r3, r0
 800828e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008290:	7b7b      	ldrb	r3, [r7, #13]
 8008292:	2bff      	cmp	r3, #255	@ 0xff
 8008294:	d01f      	beq.n	80082d6 <USBD_StdEPReq+0x1c6>
 8008296:	7b7b      	ldrb	r3, [r7, #13]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d11c      	bne.n	80082d6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800829c:	7b7a      	ldrb	r2, [r7, #13]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80082a4:	7b7a      	ldrb	r2, [r7, #13]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	32ae      	adds	r2, #174	@ 0xae
 80082aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d010      	beq.n	80082d6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80082b4:	7b7a      	ldrb	r2, [r7, #13]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	32ae      	adds	r2, #174	@ 0xae
 80082ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	6839      	ldr	r1, [r7, #0]
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	4798      	blx	r3
 80082c6:	4603      	mov	r3, r0
 80082c8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80082ca:	e004      	b.n	80082d6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80082cc:	6839      	ldr	r1, [r7, #0]
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fc03 	bl	8008ada <USBD_CtlError>
              break;
 80082d4:	e000      	b.n	80082d8 <USBD_StdEPReq+0x1c8>
              break;
 80082d6:	bf00      	nop
          }
          break;
 80082d8:	e0ab      	b.n	8008432 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	d002      	beq.n	80082ec <USBD_StdEPReq+0x1dc>
 80082e6:	2b03      	cmp	r3, #3
 80082e8:	d032      	beq.n	8008350 <USBD_StdEPReq+0x240>
 80082ea:	e097      	b.n	800841c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082ec:	7bbb      	ldrb	r3, [r7, #14]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d007      	beq.n	8008302 <USBD_StdEPReq+0x1f2>
 80082f2:	7bbb      	ldrb	r3, [r7, #14]
 80082f4:	2b80      	cmp	r3, #128	@ 0x80
 80082f6:	d004      	beq.n	8008302 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 fbed 	bl	8008ada <USBD_CtlError>
                break;
 8008300:	e091      	b.n	8008426 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008302:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008306:	2b00      	cmp	r3, #0
 8008308:	da0b      	bge.n	8008322 <USBD_StdEPReq+0x212>
 800830a:	7bbb      	ldrb	r3, [r7, #14]
 800830c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008310:	4613      	mov	r3, r2
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	4413      	add	r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	3310      	adds	r3, #16
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	4413      	add	r3, r2
 800831e:	3304      	adds	r3, #4
 8008320:	e00b      	b.n	800833a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008322:	7bbb      	ldrb	r3, [r7, #14]
 8008324:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008328:	4613      	mov	r3, r2
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4413      	add	r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	4413      	add	r3, r2
 8008338:	3304      	adds	r3, #4
 800833a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	2200      	movs	r2, #0
 8008340:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	2202      	movs	r2, #2
 8008346:	4619      	mov	r1, r3
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fc43 	bl	8008bd4 <USBD_CtlSendData>
              break;
 800834e:	e06a      	b.n	8008426 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008350:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008354:	2b00      	cmp	r3, #0
 8008356:	da11      	bge.n	800837c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008358:	7bbb      	ldrb	r3, [r7, #14]
 800835a:	f003 020f 	and.w	r2, r3, #15
 800835e:	6879      	ldr	r1, [r7, #4]
 8008360:	4613      	mov	r3, r2
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	4413      	add	r3, r2
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	440b      	add	r3, r1
 800836a:	3324      	adds	r3, #36	@ 0x24
 800836c:	881b      	ldrh	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d117      	bne.n	80083a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008372:	6839      	ldr	r1, [r7, #0]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fbb0 	bl	8008ada <USBD_CtlError>
                  break;
 800837a:	e054      	b.n	8008426 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800837c:	7bbb      	ldrb	r3, [r7, #14]
 800837e:	f003 020f 	and.w	r2, r3, #15
 8008382:	6879      	ldr	r1, [r7, #4]
 8008384:	4613      	mov	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4413      	add	r3, r2
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	440b      	add	r3, r1
 800838e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008392:	881b      	ldrh	r3, [r3, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d104      	bne.n	80083a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008398:	6839      	ldr	r1, [r7, #0]
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fb9d 	bl	8008ada <USBD_CtlError>
                  break;
 80083a0:	e041      	b.n	8008426 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	da0b      	bge.n	80083c2 <USBD_StdEPReq+0x2b2>
 80083aa:	7bbb      	ldrb	r3, [r7, #14]
 80083ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80083b0:	4613      	mov	r3, r2
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	4413      	add	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	3310      	adds	r3, #16
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	4413      	add	r3, r2
 80083be:	3304      	adds	r3, #4
 80083c0:	e00b      	b.n	80083da <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083c2:	7bbb      	ldrb	r3, [r7, #14]
 80083c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083c8:	4613      	mov	r3, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	4413      	add	r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	4413      	add	r3, r2
 80083d8:	3304      	adds	r3, #4
 80083da:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80083dc:	7bbb      	ldrb	r3, [r7, #14]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d002      	beq.n	80083e8 <USBD_StdEPReq+0x2d8>
 80083e2:	7bbb      	ldrb	r3, [r7, #14]
 80083e4:	2b80      	cmp	r3, #128	@ 0x80
 80083e6:	d103      	bne.n	80083f0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2200      	movs	r2, #0
 80083ec:	601a      	str	r2, [r3, #0]
 80083ee:	e00e      	b.n	800840e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80083f0:	7bbb      	ldrb	r3, [r7, #14]
 80083f2:	4619      	mov	r1, r3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f001 f8cb 	bl	8009590 <USBD_LL_IsStallEP>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d003      	beq.n	8008408 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	2201      	movs	r2, #1
 8008404:	601a      	str	r2, [r3, #0]
 8008406:	e002      	b.n	800840e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	2200      	movs	r2, #0
 800840c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	2202      	movs	r2, #2
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fbdd 	bl	8008bd4 <USBD_CtlSendData>
              break;
 800841a:	e004      	b.n	8008426 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800841c:	6839      	ldr	r1, [r7, #0]
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fb5b 	bl	8008ada <USBD_CtlError>
              break;
 8008424:	bf00      	nop
          }
          break;
 8008426:	e004      	b.n	8008432 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008428:	6839      	ldr	r1, [r7, #0]
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fb55 	bl	8008ada <USBD_CtlError>
          break;
 8008430:	bf00      	nop
      }
      break;
 8008432:	e005      	b.n	8008440 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008434:	6839      	ldr	r1, [r7, #0]
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fb4f 	bl	8008ada <USBD_CtlError>
      break;
 800843c:	e000      	b.n	8008440 <USBD_StdEPReq+0x330>
      break;
 800843e:	bf00      	nop
  }

  return ret;
 8008440:	7bfb      	ldrb	r3, [r7, #15]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
	...

0800844c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008456:	2300      	movs	r3, #0
 8008458:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800845a:	2300      	movs	r3, #0
 800845c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800845e:	2300      	movs	r3, #0
 8008460:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	885b      	ldrh	r3, [r3, #2]
 8008466:	0a1b      	lsrs	r3, r3, #8
 8008468:	b29b      	uxth	r3, r3
 800846a:	3b01      	subs	r3, #1
 800846c:	2b06      	cmp	r3, #6
 800846e:	f200 8128 	bhi.w	80086c2 <USBD_GetDescriptor+0x276>
 8008472:	a201      	add	r2, pc, #4	@ (adr r2, 8008478 <USBD_GetDescriptor+0x2c>)
 8008474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008478:	08008495 	.word	0x08008495
 800847c:	080084ad 	.word	0x080084ad
 8008480:	080084ed 	.word	0x080084ed
 8008484:	080086c3 	.word	0x080086c3
 8008488:	080086c3 	.word	0x080086c3
 800848c:	08008663 	.word	0x08008663
 8008490:	0800868f 	.word	0x0800868f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	7c12      	ldrb	r2, [r2, #16]
 80084a0:	f107 0108 	add.w	r1, r7, #8
 80084a4:	4610      	mov	r0, r2
 80084a6:	4798      	blx	r3
 80084a8:	60f8      	str	r0, [r7, #12]
      break;
 80084aa:	e112      	b.n	80086d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	7c1b      	ldrb	r3, [r3, #16]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10d      	bne.n	80084d0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084bc:	f107 0208 	add.w	r2, r7, #8
 80084c0:	4610      	mov	r0, r2
 80084c2:	4798      	blx	r3
 80084c4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	3301      	adds	r3, #1
 80084ca:	2202      	movs	r2, #2
 80084cc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80084ce:	e100      	b.n	80086d2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084d8:	f107 0208 	add.w	r2, r7, #8
 80084dc:	4610      	mov	r0, r2
 80084de:	4798      	blx	r3
 80084e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	3301      	adds	r3, #1
 80084e6:	2202      	movs	r2, #2
 80084e8:	701a      	strb	r2, [r3, #0]
      break;
 80084ea:	e0f2      	b.n	80086d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	885b      	ldrh	r3, [r3, #2]
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b05      	cmp	r3, #5
 80084f4:	f200 80ac 	bhi.w	8008650 <USBD_GetDescriptor+0x204>
 80084f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008500 <USBD_GetDescriptor+0xb4>)
 80084fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fe:	bf00      	nop
 8008500:	08008519 	.word	0x08008519
 8008504:	0800854d 	.word	0x0800854d
 8008508:	08008581 	.word	0x08008581
 800850c:	080085b5 	.word	0x080085b5
 8008510:	080085e9 	.word	0x080085e9
 8008514:	0800861d 	.word	0x0800861d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00b      	beq.n	800853c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	7c12      	ldrb	r2, [r2, #16]
 8008530:	f107 0108 	add.w	r1, r7, #8
 8008534:	4610      	mov	r0, r2
 8008536:	4798      	blx	r3
 8008538:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800853a:	e091      	b.n	8008660 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800853c:	6839      	ldr	r1, [r7, #0]
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 facb 	bl	8008ada <USBD_CtlError>
            err++;
 8008544:	7afb      	ldrb	r3, [r7, #11]
 8008546:	3301      	adds	r3, #1
 8008548:	72fb      	strb	r3, [r7, #11]
          break;
 800854a:	e089      	b.n	8008660 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00b      	beq.n	8008570 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	7c12      	ldrb	r2, [r2, #16]
 8008564:	f107 0108 	add.w	r1, r7, #8
 8008568:	4610      	mov	r0, r2
 800856a:	4798      	blx	r3
 800856c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800856e:	e077      	b.n	8008660 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008570:	6839      	ldr	r1, [r7, #0]
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 fab1 	bl	8008ada <USBD_CtlError>
            err++;
 8008578:	7afb      	ldrb	r3, [r7, #11]
 800857a:	3301      	adds	r3, #1
 800857c:	72fb      	strb	r3, [r7, #11]
          break;
 800857e:	e06f      	b.n	8008660 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00b      	beq.n	80085a4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	7c12      	ldrb	r2, [r2, #16]
 8008598:	f107 0108 	add.w	r1, r7, #8
 800859c:	4610      	mov	r0, r2
 800859e:	4798      	blx	r3
 80085a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085a2:	e05d      	b.n	8008660 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085a4:	6839      	ldr	r1, [r7, #0]
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 fa97 	bl	8008ada <USBD_CtlError>
            err++;
 80085ac:	7afb      	ldrb	r3, [r7, #11]
 80085ae:	3301      	adds	r3, #1
 80085b0:	72fb      	strb	r3, [r7, #11]
          break;
 80085b2:	e055      	b.n	8008660 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00b      	beq.n	80085d8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	7c12      	ldrb	r2, [r2, #16]
 80085cc:	f107 0108 	add.w	r1, r7, #8
 80085d0:	4610      	mov	r0, r2
 80085d2:	4798      	blx	r3
 80085d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085d6:	e043      	b.n	8008660 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085d8:	6839      	ldr	r1, [r7, #0]
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 fa7d 	bl	8008ada <USBD_CtlError>
            err++;
 80085e0:	7afb      	ldrb	r3, [r7, #11]
 80085e2:	3301      	adds	r3, #1
 80085e4:	72fb      	strb	r3, [r7, #11]
          break;
 80085e6:	e03b      	b.n	8008660 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ee:	695b      	ldr	r3, [r3, #20]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00b      	beq.n	800860c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085fa:	695b      	ldr	r3, [r3, #20]
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	7c12      	ldrb	r2, [r2, #16]
 8008600:	f107 0108 	add.w	r1, r7, #8
 8008604:	4610      	mov	r0, r2
 8008606:	4798      	blx	r3
 8008608:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800860a:	e029      	b.n	8008660 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800860c:	6839      	ldr	r1, [r7, #0]
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 fa63 	bl	8008ada <USBD_CtlError>
            err++;
 8008614:	7afb      	ldrb	r3, [r7, #11]
 8008616:	3301      	adds	r3, #1
 8008618:	72fb      	strb	r3, [r7, #11]
          break;
 800861a:	e021      	b.n	8008660 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00b      	beq.n	8008640 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800862e:	699b      	ldr	r3, [r3, #24]
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	7c12      	ldrb	r2, [r2, #16]
 8008634:	f107 0108 	add.w	r1, r7, #8
 8008638:	4610      	mov	r0, r2
 800863a:	4798      	blx	r3
 800863c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800863e:	e00f      	b.n	8008660 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008640:	6839      	ldr	r1, [r7, #0]
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fa49 	bl	8008ada <USBD_CtlError>
            err++;
 8008648:	7afb      	ldrb	r3, [r7, #11]
 800864a:	3301      	adds	r3, #1
 800864c:	72fb      	strb	r3, [r7, #11]
          break;
 800864e:	e007      	b.n	8008660 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008650:	6839      	ldr	r1, [r7, #0]
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fa41 	bl	8008ada <USBD_CtlError>
          err++;
 8008658:	7afb      	ldrb	r3, [r7, #11]
 800865a:	3301      	adds	r3, #1
 800865c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800865e:	bf00      	nop
      }
      break;
 8008660:	e037      	b.n	80086d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	7c1b      	ldrb	r3, [r3, #16]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d109      	bne.n	800867e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008672:	f107 0208 	add.w	r2, r7, #8
 8008676:	4610      	mov	r0, r2
 8008678:	4798      	blx	r3
 800867a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800867c:	e029      	b.n	80086d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800867e:	6839      	ldr	r1, [r7, #0]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 fa2a 	bl	8008ada <USBD_CtlError>
        err++;
 8008686:	7afb      	ldrb	r3, [r7, #11]
 8008688:	3301      	adds	r3, #1
 800868a:	72fb      	strb	r3, [r7, #11]
      break;
 800868c:	e021      	b.n	80086d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	7c1b      	ldrb	r3, [r3, #16]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d10d      	bne.n	80086b2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800869c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800869e:	f107 0208 	add.w	r2, r7, #8
 80086a2:	4610      	mov	r0, r2
 80086a4:	4798      	blx	r3
 80086a6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	3301      	adds	r3, #1
 80086ac:	2207      	movs	r2, #7
 80086ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086b0:	e00f      	b.n	80086d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086b2:	6839      	ldr	r1, [r7, #0]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fa10 	bl	8008ada <USBD_CtlError>
        err++;
 80086ba:	7afb      	ldrb	r3, [r7, #11]
 80086bc:	3301      	adds	r3, #1
 80086be:	72fb      	strb	r3, [r7, #11]
      break;
 80086c0:	e007      	b.n	80086d2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80086c2:	6839      	ldr	r1, [r7, #0]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 fa08 	bl	8008ada <USBD_CtlError>
      err++;
 80086ca:	7afb      	ldrb	r3, [r7, #11]
 80086cc:	3301      	adds	r3, #1
 80086ce:	72fb      	strb	r3, [r7, #11]
      break;
 80086d0:	bf00      	nop
  }

  if (err != 0U)
 80086d2:	7afb      	ldrb	r3, [r7, #11]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d11e      	bne.n	8008716 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	88db      	ldrh	r3, [r3, #6]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d016      	beq.n	800870e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80086e0:	893b      	ldrh	r3, [r7, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00e      	beq.n	8008704 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	88da      	ldrh	r2, [r3, #6]
 80086ea:	893b      	ldrh	r3, [r7, #8]
 80086ec:	4293      	cmp	r3, r2
 80086ee:	bf28      	it	cs
 80086f0:	4613      	movcs	r3, r2
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80086f6:	893b      	ldrh	r3, [r7, #8]
 80086f8:	461a      	mov	r2, r3
 80086fa:	68f9      	ldr	r1, [r7, #12]
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 fa69 	bl	8008bd4 <USBD_CtlSendData>
 8008702:	e009      	b.n	8008718 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008704:	6839      	ldr	r1, [r7, #0]
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 f9e7 	bl	8008ada <USBD_CtlError>
 800870c:	e004      	b.n	8008718 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 faba 	bl	8008c88 <USBD_CtlSendStatus>
 8008714:	e000      	b.n	8008718 <USBD_GetDescriptor+0x2cc>
    return;
 8008716:	bf00      	nop
  }
}
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop

08008720 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	889b      	ldrh	r3, [r3, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d131      	bne.n	8008796 <USBD_SetAddress+0x76>
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	88db      	ldrh	r3, [r3, #6]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d12d      	bne.n	8008796 <USBD_SetAddress+0x76>
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	885b      	ldrh	r3, [r3, #2]
 800873e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008740:	d829      	bhi.n	8008796 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	885b      	ldrh	r3, [r3, #2]
 8008746:	b2db      	uxtb	r3, r3
 8008748:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800874c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008754:	b2db      	uxtb	r3, r3
 8008756:	2b03      	cmp	r3, #3
 8008758:	d104      	bne.n	8008764 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800875a:	6839      	ldr	r1, [r7, #0]
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 f9bc 	bl	8008ada <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008762:	e01d      	b.n	80087a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	7bfa      	ldrb	r2, [r7, #15]
 8008768:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800876c:	7bfb      	ldrb	r3, [r7, #15]
 800876e:	4619      	mov	r1, r3
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 ff39 	bl	80095e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 fa86 	bl	8008c88 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800877c:	7bfb      	ldrb	r3, [r7, #15]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d004      	beq.n	800878c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2202      	movs	r2, #2
 8008786:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800878a:	e009      	b.n	80087a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008794:	e004      	b.n	80087a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f99e 	bl	8008ada <USBD_CtlError>
  }
}
 800879e:	bf00      	nop
 80087a0:	bf00      	nop
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087b2:	2300      	movs	r3, #0
 80087b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	885b      	ldrh	r3, [r3, #2]
 80087ba:	b2da      	uxtb	r2, r3
 80087bc:	4b4e      	ldr	r3, [pc, #312]	@ (80088f8 <USBD_SetConfig+0x150>)
 80087be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80087c0:	4b4d      	ldr	r3, [pc, #308]	@ (80088f8 <USBD_SetConfig+0x150>)
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d905      	bls.n	80087d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80087c8:	6839      	ldr	r1, [r7, #0]
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f985 	bl	8008ada <USBD_CtlError>
    return USBD_FAIL;
 80087d0:	2303      	movs	r3, #3
 80087d2:	e08c      	b.n	80088ee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d002      	beq.n	80087e6 <USBD_SetConfig+0x3e>
 80087e0:	2b03      	cmp	r3, #3
 80087e2:	d029      	beq.n	8008838 <USBD_SetConfig+0x90>
 80087e4:	e075      	b.n	80088d2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80087e6:	4b44      	ldr	r3, [pc, #272]	@ (80088f8 <USBD_SetConfig+0x150>)
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d020      	beq.n	8008830 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80087ee:	4b42      	ldr	r3, [pc, #264]	@ (80088f8 <USBD_SetConfig+0x150>)
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	461a      	mov	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80087f8:	4b3f      	ldr	r3, [pc, #252]	@ (80088f8 <USBD_SetConfig+0x150>)
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	4619      	mov	r1, r3
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f7fe ffe3 	bl	80077ca <USBD_SetClassConfig>
 8008804:	4603      	mov	r3, r0
 8008806:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008808:	7bfb      	ldrb	r3, [r7, #15]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d008      	beq.n	8008820 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 f962 	bl	8008ada <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2202      	movs	r2, #2
 800881a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800881e:	e065      	b.n	80088ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fa31 	bl	8008c88 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2203      	movs	r2, #3
 800882a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800882e:	e05d      	b.n	80088ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 fa29 	bl	8008c88 <USBD_CtlSendStatus>
      break;
 8008836:	e059      	b.n	80088ec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008838:	4b2f      	ldr	r3, [pc, #188]	@ (80088f8 <USBD_SetConfig+0x150>)
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d112      	bne.n	8008866 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2202      	movs	r2, #2
 8008844:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008848:	4b2b      	ldr	r3, [pc, #172]	@ (80088f8 <USBD_SetConfig+0x150>)
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	461a      	mov	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008852:	4b29      	ldr	r3, [pc, #164]	@ (80088f8 <USBD_SetConfig+0x150>)
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	4619      	mov	r1, r3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f7fe ffd2 	bl	8007802 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 fa12 	bl	8008c88 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008864:	e042      	b.n	80088ec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008866:	4b24      	ldr	r3, [pc, #144]	@ (80088f8 <USBD_SetConfig+0x150>)
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	461a      	mov	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	429a      	cmp	r2, r3
 8008872:	d02a      	beq.n	80088ca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	b2db      	uxtb	r3, r3
 800887a:	4619      	mov	r1, r3
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7fe ffc0 	bl	8007802 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008882:	4b1d      	ldr	r3, [pc, #116]	@ (80088f8 <USBD_SetConfig+0x150>)
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	461a      	mov	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800888c:	4b1a      	ldr	r3, [pc, #104]	@ (80088f8 <USBD_SetConfig+0x150>)
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	4619      	mov	r1, r3
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7fe ff99 	bl	80077ca <USBD_SetClassConfig>
 8008898:	4603      	mov	r3, r0
 800889a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800889c:	7bfb      	ldrb	r3, [r7, #15]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00f      	beq.n	80088c2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f918 	bl	8008ada <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	4619      	mov	r1, r3
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7fe ffa5 	bl	8007802 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2202      	movs	r2, #2
 80088bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80088c0:	e014      	b.n	80088ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f9e0 	bl	8008c88 <USBD_CtlSendStatus>
      break;
 80088c8:	e010      	b.n	80088ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f9dc 	bl	8008c88 <USBD_CtlSendStatus>
      break;
 80088d0:	e00c      	b.n	80088ec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80088d2:	6839      	ldr	r1, [r7, #0]
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f900 	bl	8008ada <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088da:	4b07      	ldr	r3, [pc, #28]	@ (80088f8 <USBD_SetConfig+0x150>)
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	4619      	mov	r1, r3
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7fe ff8e 	bl	8007802 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80088e6:	2303      	movs	r3, #3
 80088e8:	73fb      	strb	r3, [r7, #15]
      break;
 80088ea:	bf00      	nop
  }

  return ret;
 80088ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	20013714 	.word	0x20013714

080088fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	88db      	ldrh	r3, [r3, #6]
 800890a:	2b01      	cmp	r3, #1
 800890c:	d004      	beq.n	8008918 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800890e:	6839      	ldr	r1, [r7, #0]
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f8e2 	bl	8008ada <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008916:	e023      	b.n	8008960 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800891e:	b2db      	uxtb	r3, r3
 8008920:	2b02      	cmp	r3, #2
 8008922:	dc02      	bgt.n	800892a <USBD_GetConfig+0x2e>
 8008924:	2b00      	cmp	r3, #0
 8008926:	dc03      	bgt.n	8008930 <USBD_GetConfig+0x34>
 8008928:	e015      	b.n	8008956 <USBD_GetConfig+0x5a>
 800892a:	2b03      	cmp	r3, #3
 800892c:	d00b      	beq.n	8008946 <USBD_GetConfig+0x4a>
 800892e:	e012      	b.n	8008956 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	3308      	adds	r3, #8
 800893a:	2201      	movs	r2, #1
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 f948 	bl	8008bd4 <USBD_CtlSendData>
        break;
 8008944:	e00c      	b.n	8008960 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	3304      	adds	r3, #4
 800894a:	2201      	movs	r2, #1
 800894c:	4619      	mov	r1, r3
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f940 	bl	8008bd4 <USBD_CtlSendData>
        break;
 8008954:	e004      	b.n	8008960 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f8be 	bl	8008ada <USBD_CtlError>
        break;
 800895e:	bf00      	nop
}
 8008960:	bf00      	nop
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008978:	b2db      	uxtb	r3, r3
 800897a:	3b01      	subs	r3, #1
 800897c:	2b02      	cmp	r3, #2
 800897e:	d81e      	bhi.n	80089be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	88db      	ldrh	r3, [r3, #6]
 8008984:	2b02      	cmp	r3, #2
 8008986:	d004      	beq.n	8008992 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008988:	6839      	ldr	r1, [r7, #0]
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 f8a5 	bl	8008ada <USBD_CtlError>
        break;
 8008990:	e01a      	b.n	80089c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2201      	movs	r2, #1
 8008996:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d005      	beq.n	80089ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	f043 0202 	orr.w	r2, r3, #2
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	330c      	adds	r3, #12
 80089b2:	2202      	movs	r2, #2
 80089b4:	4619      	mov	r1, r3
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 f90c 	bl	8008bd4 <USBD_CtlSendData>
      break;
 80089bc:	e004      	b.n	80089c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80089be:	6839      	ldr	r1, [r7, #0]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f88a 	bl	8008ada <USBD_CtlError>
      break;
 80089c6:	bf00      	nop
  }
}
 80089c8:	bf00      	nop
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	885b      	ldrh	r3, [r3, #2]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d107      	bne.n	80089f2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2201      	movs	r2, #1
 80089e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 f94c 	bl	8008c88 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80089f0:	e013      	b.n	8008a1a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	885b      	ldrh	r3, [r3, #2]
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d10b      	bne.n	8008a12 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	889b      	ldrh	r3, [r3, #4]
 80089fe:	0a1b      	lsrs	r3, r3, #8
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	b2da      	uxtb	r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f93c 	bl	8008c88 <USBD_CtlSendStatus>
}
 8008a10:	e003      	b.n	8008a1a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008a12:	6839      	ldr	r1, [r7, #0]
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 f860 	bl	8008ada <USBD_CtlError>
}
 8008a1a:	bf00      	nop
 8008a1c:	3708      	adds	r7, #8
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b082      	sub	sp, #8
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	3b01      	subs	r3, #1
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	d80b      	bhi.n	8008a52 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	885b      	ldrh	r3, [r3, #2]
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d10c      	bne.n	8008a5c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f91c 	bl	8008c88 <USBD_CtlSendStatus>
      }
      break;
 8008a50:	e004      	b.n	8008a5c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008a52:	6839      	ldr	r1, [r7, #0]
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 f840 	bl	8008ada <USBD_CtlError>
      break;
 8008a5a:	e000      	b.n	8008a5e <USBD_ClrFeature+0x3c>
      break;
 8008a5c:	bf00      	nop
  }
}
 8008a5e:	bf00      	nop
 8008a60:	3708      	adds	r7, #8
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b084      	sub	sp, #16
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	781a      	ldrb	r2, [r3, #0]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	781a      	ldrb	r2, [r3, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	f7ff fa40 	bl	8007f16 <SWAPBYTE>
 8008a96:	4603      	mov	r3, r0
 8008a98:	461a      	mov	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f7ff fa33 	bl	8007f16 <SWAPBYTE>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	3301      	adds	r3, #1
 8008abc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f7ff fa26 	bl	8007f16 <SWAPBYTE>
 8008aca:	4603      	mov	r3, r0
 8008acc:	461a      	mov	r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	80da      	strh	r2, [r3, #6]
}
 8008ad2:	bf00      	nop
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b082      	sub	sp, #8
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ae4:	2180      	movs	r1, #128	@ 0x80
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 fd14 	bl	8009514 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008aec:	2100      	movs	r1, #0
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fd10 	bl	8009514 <USBD_LL_StallEP>
}
 8008af4:	bf00      	nop
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b086      	sub	sp, #24
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d042      	beq.n	8008b98 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008b16:	6938      	ldr	r0, [r7, #16]
 8008b18:	f000 f842 	bl	8008ba0 <USBD_GetLen>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	3301      	adds	r3, #1
 8008b20:	005b      	lsls	r3, r3, #1
 8008b22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b26:	d808      	bhi.n	8008b3a <USBD_GetString+0x3e>
 8008b28:	6938      	ldr	r0, [r7, #16]
 8008b2a:	f000 f839 	bl	8008ba0 <USBD_GetLen>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	3301      	adds	r3, #1
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	005b      	lsls	r3, r3, #1
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	e001      	b.n	8008b3e <USBD_GetString+0x42>
 8008b3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008b42:	7dfb      	ldrb	r3, [r7, #23]
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	4413      	add	r3, r2
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	7812      	ldrb	r2, [r2, #0]
 8008b4c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b4e:	7dfb      	ldrb	r3, [r7, #23]
 8008b50:	3301      	adds	r3, #1
 8008b52:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008b54:	7dfb      	ldrb	r3, [r7, #23]
 8008b56:	68ba      	ldr	r2, [r7, #8]
 8008b58:	4413      	add	r3, r2
 8008b5a:	2203      	movs	r2, #3
 8008b5c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b5e:	7dfb      	ldrb	r3, [r7, #23]
 8008b60:	3301      	adds	r3, #1
 8008b62:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008b64:	e013      	b.n	8008b8e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008b66:	7dfb      	ldrb	r3, [r7, #23]
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	4413      	add	r3, r2
 8008b6c:	693a      	ldr	r2, [r7, #16]
 8008b6e:	7812      	ldrb	r2, [r2, #0]
 8008b70:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	3301      	adds	r3, #1
 8008b76:	613b      	str	r3, [r7, #16]
    idx++;
 8008b78:	7dfb      	ldrb	r3, [r7, #23]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008b7e:	7dfb      	ldrb	r3, [r7, #23]
 8008b80:	68ba      	ldr	r2, [r7, #8]
 8008b82:	4413      	add	r3, r2
 8008b84:	2200      	movs	r2, #0
 8008b86:	701a      	strb	r2, [r3, #0]
    idx++;
 8008b88:	7dfb      	ldrb	r3, [r7, #23]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1e7      	bne.n	8008b66 <USBD_GetString+0x6a>
 8008b96:	e000      	b.n	8008b9a <USBD_GetString+0x9e>
    return;
 8008b98:	bf00      	nop
  }
}
 8008b9a:	3718      	adds	r7, #24
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b085      	sub	sp, #20
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008bb0:	e005      	b.n	8008bbe <USBD_GetLen+0x1e>
  {
    len++;
 8008bb2:	7bfb      	ldrb	r3, [r7, #15]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1f5      	bne.n	8008bb2 <USBD_GetLen+0x12>
  }

  return len;
 8008bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3714      	adds	r7, #20
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2202      	movs	r2, #2
 8008be4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f000 fd13 	bl	8009626 <USBD_LL_Transmit>

  return USBD_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b084      	sub	sp, #16
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	60f8      	str	r0, [r7, #12]
 8008c12:	60b9      	str	r1, [r7, #8]
 8008c14:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	2100      	movs	r1, #0
 8008c1c:	68f8      	ldr	r0, [r7, #12]
 8008c1e:	f000 fd02 	bl	8009626 <USBD_LL_Transmit>

  return USBD_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2203      	movs	r2, #3
 8008c3c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	68ba      	ldr	r2, [r7, #8]
 8008c54:	2100      	movs	r1, #0
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f000 fd06 	bl	8009668 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b084      	sub	sp, #16
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	60f8      	str	r0, [r7, #12]
 8008c6e:	60b9      	str	r1, [r7, #8]
 8008c70:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	2100      	movs	r1, #0
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f000 fcf5 	bl	8009668 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3710      	adds	r7, #16
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2204      	movs	r2, #4
 8008c94:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c98:	2300      	movs	r3, #0
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fcc1 	bl	8009626 <USBD_LL_Transmit>

  return USBD_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3708      	adds	r7, #8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b082      	sub	sp, #8
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2205      	movs	r2, #5
 8008cba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fccf 	bl	8009668 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008cd8:	2200      	movs	r2, #0
 8008cda:	4912      	ldr	r1, [pc, #72]	@ (8008d24 <MX_USB_DEVICE_Init+0x50>)
 8008cdc:	4812      	ldr	r0, [pc, #72]	@ (8008d28 <MX_USB_DEVICE_Init+0x54>)
 8008cde:	f7fe fcf7 	bl	80076d0 <USBD_Init>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d001      	beq.n	8008cec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ce8:	f7f8 fdfe 	bl	80018e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008cec:	490f      	ldr	r1, [pc, #60]	@ (8008d2c <MX_USB_DEVICE_Init+0x58>)
 8008cee:	480e      	ldr	r0, [pc, #56]	@ (8008d28 <MX_USB_DEVICE_Init+0x54>)
 8008cf0:	f7fe fd1e 	bl	8007730 <USBD_RegisterClass>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d001      	beq.n	8008cfe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008cfa:	f7f8 fdf5 	bl	80018e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008cfe:	490c      	ldr	r1, [pc, #48]	@ (8008d30 <MX_USB_DEVICE_Init+0x5c>)
 8008d00:	4809      	ldr	r0, [pc, #36]	@ (8008d28 <MX_USB_DEVICE_Init+0x54>)
 8008d02:	f7fe fc15 	bl	8007530 <USBD_CDC_RegisterInterface>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d001      	beq.n	8008d10 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d0c:	f7f8 fdec 	bl	80018e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d10:	4805      	ldr	r0, [pc, #20]	@ (8008d28 <MX_USB_DEVICE_Init+0x54>)
 8008d12:	f7fe fd43 	bl	800779c <USBD_Start>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d001      	beq.n	8008d20 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d1c:	f7f8 fde4 	bl	80018e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d20:	bf00      	nop
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	200088a8 	.word	0x200088a8
 8008d28:	20013718 	.word	0x20013718
 8008d2c:	20008814 	.word	0x20008814
 8008d30:	20008894 	.word	0x20008894

08008d34 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008d38:	2200      	movs	r2, #0
 8008d3a:	4905      	ldr	r1, [pc, #20]	@ (8008d50 <CDC_Init_FS+0x1c>)
 8008d3c:	4805      	ldr	r0, [pc, #20]	@ (8008d54 <CDC_Init_FS+0x20>)
 8008d3e:	f7fe fc11 	bl	8007564 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008d42:	4905      	ldr	r1, [pc, #20]	@ (8008d58 <CDC_Init_FS+0x24>)
 8008d44:	4803      	ldr	r0, [pc, #12]	@ (8008d54 <CDC_Init_FS+0x20>)
 8008d46:	f7fe fc2f 	bl	80075a8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008d4a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	20014200 	.word	0x20014200
 8008d54:	20013718 	.word	0x20013718
 8008d58:	20013a00 	.word	0x20013a00

08008d5c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008d60:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	4603      	mov	r3, r0
 8008d74:	6039      	str	r1, [r7, #0]
 8008d76:	71fb      	strb	r3, [r7, #7]
 8008d78:	4613      	mov	r3, r2
 8008d7a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008d7c:	79fb      	ldrb	r3, [r7, #7]
 8008d7e:	2b23      	cmp	r3, #35	@ 0x23
 8008d80:	d84a      	bhi.n	8008e18 <CDC_Control_FS+0xac>
 8008d82:	a201      	add	r2, pc, #4	@ (adr r2, 8008d88 <CDC_Control_FS+0x1c>)
 8008d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d88:	08008e19 	.word	0x08008e19
 8008d8c:	08008e19 	.word	0x08008e19
 8008d90:	08008e19 	.word	0x08008e19
 8008d94:	08008e19 	.word	0x08008e19
 8008d98:	08008e19 	.word	0x08008e19
 8008d9c:	08008e19 	.word	0x08008e19
 8008da0:	08008e19 	.word	0x08008e19
 8008da4:	08008e19 	.word	0x08008e19
 8008da8:	08008e19 	.word	0x08008e19
 8008dac:	08008e19 	.word	0x08008e19
 8008db0:	08008e19 	.word	0x08008e19
 8008db4:	08008e19 	.word	0x08008e19
 8008db8:	08008e19 	.word	0x08008e19
 8008dbc:	08008e19 	.word	0x08008e19
 8008dc0:	08008e19 	.word	0x08008e19
 8008dc4:	08008e19 	.word	0x08008e19
 8008dc8:	08008e19 	.word	0x08008e19
 8008dcc:	08008e19 	.word	0x08008e19
 8008dd0:	08008e19 	.word	0x08008e19
 8008dd4:	08008e19 	.word	0x08008e19
 8008dd8:	08008e19 	.word	0x08008e19
 8008ddc:	08008e19 	.word	0x08008e19
 8008de0:	08008e19 	.word	0x08008e19
 8008de4:	08008e19 	.word	0x08008e19
 8008de8:	08008e19 	.word	0x08008e19
 8008dec:	08008e19 	.word	0x08008e19
 8008df0:	08008e19 	.word	0x08008e19
 8008df4:	08008e19 	.word	0x08008e19
 8008df8:	08008e19 	.word	0x08008e19
 8008dfc:	08008e19 	.word	0x08008e19
 8008e00:	08008e19 	.word	0x08008e19
 8008e04:	08008e19 	.word	0x08008e19
 8008e08:	08008e19 	.word	0x08008e19
 8008e0c:	08008e19 	.word	0x08008e19
 8008e10:	08008e19 	.word	0x08008e19
 8008e14:	08008e19 	.word	0x08008e19
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008e18:	bf00      	nop
  }

  return (USBD_OK);
 8008e1a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008e32:	b672      	cpsid	i
}
 8008e34:	bf00      	nop
  /* USER CODE BEGIN 6 */
    __disable_irq();

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008e36:	6879      	ldr	r1, [r7, #4]
 8008e38:	480f      	ldr	r0, [pc, #60]	@ (8008e78 <CDC_Receive_FS+0x50>)
 8008e3a:	f7fe fbb5 	bl	80075a8 <USBD_CDC_SetRxBuffer>

  if (*Len < CMD_BUFFER_SIZE)
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2b09      	cmp	r3, #9
 8008e44:	d80e      	bhi.n	8008e64 <CDC_Receive_FS+0x3c>
      {
          memcpy((void*)usbCmdBuffer, Buf, *Len);
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	6879      	ldr	r1, [r7, #4]
 8008e4e:	480b      	ldr	r0, [pc, #44]	@ (8008e7c <CDC_Receive_FS+0x54>)
 8008e50:	f001 fe26 	bl	800aaa0 <memcpy>
          usbCmdBuffer[*Len] = '\0'; // Asegurarse de terminar con nulo para trabajar con strings
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a08      	ldr	r2, [pc, #32]	@ (8008e7c <CDC_Receive_FS+0x54>)
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	54d1      	strb	r1, [r2, r3]
          newCommandFlag = 1;
 8008e5e:	4b08      	ldr	r3, [pc, #32]	@ (8008e80 <CDC_Receive_FS+0x58>)
 8008e60:	2201      	movs	r2, #1
 8008e62:	701a      	strb	r2, [r3, #0]
      }

  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008e64:	4804      	ldr	r0, [pc, #16]	@ (8008e78 <CDC_Receive_FS+0x50>)
 8008e66:	f7fe fbfd 	bl	8007664 <USBD_CDC_ReceivePacket>
  __ASM volatile ("cpsie i" : : : "memory");
 8008e6a:	b662      	cpsie	i
}
 8008e6c:	bf00      	nop
  __enable_irq();

  return (USBD_OK);
 8008e6e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	20013718 	.word	0x20013718
 8008e7c:	200139f4 	.word	0x200139f4
 8008e80:	200139fe 	.word	0x200139fe

08008e84 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008e90:	2300      	movs	r3, #0
 8008e92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008e94:	4b0d      	ldr	r3, [pc, #52]	@ (8008ecc <CDC_Transmit_FS+0x48>)
 8008e96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008e9a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d001      	beq.n	8008eaa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e00b      	b.n	8008ec2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008eaa:	887b      	ldrh	r3, [r7, #2]
 8008eac:	461a      	mov	r2, r3
 8008eae:	6879      	ldr	r1, [r7, #4]
 8008eb0:	4806      	ldr	r0, [pc, #24]	@ (8008ecc <CDC_Transmit_FS+0x48>)
 8008eb2:	f7fe fb57 	bl	8007564 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008eb6:	4805      	ldr	r0, [pc, #20]	@ (8008ecc <CDC_Transmit_FS+0x48>)
 8008eb8:	f7fe fb94 	bl	80075e4 <USBD_CDC_TransmitPacket>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	20013718 	.word	0x20013718

08008ed0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b087      	sub	sp, #28
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	4613      	mov	r3, r2
 8008edc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008ee2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	371c      	adds	r7, #28
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
	...

08008ef4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	4603      	mov	r3, r0
 8008efc:	6039      	str	r1, [r7, #0]
 8008efe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	2212      	movs	r2, #18
 8008f04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008f06:	4b03      	ldr	r3, [pc, #12]	@ (8008f14 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr
 8008f14:	200088c4 	.word	0x200088c4

08008f18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	4603      	mov	r3, r0
 8008f20:	6039      	str	r1, [r7, #0]
 8008f22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	2204      	movs	r2, #4
 8008f28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f2a:	4b03      	ldr	r3, [pc, #12]	@ (8008f38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr
 8008f38:	200088d8 	.word	0x200088d8

08008f3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	4603      	mov	r3, r0
 8008f44:	6039      	str	r1, [r7, #0]
 8008f46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f48:	79fb      	ldrb	r3, [r7, #7]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d105      	bne.n	8008f5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	4907      	ldr	r1, [pc, #28]	@ (8008f70 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f52:	4808      	ldr	r0, [pc, #32]	@ (8008f74 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f54:	f7ff fdd2 	bl	8008afc <USBD_GetString>
 8008f58:	e004      	b.n	8008f64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	4904      	ldr	r1, [pc, #16]	@ (8008f70 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f5e:	4805      	ldr	r0, [pc, #20]	@ (8008f74 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f60:	f7ff fdcc 	bl	8008afc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f64:	4b02      	ldr	r3, [pc, #8]	@ (8008f70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3708      	adds	r7, #8
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	20014a00 	.word	0x20014a00
 8008f74:	0800ab04 	.word	0x0800ab04

08008f78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	4603      	mov	r3, r0
 8008f80:	6039      	str	r1, [r7, #0]
 8008f82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008f84:	683a      	ldr	r2, [r7, #0]
 8008f86:	4904      	ldr	r1, [pc, #16]	@ (8008f98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008f88:	4804      	ldr	r0, [pc, #16]	@ (8008f9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008f8a:	f7ff fdb7 	bl	8008afc <USBD_GetString>
  return USBD_StrDesc;
 8008f8e:	4b02      	ldr	r3, [pc, #8]	@ (8008f98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3708      	adds	r7, #8
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	20014a00 	.word	0x20014a00
 8008f9c:	0800ab1c 	.word	0x0800ab1c

08008fa0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	6039      	str	r1, [r7, #0]
 8008faa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	221a      	movs	r2, #26
 8008fb0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008fb2:	f000 f843 	bl	800903c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008fb6:	4b02      	ldr	r3, [pc, #8]	@ (8008fc0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	200088dc 	.word	0x200088dc

08008fc4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	4603      	mov	r3, r0
 8008fcc:	6039      	str	r1, [r7, #0]
 8008fce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008fd0:	79fb      	ldrb	r3, [r7, #7]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d105      	bne.n	8008fe2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	4907      	ldr	r1, [pc, #28]	@ (8008ff8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008fda:	4808      	ldr	r0, [pc, #32]	@ (8008ffc <USBD_FS_ConfigStrDescriptor+0x38>)
 8008fdc:	f7ff fd8e 	bl	8008afc <USBD_GetString>
 8008fe0:	e004      	b.n	8008fec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008fe2:	683a      	ldr	r2, [r7, #0]
 8008fe4:	4904      	ldr	r1, [pc, #16]	@ (8008ff8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008fe6:	4805      	ldr	r0, [pc, #20]	@ (8008ffc <USBD_FS_ConfigStrDescriptor+0x38>)
 8008fe8:	f7ff fd88 	bl	8008afc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fec:	4b02      	ldr	r3, [pc, #8]	@ (8008ff8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	20014a00 	.word	0x20014a00
 8008ffc:	0800ab30 	.word	0x0800ab30

08009000 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	4603      	mov	r3, r0
 8009008:	6039      	str	r1, [r7, #0]
 800900a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800900c:	79fb      	ldrb	r3, [r7, #7]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d105      	bne.n	800901e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009012:	683a      	ldr	r2, [r7, #0]
 8009014:	4907      	ldr	r1, [pc, #28]	@ (8009034 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009016:	4808      	ldr	r0, [pc, #32]	@ (8009038 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009018:	f7ff fd70 	bl	8008afc <USBD_GetString>
 800901c:	e004      	b.n	8009028 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800901e:	683a      	ldr	r2, [r7, #0]
 8009020:	4904      	ldr	r1, [pc, #16]	@ (8009034 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009022:	4805      	ldr	r0, [pc, #20]	@ (8009038 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009024:	f7ff fd6a 	bl	8008afc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009028:	4b02      	ldr	r3, [pc, #8]	@ (8009034 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800902a:	4618      	mov	r0, r3
 800902c:	3708      	adds	r7, #8
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	20014a00 	.word	0x20014a00
 8009038:	0800ab3c 	.word	0x0800ab3c

0800903c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009042:	4b0f      	ldr	r3, [pc, #60]	@ (8009080 <Get_SerialNum+0x44>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009048:	4b0e      	ldr	r3, [pc, #56]	@ (8009084 <Get_SerialNum+0x48>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800904e:	4b0e      	ldr	r3, [pc, #56]	@ (8009088 <Get_SerialNum+0x4c>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4413      	add	r3, r2
 800905a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d009      	beq.n	8009076 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009062:	2208      	movs	r2, #8
 8009064:	4909      	ldr	r1, [pc, #36]	@ (800908c <Get_SerialNum+0x50>)
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	f000 f814 	bl	8009094 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800906c:	2204      	movs	r2, #4
 800906e:	4908      	ldr	r1, [pc, #32]	@ (8009090 <Get_SerialNum+0x54>)
 8009070:	68b8      	ldr	r0, [r7, #8]
 8009072:	f000 f80f 	bl	8009094 <IntToUnicode>
  }
}
 8009076:	bf00      	nop
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	1fff7a10 	.word	0x1fff7a10
 8009084:	1fff7a14 	.word	0x1fff7a14
 8009088:	1fff7a18 	.word	0x1fff7a18
 800908c:	200088de 	.word	0x200088de
 8009090:	200088ee 	.word	0x200088ee

08009094 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009094:	b480      	push	{r7}
 8009096:	b087      	sub	sp, #28
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	4613      	mov	r3, r2
 80090a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80090a2:	2300      	movs	r3, #0
 80090a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80090a6:	2300      	movs	r3, #0
 80090a8:	75fb      	strb	r3, [r7, #23]
 80090aa:	e027      	b.n	80090fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	0f1b      	lsrs	r3, r3, #28
 80090b0:	2b09      	cmp	r3, #9
 80090b2:	d80b      	bhi.n	80090cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	0f1b      	lsrs	r3, r3, #28
 80090b8:	b2da      	uxtb	r2, r3
 80090ba:	7dfb      	ldrb	r3, [r7, #23]
 80090bc:	005b      	lsls	r3, r3, #1
 80090be:	4619      	mov	r1, r3
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	440b      	add	r3, r1
 80090c4:	3230      	adds	r2, #48	@ 0x30
 80090c6:	b2d2      	uxtb	r2, r2
 80090c8:	701a      	strb	r2, [r3, #0]
 80090ca:	e00a      	b.n	80090e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	0f1b      	lsrs	r3, r3, #28
 80090d0:	b2da      	uxtb	r2, r3
 80090d2:	7dfb      	ldrb	r3, [r7, #23]
 80090d4:	005b      	lsls	r3, r3, #1
 80090d6:	4619      	mov	r1, r3
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	440b      	add	r3, r1
 80090dc:	3237      	adds	r2, #55	@ 0x37
 80090de:	b2d2      	uxtb	r2, r2
 80090e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	011b      	lsls	r3, r3, #4
 80090e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80090e8:	7dfb      	ldrb	r3, [r7, #23]
 80090ea:	005b      	lsls	r3, r3, #1
 80090ec:	3301      	adds	r3, #1
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	4413      	add	r3, r2
 80090f2:	2200      	movs	r2, #0
 80090f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80090f6:	7dfb      	ldrb	r3, [r7, #23]
 80090f8:	3301      	adds	r3, #1
 80090fa:	75fb      	strb	r3, [r7, #23]
 80090fc:	7dfa      	ldrb	r2, [r7, #23]
 80090fe:	79fb      	ldrb	r3, [r7, #7]
 8009100:	429a      	cmp	r2, r3
 8009102:	d3d3      	bcc.n	80090ac <IntToUnicode+0x18>
  }
}
 8009104:	bf00      	nop
 8009106:	bf00      	nop
 8009108:	371c      	adds	r7, #28
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr
	...

08009114 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b08a      	sub	sp, #40	@ 0x28
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800911c:	f107 0314 	add.w	r3, r7, #20
 8009120:	2200      	movs	r2, #0
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	605a      	str	r2, [r3, #4]
 8009126:	609a      	str	r2, [r3, #8]
 8009128:	60da      	str	r2, [r3, #12]
 800912a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009134:	d147      	bne.n	80091c6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009136:	2300      	movs	r3, #0
 8009138:	613b      	str	r3, [r7, #16]
 800913a:	4b25      	ldr	r3, [pc, #148]	@ (80091d0 <HAL_PCD_MspInit+0xbc>)
 800913c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800913e:	4a24      	ldr	r2, [pc, #144]	@ (80091d0 <HAL_PCD_MspInit+0xbc>)
 8009140:	f043 0301 	orr.w	r3, r3, #1
 8009144:	6313      	str	r3, [r2, #48]	@ 0x30
 8009146:	4b22      	ldr	r3, [pc, #136]	@ (80091d0 <HAL_PCD_MspInit+0xbc>)
 8009148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800914a:	f003 0301 	and.w	r3, r3, #1
 800914e:	613b      	str	r3, [r7, #16]
 8009150:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009152:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009158:	2300      	movs	r3, #0
 800915a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800915c:	2300      	movs	r3, #0
 800915e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009160:	f107 0314 	add.w	r3, r7, #20
 8009164:	4619      	mov	r1, r3
 8009166:	481b      	ldr	r0, [pc, #108]	@ (80091d4 <HAL_PCD_MspInit+0xc0>)
 8009168:	f7f9 fc30 	bl	80029cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800916c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009172:	2302      	movs	r3, #2
 8009174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009176:	2300      	movs	r3, #0
 8009178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800917a:	2300      	movs	r3, #0
 800917c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800917e:	230a      	movs	r3, #10
 8009180:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009182:	f107 0314 	add.w	r3, r7, #20
 8009186:	4619      	mov	r1, r3
 8009188:	4812      	ldr	r0, [pc, #72]	@ (80091d4 <HAL_PCD_MspInit+0xc0>)
 800918a:	f7f9 fc1f 	bl	80029cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800918e:	4b10      	ldr	r3, [pc, #64]	@ (80091d0 <HAL_PCD_MspInit+0xbc>)
 8009190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009192:	4a0f      	ldr	r2, [pc, #60]	@ (80091d0 <HAL_PCD_MspInit+0xbc>)
 8009194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009198:	6353      	str	r3, [r2, #52]	@ 0x34
 800919a:	2300      	movs	r3, #0
 800919c:	60fb      	str	r3, [r7, #12]
 800919e:	4b0c      	ldr	r3, [pc, #48]	@ (80091d0 <HAL_PCD_MspInit+0xbc>)
 80091a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091a2:	4a0b      	ldr	r2, [pc, #44]	@ (80091d0 <HAL_PCD_MspInit+0xbc>)
 80091a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80091a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80091aa:	4b09      	ldr	r3, [pc, #36]	@ (80091d0 <HAL_PCD_MspInit+0xbc>)
 80091ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091b2:	60fb      	str	r3, [r7, #12]
 80091b4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80091b6:	2200      	movs	r2, #0
 80091b8:	2100      	movs	r1, #0
 80091ba:	2043      	movs	r0, #67	@ 0x43
 80091bc:	f7f9 fbcf 	bl	800295e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80091c0:	2043      	movs	r0, #67	@ 0x43
 80091c2:	f7f9 fbe8 	bl	8002996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80091c6:	bf00      	nop
 80091c8:	3728      	adds	r7, #40	@ 0x28
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	40023800 	.word	0x40023800
 80091d4:	40020000 	.word	0x40020000

080091d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80091ec:	4619      	mov	r1, r3
 80091ee:	4610      	mov	r0, r2
 80091f0:	f7fe fb21 	bl	8007836 <USBD_LL_SetupStage>
}
 80091f4:	bf00      	nop
 80091f6:	3708      	adds	r7, #8
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b082      	sub	sp, #8
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	460b      	mov	r3, r1
 8009206:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800920e:	78fa      	ldrb	r2, [r7, #3]
 8009210:	6879      	ldr	r1, [r7, #4]
 8009212:	4613      	mov	r3, r2
 8009214:	00db      	lsls	r3, r3, #3
 8009216:	4413      	add	r3, r2
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	440b      	add	r3, r1
 800921c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	78fb      	ldrb	r3, [r7, #3]
 8009224:	4619      	mov	r1, r3
 8009226:	f7fe fb5b 	bl	80078e0 <USBD_LL_DataOutStage>
}
 800922a:	bf00      	nop
 800922c:	3708      	adds	r7, #8
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b082      	sub	sp, #8
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	460b      	mov	r3, r1
 800923c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009244:	78fa      	ldrb	r2, [r7, #3]
 8009246:	6879      	ldr	r1, [r7, #4]
 8009248:	4613      	mov	r3, r2
 800924a:	00db      	lsls	r3, r3, #3
 800924c:	4413      	add	r3, r2
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	440b      	add	r3, r1
 8009252:	3320      	adds	r3, #32
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	78fb      	ldrb	r3, [r7, #3]
 8009258:	4619      	mov	r1, r3
 800925a:	f7fe fbf4 	bl	8007a46 <USBD_LL_DataInStage>
}
 800925e:	bf00      	nop
 8009260:	3708      	adds	r7, #8
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b082      	sub	sp, #8
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009274:	4618      	mov	r0, r3
 8009276:	f7fe fd2e 	bl	8007cd6 <USBD_LL_SOF>
}
 800927a:	bf00      	nop
 800927c:	3708      	adds	r7, #8
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b084      	sub	sp, #16
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800928a:	2301      	movs	r3, #1
 800928c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	79db      	ldrb	r3, [r3, #7]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d102      	bne.n	800929c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009296:	2300      	movs	r3, #0
 8009298:	73fb      	strb	r3, [r7, #15]
 800929a:	e008      	b.n	80092ae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	79db      	ldrb	r3, [r3, #7]
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d102      	bne.n	80092aa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80092a4:	2301      	movs	r3, #1
 80092a6:	73fb      	strb	r3, [r7, #15]
 80092a8:	e001      	b.n	80092ae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80092aa:	f7f8 fb1d 	bl	80018e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092b4:	7bfa      	ldrb	r2, [r7, #15]
 80092b6:	4611      	mov	r1, r2
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7fe fcc8 	bl	8007c4e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7fe fc70 	bl	8007baa <USBD_LL_Reset>
}
 80092ca:	bf00      	nop
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
	...

080092d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7fe fcc3 	bl	8007c6e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	6812      	ldr	r2, [r2, #0]
 80092f6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80092fa:	f043 0301 	orr.w	r3, r3, #1
 80092fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	7adb      	ldrb	r3, [r3, #11]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d005      	beq.n	8009314 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009308:	4b04      	ldr	r3, [pc, #16]	@ (800931c <HAL_PCD_SuspendCallback+0x48>)
 800930a:	691b      	ldr	r3, [r3, #16]
 800930c:	4a03      	ldr	r2, [pc, #12]	@ (800931c <HAL_PCD_SuspendCallback+0x48>)
 800930e:	f043 0306 	orr.w	r3, r3, #6
 8009312:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009314:	bf00      	nop
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	e000ed00 	.word	0xe000ed00

08009320 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800932e:	4618      	mov	r0, r3
 8009330:	f7fe fcb9 	bl	8007ca6 <USBD_LL_Resume>
}
 8009334:	bf00      	nop
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	460b      	mov	r3, r1
 8009346:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800934e:	78fa      	ldrb	r2, [r7, #3]
 8009350:	4611      	mov	r1, r2
 8009352:	4618      	mov	r0, r3
 8009354:	f7fe fd11 	bl	8007d7a <USBD_LL_IsoOUTIncomplete>
}
 8009358:	bf00      	nop
 800935a:	3708      	adds	r7, #8
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	460b      	mov	r3, r1
 800936a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009372:	78fa      	ldrb	r2, [r7, #3]
 8009374:	4611      	mov	r1, r2
 8009376:	4618      	mov	r0, r3
 8009378:	f7fe fccd 	bl	8007d16 <USBD_LL_IsoINIncomplete>
}
 800937c:	bf00      	nop
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009392:	4618      	mov	r0, r3
 8009394:	f7fe fd23 	bl	8007dde <USBD_LL_DevConnected>
}
 8009398:	bf00      	nop
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7fe fd20 	bl	8007df4 <USBD_LL_DevDisconnected>
}
 80093b4:	bf00      	nop
 80093b6:	3708      	adds	r7, #8
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d13c      	bne.n	8009446 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80093cc:	4a20      	ldr	r2, [pc, #128]	@ (8009450 <USBD_LL_Init+0x94>)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4a1e      	ldr	r2, [pc, #120]	@ (8009450 <USBD_LL_Init+0x94>)
 80093d8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80093dc:	4b1c      	ldr	r3, [pc, #112]	@ (8009450 <USBD_LL_Init+0x94>)
 80093de:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80093e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80093e4:	4b1a      	ldr	r3, [pc, #104]	@ (8009450 <USBD_LL_Init+0x94>)
 80093e6:	2204      	movs	r2, #4
 80093e8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80093ea:	4b19      	ldr	r3, [pc, #100]	@ (8009450 <USBD_LL_Init+0x94>)
 80093ec:	2202      	movs	r2, #2
 80093ee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80093f0:	4b17      	ldr	r3, [pc, #92]	@ (8009450 <USBD_LL_Init+0x94>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80093f6:	4b16      	ldr	r3, [pc, #88]	@ (8009450 <USBD_LL_Init+0x94>)
 80093f8:	2202      	movs	r2, #2
 80093fa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80093fc:	4b14      	ldr	r3, [pc, #80]	@ (8009450 <USBD_LL_Init+0x94>)
 80093fe:	2200      	movs	r2, #0
 8009400:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009402:	4b13      	ldr	r3, [pc, #76]	@ (8009450 <USBD_LL_Init+0x94>)
 8009404:	2200      	movs	r2, #0
 8009406:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009408:	4b11      	ldr	r3, [pc, #68]	@ (8009450 <USBD_LL_Init+0x94>)
 800940a:	2200      	movs	r2, #0
 800940c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800940e:	4b10      	ldr	r3, [pc, #64]	@ (8009450 <USBD_LL_Init+0x94>)
 8009410:	2200      	movs	r2, #0
 8009412:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009414:	4b0e      	ldr	r3, [pc, #56]	@ (8009450 <USBD_LL_Init+0x94>)
 8009416:	2200      	movs	r2, #0
 8009418:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800941a:	480d      	ldr	r0, [pc, #52]	@ (8009450 <USBD_LL_Init+0x94>)
 800941c:	f7f9 fca4 	bl	8002d68 <HAL_PCD_Init>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d001      	beq.n	800942a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009426:	f7f8 fa5f 	bl	80018e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800942a:	2180      	movs	r1, #128	@ 0x80
 800942c:	4808      	ldr	r0, [pc, #32]	@ (8009450 <USBD_LL_Init+0x94>)
 800942e:	f7fa fed0 	bl	80041d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009432:	2240      	movs	r2, #64	@ 0x40
 8009434:	2100      	movs	r1, #0
 8009436:	4806      	ldr	r0, [pc, #24]	@ (8009450 <USBD_LL_Init+0x94>)
 8009438:	f7fa fe84 	bl	8004144 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800943c:	2280      	movs	r2, #128	@ 0x80
 800943e:	2101      	movs	r1, #1
 8009440:	4803      	ldr	r0, [pc, #12]	@ (8009450 <USBD_LL_Init+0x94>)
 8009442:	f7fa fe7f 	bl	8004144 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3708      	adds	r7, #8
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	20014c00 	.word	0x20014c00

08009454 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800945c:	2300      	movs	r3, #0
 800945e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009460:	2300      	movs	r3, #0
 8009462:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800946a:	4618      	mov	r0, r3
 800946c:	f7f9 fd8b 	bl	8002f86 <HAL_PCD_Start>
 8009470:	4603      	mov	r3, r0
 8009472:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009474:	7bfb      	ldrb	r3, [r7, #15]
 8009476:	4618      	mov	r0, r3
 8009478:	f000 f942 	bl	8009700 <USBD_Get_USB_Status>
 800947c:	4603      	mov	r3, r0
 800947e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009480:	7bbb      	ldrb	r3, [r7, #14]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b084      	sub	sp, #16
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
 8009492:	4608      	mov	r0, r1
 8009494:	4611      	mov	r1, r2
 8009496:	461a      	mov	r2, r3
 8009498:	4603      	mov	r3, r0
 800949a:	70fb      	strb	r3, [r7, #3]
 800949c:	460b      	mov	r3, r1
 800949e:	70bb      	strb	r3, [r7, #2]
 80094a0:	4613      	mov	r3, r2
 80094a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094a4:	2300      	movs	r3, #0
 80094a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094a8:	2300      	movs	r3, #0
 80094aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80094b2:	78bb      	ldrb	r3, [r7, #2]
 80094b4:	883a      	ldrh	r2, [r7, #0]
 80094b6:	78f9      	ldrb	r1, [r7, #3]
 80094b8:	f7fa fa5f 	bl	800397a <HAL_PCD_EP_Open>
 80094bc:	4603      	mov	r3, r0
 80094be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094c0:	7bfb      	ldrb	r3, [r7, #15]
 80094c2:	4618      	mov	r0, r3
 80094c4:	f000 f91c 	bl	8009700 <USBD_Get_USB_Status>
 80094c8:	4603      	mov	r3, r0
 80094ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b084      	sub	sp, #16
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	460b      	mov	r3, r1
 80094e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094e2:	2300      	movs	r3, #0
 80094e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094e6:	2300      	movs	r3, #0
 80094e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80094f0:	78fa      	ldrb	r2, [r7, #3]
 80094f2:	4611      	mov	r1, r2
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7fa faaa 	bl	8003a4e <HAL_PCD_EP_Close>
 80094fa:	4603      	mov	r3, r0
 80094fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094fe:	7bfb      	ldrb	r3, [r7, #15]
 8009500:	4618      	mov	r0, r3
 8009502:	f000 f8fd 	bl	8009700 <USBD_Get_USB_Status>
 8009506:	4603      	mov	r3, r0
 8009508:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800950a:	7bbb      	ldrb	r3, [r7, #14]
}
 800950c:	4618      	mov	r0, r3
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	460b      	mov	r3, r1
 800951e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009520:	2300      	movs	r3, #0
 8009522:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009524:	2300      	movs	r3, #0
 8009526:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800952e:	78fa      	ldrb	r2, [r7, #3]
 8009530:	4611      	mov	r1, r2
 8009532:	4618      	mov	r0, r3
 8009534:	f7fa fb62 	bl	8003bfc <HAL_PCD_EP_SetStall>
 8009538:	4603      	mov	r3, r0
 800953a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800953c:	7bfb      	ldrb	r3, [r7, #15]
 800953e:	4618      	mov	r0, r3
 8009540:	f000 f8de 	bl	8009700 <USBD_Get_USB_Status>
 8009544:	4603      	mov	r3, r0
 8009546:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009548:	7bbb      	ldrb	r3, [r7, #14]
}
 800954a:	4618      	mov	r0, r3
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b084      	sub	sp, #16
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
 800955a:	460b      	mov	r3, r1
 800955c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009562:	2300      	movs	r3, #0
 8009564:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800956c:	78fa      	ldrb	r2, [r7, #3]
 800956e:	4611      	mov	r1, r2
 8009570:	4618      	mov	r0, r3
 8009572:	f7fa fba6 	bl	8003cc2 <HAL_PCD_EP_ClrStall>
 8009576:	4603      	mov	r3, r0
 8009578:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800957a:	7bfb      	ldrb	r3, [r7, #15]
 800957c:	4618      	mov	r0, r3
 800957e:	f000 f8bf 	bl	8009700 <USBD_Get_USB_Status>
 8009582:	4603      	mov	r3, r0
 8009584:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009586:	7bbb      	ldrb	r3, [r7, #14]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	460b      	mov	r3, r1
 800959a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80095a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	da0b      	bge.n	80095c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80095ac:	78fb      	ldrb	r3, [r7, #3]
 80095ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095b2:	68f9      	ldr	r1, [r7, #12]
 80095b4:	4613      	mov	r3, r2
 80095b6:	00db      	lsls	r3, r3, #3
 80095b8:	4413      	add	r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	440b      	add	r3, r1
 80095be:	3316      	adds	r3, #22
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	e00b      	b.n	80095dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80095c4:	78fb      	ldrb	r3, [r7, #3]
 80095c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095ca:	68f9      	ldr	r1, [r7, #12]
 80095cc:	4613      	mov	r3, r2
 80095ce:	00db      	lsls	r3, r3, #3
 80095d0:	4413      	add	r3, r2
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	440b      	add	r3, r1
 80095d6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80095da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3714      	adds	r7, #20
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	460b      	mov	r3, r1
 80095f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095f4:	2300      	movs	r3, #0
 80095f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095f8:	2300      	movs	r3, #0
 80095fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009602:	78fa      	ldrb	r2, [r7, #3]
 8009604:	4611      	mov	r1, r2
 8009606:	4618      	mov	r0, r3
 8009608:	f7fa f993 	bl	8003932 <HAL_PCD_SetAddress>
 800960c:	4603      	mov	r3, r0
 800960e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009610:	7bfb      	ldrb	r3, [r7, #15]
 8009612:	4618      	mov	r0, r3
 8009614:	f000 f874 	bl	8009700 <USBD_Get_USB_Status>
 8009618:	4603      	mov	r3, r0
 800961a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800961c:	7bbb      	ldrb	r3, [r7, #14]
}
 800961e:	4618      	mov	r0, r3
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009626:	b580      	push	{r7, lr}
 8009628:	b086      	sub	sp, #24
 800962a:	af00      	add	r7, sp, #0
 800962c:	60f8      	str	r0, [r7, #12]
 800962e:	607a      	str	r2, [r7, #4]
 8009630:	603b      	str	r3, [r7, #0]
 8009632:	460b      	mov	r3, r1
 8009634:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009636:	2300      	movs	r3, #0
 8009638:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800963a:	2300      	movs	r3, #0
 800963c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009644:	7af9      	ldrb	r1, [r7, #11]
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	f7fa fa9d 	bl	8003b88 <HAL_PCD_EP_Transmit>
 800964e:	4603      	mov	r3, r0
 8009650:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009652:	7dfb      	ldrb	r3, [r7, #23]
 8009654:	4618      	mov	r0, r3
 8009656:	f000 f853 	bl	8009700 <USBD_Get_USB_Status>
 800965a:	4603      	mov	r3, r0
 800965c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800965e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009660:	4618      	mov	r0, r3
 8009662:	3718      	adds	r7, #24
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b086      	sub	sp, #24
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	607a      	str	r2, [r7, #4]
 8009672:	603b      	str	r3, [r7, #0]
 8009674:	460b      	mov	r3, r1
 8009676:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009678:	2300      	movs	r3, #0
 800967a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800967c:	2300      	movs	r3, #0
 800967e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009686:	7af9      	ldrb	r1, [r7, #11]
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	f7fa fa29 	bl	8003ae2 <HAL_PCD_EP_Receive>
 8009690:	4603      	mov	r3, r0
 8009692:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009694:	7dfb      	ldrb	r3, [r7, #23]
 8009696:	4618      	mov	r0, r3
 8009698:	f000 f832 	bl	8009700 <USBD_Get_USB_Status>
 800969c:	4603      	mov	r3, r0
 800969e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096a0:	7dbb      	ldrb	r3, [r7, #22]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3718      	adds	r7, #24
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b082      	sub	sp, #8
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	460b      	mov	r3, r1
 80096b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096bc:	78fa      	ldrb	r2, [r7, #3]
 80096be:	4611      	mov	r1, r2
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7fa fa49 	bl	8003b58 <HAL_PCD_EP_GetRxCount>
 80096c6:	4603      	mov	r3, r0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80096d8:	4b03      	ldr	r3, [pc, #12]	@ (80096e8 <USBD_static_malloc+0x18>)
}
 80096da:	4618      	mov	r0, r3
 80096dc:	370c      	adds	r7, #12
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	200150e4 	.word	0x200150e4

080096ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]

}
 80096f4:	bf00      	nop
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009700:	b480      	push	{r7}
 8009702:	b085      	sub	sp, #20
 8009704:	af00      	add	r7, sp, #0
 8009706:	4603      	mov	r3, r0
 8009708:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800970a:	2300      	movs	r3, #0
 800970c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800970e:	79fb      	ldrb	r3, [r7, #7]
 8009710:	2b03      	cmp	r3, #3
 8009712:	d817      	bhi.n	8009744 <USBD_Get_USB_Status+0x44>
 8009714:	a201      	add	r2, pc, #4	@ (adr r2, 800971c <USBD_Get_USB_Status+0x1c>)
 8009716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800971a:	bf00      	nop
 800971c:	0800972d 	.word	0x0800972d
 8009720:	08009733 	.word	0x08009733
 8009724:	08009739 	.word	0x08009739
 8009728:	0800973f 	.word	0x0800973f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800972c:	2300      	movs	r3, #0
 800972e:	73fb      	strb	r3, [r7, #15]
    break;
 8009730:	e00b      	b.n	800974a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009732:	2303      	movs	r3, #3
 8009734:	73fb      	strb	r3, [r7, #15]
    break;
 8009736:	e008      	b.n	800974a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009738:	2301      	movs	r3, #1
 800973a:	73fb      	strb	r3, [r7, #15]
    break;
 800973c:	e005      	b.n	800974a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800973e:	2303      	movs	r3, #3
 8009740:	73fb      	strb	r3, [r7, #15]
    break;
 8009742:	e002      	b.n	800974a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009744:	2303      	movs	r3, #3
 8009746:	73fb      	strb	r3, [r7, #15]
    break;
 8009748:	bf00      	nop
  }
  return usb_status;
 800974a:	7bfb      	ldrb	r3, [r7, #15]
}
 800974c:	4618      	mov	r0, r3
 800974e:	3714      	adds	r7, #20
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <arm_mean_q15>:
 8009758:	ea5f 0c91 	movs.w	ip, r1, lsr #2
 800975c:	b4f0      	push	{r4, r5, r6, r7}
 800975e:	d028      	beq.n	80097b2 <arm_mean_q15+0x5a>
 8009760:	4604      	mov	r4, r0
 8009762:	4665      	mov	r5, ip
 8009764:	2300      	movs	r3, #0
 8009766:	6827      	ldr	r7, [r4, #0]
 8009768:	6866      	ldr	r6, [r4, #4]
 800976a:	fa03 f387 	sxtah	r3, r3, r7
 800976e:	eb03 4327 	add.w	r3, r3, r7, asr #16
 8009772:	fa03 f386 	sxtah	r3, r3, r6
 8009776:	3d01      	subs	r5, #1
 8009778:	eb03 4326 	add.w	r3, r3, r6, asr #16
 800977c:	f104 0408 	add.w	r4, r4, #8
 8009780:	d1f1      	bne.n	8009766 <arm_mean_q15+0xe>
 8009782:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 8009786:	f011 0403 	ands.w	r4, r1, #3
 800978a:	d00d      	beq.n	80097a8 <arm_mean_q15+0x50>
 800978c:	f9b0 5000 	ldrsh.w	r5, [r0]
 8009790:	3c01      	subs	r4, #1
 8009792:	442b      	add	r3, r5
 8009794:	d008      	beq.n	80097a8 <arm_mean_q15+0x50>
 8009796:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 800979a:	2c01      	cmp	r4, #1
 800979c:	bf18      	it	ne
 800979e:	f9b0 0004 	ldrshne.w	r0, [r0, #4]
 80097a2:	442b      	add	r3, r5
 80097a4:	bf18      	it	ne
 80097a6:	181b      	addne	r3, r3, r0
 80097a8:	fb93 f3f1 	sdiv	r3, r3, r1
 80097ac:	bcf0      	pop	{r4, r5, r6, r7}
 80097ae:	8013      	strh	r3, [r2, #0]
 80097b0:	4770      	bx	lr
 80097b2:	4663      	mov	r3, ip
 80097b4:	e7e7      	b.n	8009786 <arm_mean_q15+0x2e>
 80097b6:	bf00      	nop

080097b8 <arm_max_q15>:
 80097b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097bc:	4686      	mov	lr, r0
 80097be:	f101 38ff 	add.w	r8, r1, #4294967295
 80097c2:	ea5f 0998 	movs.w	r9, r8, lsr #2
 80097c6:	f93e 4b02 	ldrsh.w	r4, [lr], #2
 80097ca:	d048      	beq.n	800985e <arm_max_q15+0xa6>
 80097cc:	f109 0c01 	add.w	ip, r9, #1
 80097d0:	300a      	adds	r0, #10
 80097d2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80097d6:	2504      	movs	r5, #4
 80097d8:	2700      	movs	r7, #0
 80097da:	f930 6c08 	ldrsh.w	r6, [r0, #-8]
 80097de:	42b4      	cmp	r4, r6
 80097e0:	bfb8      	it	lt
 80097e2:	4634      	movlt	r4, r6
 80097e4:	f930 6c06 	ldrsh.w	r6, [r0, #-6]
 80097e8:	bfb8      	it	lt
 80097ea:	1eef      	sublt	r7, r5, #3
 80097ec:	42b4      	cmp	r4, r6
 80097ee:	bfb8      	it	lt
 80097f0:	4634      	movlt	r4, r6
 80097f2:	f930 6c04 	ldrsh.w	r6, [r0, #-4]
 80097f6:	bfb8      	it	lt
 80097f8:	1eaf      	sublt	r7, r5, #2
 80097fa:	42b4      	cmp	r4, r6
 80097fc:	bfb8      	it	lt
 80097fe:	4634      	movlt	r4, r6
 8009800:	f930 6c02 	ldrsh.w	r6, [r0, #-2]
 8009804:	bfb8      	it	lt
 8009806:	f105 37ff 	addlt.w	r7, r5, #4294967295
 800980a:	42b4      	cmp	r4, r6
 800980c:	bfb8      	it	lt
 800980e:	462f      	movlt	r7, r5
 8009810:	f105 0504 	add.w	r5, r5, #4
 8009814:	bfb8      	it	lt
 8009816:	4634      	movlt	r4, r6
 8009818:	4565      	cmp	r5, ip
 800981a:	f100 0008 	add.w	r0, r0, #8
 800981e:	d1dc      	bne.n	80097da <arm_max_q15+0x22>
 8009820:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 8009824:	f018 0003 	ands.w	r0, r8, #3
 8009828:	d015      	beq.n	8009856 <arm_max_q15+0x9e>
 800982a:	f9be 5000 	ldrsh.w	r5, [lr]
 800982e:	42a5      	cmp	r5, r4
 8009830:	bfc4      	itt	gt
 8009832:	462c      	movgt	r4, r5
 8009834:	1a0f      	subgt	r7, r1, r0
 8009836:	3801      	subs	r0, #1
 8009838:	d00d      	beq.n	8009856 <arm_max_q15+0x9e>
 800983a:	f9be 5002 	ldrsh.w	r5, [lr, #2]
 800983e:	42ac      	cmp	r4, r5
 8009840:	bfbc      	itt	lt
 8009842:	1a0f      	sublt	r7, r1, r0
 8009844:	462c      	movlt	r4, r5
 8009846:	2801      	cmp	r0, #1
 8009848:	d005      	beq.n	8009856 <arm_max_q15+0x9e>
 800984a:	f9be 1004 	ldrsh.w	r1, [lr, #4]
 800984e:	428c      	cmp	r4, r1
 8009850:	bfbc      	itt	lt
 8009852:	4647      	movlt	r7, r8
 8009854:	460c      	movlt	r4, r1
 8009856:	8014      	strh	r4, [r2, #0]
 8009858:	601f      	str	r7, [r3, #0]
 800985a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800985e:	464f      	mov	r7, r9
 8009860:	e7e0      	b.n	8009824 <arm_max_q15+0x6c>
 8009862:	bf00      	nop

08009864 <arm_split_rfft_q15>:
 8009864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009868:	b083      	sub	sp, #12
 800986a:	f101 4580 	add.w	r5, r1, #1073741824	@ 0x40000000
 800986e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8009870:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8009872:	3d01      	subs	r5, #1
 8009874:	eb04 06c1 	add.w	r6, r4, r1, lsl #3
 8009878:	00ac      	lsls	r4, r5, #2
 800987a:	9401      	str	r4, [sp, #4]
 800987c:	1e4c      	subs	r4, r1, #1
 800987e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8009882:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 8009886:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800988a:	d02d      	beq.n	80098e8 <arm_split_rfft_q15+0x84>
 800988c:	2f01      	cmp	r7, #1
 800988e:	f1a6 0c04 	sub.w	ip, r6, #4
 8009892:	f100 0604 	add.w	r6, r0, #4
 8009896:	d13e      	bne.n	8009916 <arm_split_rfft_q15+0xb2>
 8009898:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800989a:	f1ac 0104 	sub.w	r1, ip, #4
 800989e:	f107 0808 	add.w	r8, r7, #8
 80098a2:	f856 7b04 	ldr.w	r7, [r6], #4
 80098a6:	f852 9b04 	ldr.w	r9, [r2], #4
 80098aa:	fb47 fc09 	smusd	ip, r7, r9
 80098ae:	f855 e904 	ldr.w	lr, [r5], #-4
 80098b2:	f853 ab04 	ldr.w	sl, [r3], #4
 80098b6:	fb2e cc0a 	smlad	ip, lr, sl, ip
 80098ba:	fb4e fe1a 	smusdx	lr, lr, sl
 80098be:	fb27 e719 	smladx	r7, r7, r9, lr
 80098c2:	143f      	asrs	r7, r7, #16
 80098c4:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 80098c8:	f1c7 0e00 	rsb	lr, r7, #0
 80098cc:	3c01      	subs	r4, #1
 80098ce:	f828 7c02 	strh.w	r7, [r8, #-2]
 80098d2:	f828 cc04 	strh.w	ip, [r8, #-4]
 80098d6:	f1a1 0104 	sub.w	r1, r1, #4
 80098da:	f8a1 e00a 	strh.w	lr, [r1, #10]
 80098de:	f8a1 c008 	strh.w	ip, [r1, #8]
 80098e2:	f108 0804 	add.w	r8, r8, #4
 80098e6:	d1dc      	bne.n	80098a2 <arm_split_rfft_q15+0x3e>
 80098e8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80098ec:	f9b0 3000 	ldrsh.w	r3, [r0]
 80098f0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80098f2:	9a01      	ldr	r2, [sp, #4]
 80098f4:	1a5b      	subs	r3, r3, r1
 80098f6:	4422      	add	r2, r4
 80098f8:	2100      	movs	r1, #0
 80098fa:	105b      	asrs	r3, r3, #1
 80098fc:	8093      	strh	r3, [r2, #4]
 80098fe:	80d1      	strh	r1, [r2, #6]
 8009900:	f9b0 3000 	ldrsh.w	r3, [r0]
 8009904:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8009908:	8061      	strh	r1, [r4, #2]
 800990a:	4413      	add	r3, r2
 800990c:	105b      	asrs	r3, r3, #1
 800990e:	8023      	strh	r3, [r4, #0]
 8009910:	b003      	add	sp, #12
 8009912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009916:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 800991a:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800991c:	f1ac 0104 	sub.w	r1, ip, #4
 8009920:	f107 0808 	add.w	r8, r7, #8
 8009924:	f856 7b04 	ldr.w	r7, [r6], #4
 8009928:	f8d2 9000 	ldr.w	r9, [r2]
 800992c:	fb47 fc09 	smusd	ip, r7, r9
 8009930:	f855 e904 	ldr.w	lr, [r5], #-4
 8009934:	f8d3 a000 	ldr.w	sl, [r3]
 8009938:	fb2e cc0a 	smlad	ip, lr, sl, ip
 800993c:	fb4e fe1a 	smusdx	lr, lr, sl
 8009940:	fb27 e719 	smladx	r7, r7, r9, lr
 8009944:	143f      	asrs	r7, r7, #16
 8009946:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 800994a:	f1c7 0e00 	rsb	lr, r7, #0
 800994e:	3c01      	subs	r4, #1
 8009950:	f828 7c02 	strh.w	r7, [r8, #-2]
 8009954:	f828 cc04 	strh.w	ip, [r8, #-4]
 8009958:	445b      	add	r3, fp
 800995a:	f8a1 e006 	strh.w	lr, [r1, #6]
 800995e:	f8a1 c004 	strh.w	ip, [r1, #4]
 8009962:	445a      	add	r2, fp
 8009964:	f108 0804 	add.w	r8, r8, #4
 8009968:	f1a1 0104 	sub.w	r1, r1, #4
 800996c:	d1da      	bne.n	8009924 <arm_split_rfft_q15+0xc0>
 800996e:	e7bb      	b.n	80098e8 <arm_split_rfft_q15+0x84>

08009970 <arm_rfft_q15>:
 8009970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009974:	f890 e004 	ldrb.w	lr, [r0, #4]
 8009978:	6806      	ldr	r6, [r0, #0]
 800997a:	f1be 0f01 	cmp.w	lr, #1
 800997e:	4604      	mov	r4, r0
 8009980:	b083      	sub	sp, #12
 8009982:	6940      	ldr	r0, [r0, #20]
 8009984:	4615      	mov	r5, r2
 8009986:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800998a:	460f      	mov	r7, r1
 800998c:	d00f      	beq.n	80099ae <arm_rfft_q15+0x3e>
 800998e:	7963      	ldrb	r3, [r4, #5]
 8009990:	4672      	mov	r2, lr
 8009992:	f000 fbe5 	bl	800a160 <arm_cfft_q15>
 8009996:	68a3      	ldr	r3, [r4, #8]
 8009998:	9301      	str	r3, [sp, #4]
 800999a:	9500      	str	r5, [sp, #0]
 800999c:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 80099a0:	4631      	mov	r1, r6
 80099a2:	4638      	mov	r0, r7
 80099a4:	f7ff ff5e 	bl	8009864 <arm_split_rfft_q15>
 80099a8:	b003      	add	sp, #12
 80099aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ae:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
 80099b2:	68a2      	ldr	r2, [r4, #8]
 80099b4:	eb07 0c86 	add.w	ip, r7, r6, lsl #2
 80099b8:	b30e      	cbz	r6, 80099fe <arm_rfft_q15+0x8e>
 80099ba:	2a01      	cmp	r2, #1
 80099bc:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 80099c0:	d132      	bne.n	8009a28 <arm_rfft_q15+0xb8>
 80099c2:	46a9      	mov	r9, r5
 80099c4:	f85c 8904 	ldr.w	r8, [ip], #-4
 80099c8:	f851 2b04 	ldr.w	r2, [r1], #4
 80099cc:	fb48 fa02 	smusd	sl, r8, r2
 80099d0:	f857 bb04 	ldr.w	fp, [r7], #4
 80099d4:	f853 eb04 	ldr.w	lr, [r3], #4
 80099d8:	fb2b aa0e 	smlad	sl, fp, lr, sl
 80099dc:	fb28 f812 	smuadx	r8, r8, r2
 80099e0:	f1c8 0200 	rsb	r2, r8, #0
 80099e4:	fb4e 2e1b 	smlsdx	lr, lr, fp, r2
 80099e8:	ea4f 421e 	mov.w	r2, lr, lsr #16
 80099ec:	0412      	lsls	r2, r2, #16
 80099ee:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 80099f2:	3e01      	subs	r6, #1
 80099f4:	f849 2b04 	str.w	r2, [r9], #4
 80099f8:	d1e4      	bne.n	80099c4 <arm_rfft_q15+0x54>
 80099fa:	f894 e004 	ldrb.w	lr, [r4, #4]
 80099fe:	7963      	ldrb	r3, [r4, #5]
 8009a00:	4672      	mov	r2, lr
 8009a02:	4629      	mov	r1, r5
 8009a04:	f000 fbac 	bl	800a160 <arm_cfft_q15>
 8009a08:	6823      	ldr	r3, [r4, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d0cc      	beq.n	80099a8 <arm_rfft_q15+0x38>
 8009a0e:	3d02      	subs	r5, #2
 8009a10:	2100      	movs	r1, #0
 8009a12:	f935 3f02 	ldrsh.w	r3, [r5, #2]!
 8009a16:	005b      	lsls	r3, r3, #1
 8009a18:	802b      	strh	r3, [r5, #0]
 8009a1a:	6823      	ldr	r3, [r4, #0]
 8009a1c:	3101      	adds	r1, #1
 8009a1e:	428b      	cmp	r3, r1
 8009a20:	d8f7      	bhi.n	8009a12 <arm_rfft_q15+0xa2>
 8009a22:	b003      	add	sp, #12
 8009a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a28:	ee07 0a90 	vmov	s15, r0
 8009a2c:	46a8      	mov	r8, r5
 8009a2e:	f85c e904 	ldr.w	lr, [ip], #-4
 8009a32:	6808      	ldr	r0, [r1, #0]
 8009a34:	fb4e f900 	smusd	r9, lr, r0
 8009a38:	f857 ab04 	ldr.w	sl, [r7], #4
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	fb2a 9902 	smlad	r9, sl, r2, r9
 8009a42:	fb2e fe10 	smuadx	lr, lr, r0
 8009a46:	f1ce 0e00 	rsb	lr, lr, #0
 8009a4a:	fb42 e21a 	smlsdx	r2, r2, sl, lr
 8009a4e:	0c12      	lsrs	r2, r2, #16
 8009a50:	0412      	lsls	r2, r2, #16
 8009a52:	ea42 4219 	orr.w	r2, r2, r9, lsr #16
 8009a56:	3e01      	subs	r6, #1
 8009a58:	f848 2b04 	str.w	r2, [r8], #4
 8009a5c:	4459      	add	r1, fp
 8009a5e:	445b      	add	r3, fp
 8009a60:	d1e5      	bne.n	8009a2e <arm_rfft_q15+0xbe>
 8009a62:	ee17 0a90 	vmov	r0, s15
 8009a66:	e7c8      	b.n	80099fa <arm_rfft_q15+0x8a>

08009a68 <arm_rfft_init_q15>:
 8009a68:	b430      	push	{r4, r5}
 8009a6a:	b289      	uxth	r1, r1
 8009a6c:	4d31      	ldr	r5, [pc, #196]	@ (8009b34 <arm_rfft_init_q15+0xcc>)
 8009a6e:	4c32      	ldr	r4, [pc, #200]	@ (8009b38 <arm_rfft_init_q15+0xd0>)
 8009a70:	6001      	str	r1, [r0, #0]
 8009a72:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009a76:	e9c0 5403 	strd	r5, r4, [r0, #12]
 8009a7a:	7102      	strb	r2, [r0, #4]
 8009a7c:	7143      	strb	r3, [r0, #5]
 8009a7e:	d053      	beq.n	8009b28 <arm_rfft_init_q15+0xc0>
 8009a80:	d91a      	bls.n	8009ab8 <arm_rfft_init_q15+0x50>
 8009a82:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8009a86:	d033      	beq.n	8009af0 <arm_rfft_init_q15+0x88>
 8009a88:	d909      	bls.n	8009a9e <arm_rfft_init_q15+0x36>
 8009a8a:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8009a8e:	d12b      	bne.n	8009ae8 <arm_rfft_init_q15+0x80>
 8009a90:	4b2a      	ldr	r3, [pc, #168]	@ (8009b3c <arm_rfft_init_q15+0xd4>)
 8009a92:	6143      	str	r3, [r0, #20]
 8009a94:	2201      	movs	r2, #1
 8009a96:	6082      	str	r2, [r0, #8]
 8009a98:	2000      	movs	r0, #0
 8009a9a:	bc30      	pop	{r4, r5}
 8009a9c:	4770      	bx	lr
 8009a9e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009aa2:	d02c      	beq.n	8009afe <arm_rfft_init_q15+0x96>
 8009aa4:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8009aa8:	d11e      	bne.n	8009ae8 <arm_rfft_init_q15+0x80>
 8009aaa:	4b25      	ldr	r3, [pc, #148]	@ (8009b40 <arm_rfft_init_q15+0xd8>)
 8009aac:	6143      	str	r3, [r0, #20]
 8009aae:	2204      	movs	r2, #4
 8009ab0:	6082      	str	r2, [r0, #8]
 8009ab2:	bc30      	pop	{r4, r5}
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	4770      	bx	lr
 8009ab8:	2980      	cmp	r1, #128	@ 0x80
 8009aba:	d027      	beq.n	8009b0c <arm_rfft_init_q15+0xa4>
 8009abc:	d909      	bls.n	8009ad2 <arm_rfft_init_q15+0x6a>
 8009abe:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8009ac2:	d111      	bne.n	8009ae8 <arm_rfft_init_q15+0x80>
 8009ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8009b44 <arm_rfft_init_q15+0xdc>)
 8009ac6:	6143      	str	r3, [r0, #20]
 8009ac8:	2220      	movs	r2, #32
 8009aca:	6082      	str	r2, [r0, #8]
 8009acc:	bc30      	pop	{r4, r5}
 8009ace:	2000      	movs	r0, #0
 8009ad0:	4770      	bx	lr
 8009ad2:	2920      	cmp	r1, #32
 8009ad4:	d021      	beq.n	8009b1a <arm_rfft_init_q15+0xb2>
 8009ad6:	2940      	cmp	r1, #64	@ 0x40
 8009ad8:	d106      	bne.n	8009ae8 <arm_rfft_init_q15+0x80>
 8009ada:	4b1b      	ldr	r3, [pc, #108]	@ (8009b48 <arm_rfft_init_q15+0xe0>)
 8009adc:	6143      	str	r3, [r0, #20]
 8009ade:	2280      	movs	r2, #128	@ 0x80
 8009ae0:	6082      	str	r2, [r0, #8]
 8009ae2:	bc30      	pop	{r4, r5}
 8009ae4:	2000      	movs	r0, #0
 8009ae6:	4770      	bx	lr
 8009ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8009aec:	bc30      	pop	{r4, r5}
 8009aee:	4770      	bx	lr
 8009af0:	4b16      	ldr	r3, [pc, #88]	@ (8009b4c <arm_rfft_init_q15+0xe4>)
 8009af2:	6143      	str	r3, [r0, #20]
 8009af4:	2202      	movs	r2, #2
 8009af6:	6082      	str	r2, [r0, #8]
 8009af8:	bc30      	pop	{r4, r5}
 8009afa:	2000      	movs	r0, #0
 8009afc:	4770      	bx	lr
 8009afe:	4b14      	ldr	r3, [pc, #80]	@ (8009b50 <arm_rfft_init_q15+0xe8>)
 8009b00:	6143      	str	r3, [r0, #20]
 8009b02:	2208      	movs	r2, #8
 8009b04:	6082      	str	r2, [r0, #8]
 8009b06:	bc30      	pop	{r4, r5}
 8009b08:	2000      	movs	r0, #0
 8009b0a:	4770      	bx	lr
 8009b0c:	4b11      	ldr	r3, [pc, #68]	@ (8009b54 <arm_rfft_init_q15+0xec>)
 8009b0e:	6143      	str	r3, [r0, #20]
 8009b10:	2240      	movs	r2, #64	@ 0x40
 8009b12:	6082      	str	r2, [r0, #8]
 8009b14:	bc30      	pop	{r4, r5}
 8009b16:	2000      	movs	r0, #0
 8009b18:	4770      	bx	lr
 8009b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8009b58 <arm_rfft_init_q15+0xf0>)
 8009b1c:	6143      	str	r3, [r0, #20]
 8009b1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b22:	6082      	str	r2, [r0, #8]
 8009b24:	2000      	movs	r0, #0
 8009b26:	e7b8      	b.n	8009a9a <arm_rfft_init_q15+0x32>
 8009b28:	4b0c      	ldr	r3, [pc, #48]	@ (8009b5c <arm_rfft_init_q15+0xf4>)
 8009b2a:	6143      	str	r3, [r0, #20]
 8009b2c:	2210      	movs	r2, #16
 8009b2e:	6082      	str	r2, [r0, #8]
 8009b30:	2000      	movs	r0, #0
 8009b32:	e7b2      	b.n	8009a9a <arm_rfft_init_q15+0x32>
 8009b34:	08015104 	.word	0x08015104
 8009b38:	08019104 	.word	0x08019104
 8009b3c:	080112dc 	.word	0x080112dc
 8009b40:	0801127c 	.word	0x0801127c
 8009b44:	0801128c 	.word	0x0801128c
 8009b48:	080112cc 	.word	0x080112cc
 8009b4c:	080112ac 	.word	0x080112ac
 8009b50:	080112ec 	.word	0x080112ec
 8009b54:	080112fc 	.word	0x080112fc
 8009b58:	0801129c 	.word	0x0801129c
 8009b5c:	080112bc 	.word	0x080112bc

08009b60 <arm_fir_q15>:
 8009b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b64:	b09b      	sub	sp, #108	@ 0x6c
 8009b66:	4604      	mov	r4, r0
 8009b68:	9017      	str	r0, [sp, #92]	@ 0x5c
 8009b6a:	8800      	ldrh	r0, [r0, #0]
 8009b6c:	6865      	ldr	r5, [r4, #4]
 8009b6e:	68a6      	ldr	r6, [r4, #8]
 8009b70:	9318      	str	r3, [sp, #96]	@ 0x60
 8009b72:	f100 4c00 	add.w	ip, r0, #2147483648	@ 0x80000000
 8009b76:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009b7a:	eb05 074c 	add.w	r7, r5, ip, lsl #1
 8009b7e:	089b      	lsrs	r3, r3, #2
 8009b80:	e9cd 1214 	strd	r1, r2, [sp, #80]	@ 0x50
 8009b84:	9016      	str	r0, [sp, #88]	@ 0x58
 8009b86:	9511      	str	r5, [sp, #68]	@ 0x44
 8009b88:	960f      	str	r6, [sp, #60]	@ 0x3c
 8009b8a:	9713      	str	r7, [sp, #76]	@ 0x4c
 8009b8c:	9319      	str	r3, [sp, #100]	@ 0x64
 8009b8e:	f000 80f5 	beq.w	8009d7c <arm_fir_q15+0x21c>
 8009b92:	4688      	mov	r8, r1
 8009b94:	4619      	mov	r1, r3
 8009b96:	0883      	lsrs	r3, r0, #2
 8009b98:	462c      	mov	r4, r5
 8009b9a:	930e      	str	r3, [sp, #56]	@ 0x38
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	4696      	mov	lr, r2
 8009ba0:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8009ba4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8009ba8:	9306      	str	r3, [sp, #24]
 8009baa:	f000 0303 	and.w	r3, r0, #3
 8009bae:	9310      	str	r3, [sp, #64]	@ 0x40
 8009bb0:	4643      	mov	r3, r8
 8009bb2:	3308      	adds	r3, #8
 8009bb4:	e9cd 1e0a 	strd	r1, lr, [sp, #40]	@ 0x28
 8009bb8:	f1a2 0508 	sub.w	r5, r2, #8
 8009bbc:	9308      	str	r3, [sp, #32]
 8009bbe:	f107 0308 	add.w	r3, r7, #8
 8009bc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bc4:	9512      	str	r5, [sp, #72]	@ 0x48
 8009bc6:	4623      	mov	r3, r4
 8009bc8:	9908      	ldr	r1, [sp, #32]
 8009bca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bcc:	f931 2c08 	ldrsh.w	r2, [r1, #-8]
 8009bd0:	f820 2c08 	strh.w	r2, [r0, #-8]
 8009bd4:	f931 2c06 	ldrsh.w	r2, [r1, #-6]
 8009bd8:	f820 2c06 	strh.w	r2, [r0, #-6]
 8009bdc:	f931 2c04 	ldrsh.w	r2, [r1, #-4]
 8009be0:	f820 2c04 	strh.w	r2, [r0, #-4]
 8009be4:	f931 2c02 	ldrsh.w	r2, [r1, #-2]
 8009be8:	f820 2c02 	strh.w	r2, [r0, #-2]
 8009bec:	f8d3 9000 	ldr.w	r9, [r3]
 8009bf0:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8009bf4:	f103 0208 	add.w	r2, r3, #8
 8009bf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bfa:	920c      	str	r2, [sp, #48]	@ 0x30
 8009bfc:	4692      	mov	sl, r2
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	f000 8145 	beq.w	8009e8e <arm_fir_q15+0x32e>
 8009c04:	2400      	movs	r4, #0
 8009c06:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009c08:	9101      	str	r1, [sp, #4]
 8009c0a:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8009c0e:	9906      	ldr	r1, [sp, #24]
 8009c10:	9403      	str	r4, [sp, #12]
 8009c12:	46a3      	mov	fp, r4
 8009c14:	4625      	mov	r5, r4
 8009c16:	4622      	mov	r2, r4
 8009c18:	4627      	mov	r7, r4
 8009c1a:	fa1f f88e 	uxth.w	r8, lr
 8009c1e:	910d      	str	r1, [sp, #52]	@ 0x34
 8009c20:	f8cd a008 	str.w	sl, [sp, #8]
 8009c24:	9901      	ldr	r1, [sp, #4]
 8009c26:	9804      	ldr	r0, [sp, #16]
 8009c28:	680e      	ldr	r6, [r1, #0]
 8009c2a:	fbc9 70c6 	smlald	r7, r0, r9, r6
 8009c2e:	9903      	ldr	r1, [sp, #12]
 8009c30:	fbce b1c6 	smlald	fp, r1, lr, r6
 8009c34:	9b02      	ldr	r3, [sp, #8]
 8009c36:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8009c3a:	ea4f 4909 	mov.w	r9, r9, lsl #16
 8009c3e:	ea48 0809 	orr.w	r8, r8, r9
 8009c42:	f8d3 9000 	ldr.w	r9, [r3]
 8009c46:	fbc8 52d6 	smlaldx	r5, r2, r8, r6
 8009c4a:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8009c4e:	fa1f fa89 	uxth.w	sl, r9
 8009c52:	ea4f 4808 	mov.w	r8, r8, lsl #16
 8009c56:	f8dd c014 	ldr.w	ip, [sp, #20]
 8009c5a:	ea4a 0808 	orr.w	r8, sl, r8
 8009c5e:	fbc8 4cd6 	smlaldx	r4, ip, r8, r6
 8009c62:	9e01      	ldr	r6, [sp, #4]
 8009c64:	6873      	ldr	r3, [r6, #4]
 8009c66:	3608      	adds	r6, #8
 8009c68:	9601      	str	r6, [sp, #4]
 8009c6a:	fbce 70c3 	smlald	r7, r0, lr, r3
 8009c6e:	9e02      	ldr	r6, [sp, #8]
 8009c70:	9007      	str	r0, [sp, #28]
 8009c72:	9004      	str	r0, [sp, #16]
 8009c74:	f106 0008 	add.w	r0, r6, #8
 8009c78:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8009c7c:	9002      	str	r0, [sp, #8]
 8009c7e:	fbc9 b1c3 	smlald	fp, r1, r9, r3
 8009c82:	9103      	str	r1, [sp, #12]
 8009c84:	fbc8 52d3 	smlaldx	r5, r2, r8, r3
 8009c88:	ea4f 4a19 	mov.w	sl, r9, lsr #16
 8009c8c:	fa1f f88e 	uxth.w	r8, lr
 8009c90:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 8009c94:	ea48 0a0a 	orr.w	sl, r8, sl
 8009c98:	fbca 4cd3 	smlaldx	r4, ip, sl, r3
 8009c9c:	9b06      	ldr	r3, [sp, #24]
 8009c9e:	f8cd c014 	str.w	ip, [sp, #20]
 8009ca2:	4298      	cmp	r0, r3
 8009ca4:	d1be      	bne.n	8009c24 <arm_fir_q15+0xc4>
 8009ca6:	9804      	ldr	r0, [sp, #16]
 8009ca8:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8009caa:	9101      	str	r1, [sp, #4]
 8009cac:	4663      	mov	r3, ip
 8009cae:	4692      	mov	sl, r2
 8009cb0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8009cb2:	b309      	cbz	r1, 8009cf8 <arm_fir_q15+0x198>
 8009cb4:	f8d6 8000 	ldr.w	r8, [r6]
 8009cb8:	9807      	ldr	r0, [sp, #28]
 8009cba:	fbc9 70c8 	smlald	r7, r0, r9, r8
 8009cbe:	465e      	mov	r6, fp
 8009cc0:	9901      	ldr	r1, [sp, #4]
 8009cc2:	fbce 61c8 	smlald	r6, r1, lr, r8
 8009cc6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009cc8:	9103      	str	r1, [sp, #12]
 8009cca:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8009cce:	fa1f f38e 	uxth.w	r3, lr
 8009cd2:	ea4f 4909 	mov.w	r9, r9, lsl #16
 8009cd6:	6811      	ldr	r1, [r2, #0]
 8009cd8:	46b3      	mov	fp, r6
 8009cda:	4652      	mov	r2, sl
 8009cdc:	ea43 0909 	orr.w	r9, r3, r9
 8009ce0:	fbc9 52d8 	smlaldx	r5, r2, r9, r8
 8009ce4:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8009ce8:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8009cec:	b289      	uxth	r1, r1
 8009cee:	ea41 010e 	orr.w	r1, r1, lr
 8009cf2:	4663      	mov	r3, ip
 8009cf4:	fbc1 43d8 	smlaldx	r4, r3, r1, r8
 8009cf8:	0bff      	lsrs	r7, r7, #15
 8009cfa:	ea47 4740 	orr.w	r7, r7, r0, lsl #17
 8009cfe:	f307 070f 	ssat	r7, #16, r7
 8009d02:	0bed      	lsrs	r5, r5, #15
 8009d04:	ea45 4542 	orr.w	r5, r5, r2, lsl #17
 8009d08:	f305 050f 	ssat	r5, #16, r5
 8009d0c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009d0e:	9903      	ldr	r1, [sp, #12]
 8009d10:	b2bf      	uxth	r7, r7
 8009d12:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8009d16:	ea4f 36db 	mov.w	r6, fp, lsr #15
 8009d1a:	6015      	str	r5, [r2, #0]
 8009d1c:	ea46 4641 	orr.w	r6, r6, r1, lsl #17
 8009d20:	f306 060f 	ssat	r6, #16, r6
 8009d24:	0be4      	lsrs	r4, r4, #15
 8009d26:	ea44 4443 	orr.w	r4, r4, r3, lsl #17
 8009d2a:	f304 040f 	ssat	r4, #16, r4
 8009d2e:	b2b6      	uxth	r6, r6
 8009d30:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8009d34:	6054      	str	r4, [r2, #4]
 8009d36:	3208      	adds	r2, #8
 8009d38:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009d3a:	9a08      	ldr	r2, [sp, #32]
 8009d3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d3e:	3208      	adds	r2, #8
 8009d40:	9208      	str	r2, [sp, #32]
 8009d42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d44:	3208      	adds	r2, #8
 8009d46:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d48:	9a06      	ldr	r2, [sp, #24]
 8009d4a:	3208      	adds	r2, #8
 8009d4c:	9206      	str	r2, [sp, #24]
 8009d4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d50:	3a01      	subs	r2, #1
 8009d52:	920a      	str	r2, [sp, #40]	@ 0x28
 8009d54:	f47f af38 	bne.w	8009bc8 <arm_fir_q15+0x68>
 8009d58:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d5e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8009d62:	9214      	str	r2, [sp, #80]	@ 0x50
 8009d64:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009d66:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009d6a:	9211      	str	r2, [sp, #68]	@ 0x44
 8009d6c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009d6e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009d72:	9213      	str	r2, [sp, #76]	@ 0x4c
 8009d74:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009d76:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009d7a:	9315      	str	r3, [sp, #84]	@ 0x54
 8009d7c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8009d7e:	f013 0603 	ands.w	r6, r3, #3
 8009d82:	d048      	beq.n	8009e16 <arm_fir_q15+0x2b6>
 8009d84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009d86:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8009d88:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8009d8c:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
 8009d90:	ea4f 0e53 	mov.w	lr, r3, lsr #1
 8009d94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009d96:	f1a3 0c02 	sub.w	ip, r3, #2
 8009d9a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009d9c:	ea4f 0846 	mov.w	r8, r6, lsl #1
 8009da0:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 8009da4:	f10e 0501 	add.w	r5, lr, #1
 8009da8:	4632      	mov	r2, r6
 8009daa:	46c3      	mov	fp, r8
 8009dac:	4676      	mov	r6, lr
 8009dae:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009db2:	4698      	mov	r8, r3
 8009db4:	4696      	mov	lr, r2
 8009db6:	f938 3b02 	ldrsh.w	r3, [r8], #2
 8009dba:	f82c 3f02 	strh.w	r3, [ip, #2]!
 8009dbe:	2e00      	cmp	r6, #0
 8009dc0:	d074      	beq.n	8009eac <arm_fir_q15+0x34c>
 8009dc2:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8009dc6:	1d3b      	adds	r3, r7, #4
 8009dc8:	f10a 0204 	add.w	r2, sl, #4
 8009dcc:	2000      	movs	r0, #0
 8009dce:	2100      	movs	r1, #0
 8009dd0:	f833 6c04 	ldrh.w	r6, [r3, #-4]
 8009dd4:	f832 7c04 	ldrh.w	r7, [r2, #-4]
 8009dd8:	f833 4c02 	ldrh.w	r4, [r3, #-2]
 8009ddc:	fbc6 0187 	smlalbb	r0, r1, r6, r7
 8009de0:	3304      	adds	r3, #4
 8009de2:	f832 6c02 	ldrh.w	r6, [r2, #-2]
 8009de6:	42ab      	cmp	r3, r5
 8009de8:	fbc4 0186 	smlalbb	r0, r1, r4, r6
 8009dec:	f102 0204 	add.w	r2, r2, #4
 8009df0:	d1ee      	bne.n	8009dd0 <arm_fir_q15+0x270>
 8009df2:	e9dd 6701 	ldrd	r6, r7, [sp, #4]
 8009df6:	0bc3      	lsrs	r3, r0, #15
 8009df8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8009dfc:	f303 030f 	ssat	r3, #16, r3
 8009e00:	45f0      	cmp	r8, lr
 8009e02:	f829 3b02 	strh.w	r3, [r9], #2
 8009e06:	f107 0702 	add.w	r7, r7, #2
 8009e0a:	f105 0502 	add.w	r5, r5, #2
 8009e0e:	d1d2      	bne.n	8009db6 <arm_fir_q15+0x256>
 8009e10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009e12:	445b      	add	r3, fp
 8009e14:	9311      	str	r3, [sp, #68]	@ 0x44
 8009e16:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009e18:	1e5f      	subs	r7, r3, #1
 8009e1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e1c:	08be      	lsrs	r6, r7, #2
 8009e1e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8009e22:	d01d      	beq.n	8009e60 <arm_fir_q15+0x300>
 8009e24:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009e26:	f10c 0307 	add.w	r3, ip, #7
 8009e2a:	1a9b      	subs	r3, r3, r2
 8009e2c:	2b0e      	cmp	r3, #14
 8009e2e:	d93f      	bls.n	8009eb0 <arm_fir_q15+0x350>
 8009e30:	1e73      	subs	r3, r6, #1
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d93c      	bls.n	8009eb0 <arm_fir_q15+0x350>
 8009e36:	4610      	mov	r0, r2
 8009e38:	1d11      	adds	r1, r2, #4
 8009e3a:	4663      	mov	r3, ip
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	3201      	adds	r2, #1
 8009e40:	f850 4b08 	ldr.w	r4, [r0], #8
 8009e44:	f851 5b08 	ldr.w	r5, [r1], #8
 8009e48:	605d      	str	r5, [r3, #4]
 8009e4a:	4296      	cmp	r6, r2
 8009e4c:	601c      	str	r4, [r3, #0]
 8009e4e:	f103 0308 	add.w	r3, r3, #8
 8009e52:	d1f4      	bne.n	8009e3e <arm_fir_q15+0x2de>
 8009e54:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009e56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009e5a:	9311      	str	r3, [sp, #68]	@ 0x44
 8009e5c:	eb0c 0cc6 	add.w	ip, ip, r6, lsl #3
 8009e60:	f017 0703 	ands.w	r7, r7, #3
 8009e64:	d010      	beq.n	8009e88 <arm_fir_q15+0x328>
 8009e66:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009e68:	3f01      	subs	r7, #1
 8009e6a:	f9b2 3000 	ldrsh.w	r3, [r2]
 8009e6e:	f8ac 3000 	strh.w	r3, [ip]
 8009e72:	d009      	beq.n	8009e88 <arm_fir_q15+0x328>
 8009e74:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8009e78:	f8ac 3002 	strh.w	r3, [ip, #2]
 8009e7c:	2f01      	cmp	r7, #1
 8009e7e:	bf1c      	itt	ne
 8009e80:	f9b2 3004 	ldrshne.w	r3, [r2, #4]
 8009e84:	f8ac 3004 	strhne.w	r3, [ip, #4]
 8009e88:	b01b      	add	sp, #108	@ 0x6c
 8009e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e8e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8009e90:	920d      	str	r2, [sp, #52]	@ 0x34
 8009e92:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8009e94:	9001      	str	r0, [sp, #4]
 8009e96:	4684      	mov	ip, r0
 8009e98:	4603      	mov	r3, r0
 8009e9a:	4682      	mov	sl, r0
 8009e9c:	9007      	str	r0, [sp, #28]
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	4683      	mov	fp, r0
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	9003      	str	r0, [sp, #12]
 8009ea6:	4605      	mov	r5, r0
 8009ea8:	4607      	mov	r7, r0
 8009eaa:	e701      	b.n	8009cb0 <arm_fir_q15+0x150>
 8009eac:	4633      	mov	r3, r6
 8009eae:	e7a5      	b.n	8009dfc <arm_fir_q15+0x29c>
 8009eb0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009eb2:	f10c 0208 	add.w	r2, ip, #8
 8009eb6:	3308      	adds	r3, #8
 8009eb8:	4631      	mov	r1, r6
 8009eba:	f933 0c08 	ldrsh.w	r0, [r3, #-8]
 8009ebe:	f822 0c08 	strh.w	r0, [r2, #-8]
 8009ec2:	f933 0c06 	ldrsh.w	r0, [r3, #-6]
 8009ec6:	f822 0c06 	strh.w	r0, [r2, #-6]
 8009eca:	f933 0c04 	ldrsh.w	r0, [r3, #-4]
 8009ece:	f822 0c04 	strh.w	r0, [r2, #-4]
 8009ed2:	f933 0c02 	ldrsh.w	r0, [r3, #-2]
 8009ed6:	f822 0c02 	strh.w	r0, [r2, #-2]
 8009eda:	3901      	subs	r1, #1
 8009edc:	f103 0308 	add.w	r3, r3, #8
 8009ee0:	f102 0208 	add.w	r2, r2, #8
 8009ee4:	d1e9      	bne.n	8009eba <arm_fir_q15+0x35a>
 8009ee6:	e7b5      	b.n	8009e54 <arm_fir_q15+0x2f4>

08009ee8 <arm_fir_init_q15>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	f011 0501 	ands.w	r5, r1, #1
 8009eee:	d10d      	bne.n	8009f0c <arm_fir_init_q15+0x24>
 8009ef0:	4604      	mov	r4, r0
 8009ef2:	4610      	mov	r0, r2
 8009ef4:	9a04      	ldr	r2, [sp, #16]
 8009ef6:	8021      	strh	r1, [r4, #0]
 8009ef8:	188a      	adds	r2, r1, r2
 8009efa:	60a0      	str	r0, [r4, #8]
 8009efc:	0052      	lsls	r2, r2, #1
 8009efe:	4629      	mov	r1, r5
 8009f00:	4618      	mov	r0, r3
 8009f02:	f000 fd89 	bl	800aa18 <memset>
 8009f06:	6060      	str	r0, [r4, #4]
 8009f08:	4628      	mov	r0, r5
 8009f0a:	bd38      	pop	{r3, r4, r5, pc}
 8009f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f10:	bd38      	pop	{r3, r4, r5, pc}
 8009f12:	bf00      	nop

08009f14 <arm_abs_q15>:
 8009f14:	ea5f 0c92 	movs.w	ip, r2, lsr #2
 8009f18:	b4f0      	push	{r4, r5, r6, r7}
 8009f1a:	d030      	beq.n	8009f7e <arm_abs_q15+0x6a>
 8009f1c:	f100 0308 	add.w	r3, r0, #8
 8009f20:	f101 0408 	add.w	r4, r1, #8
 8009f24:	4666      	mov	r6, ip
 8009f26:	2700      	movs	r7, #0
 8009f28:	f933 5c08 	ldrsh.w	r5, [r3, #-8]
 8009f2c:	2d00      	cmp	r5, #0
 8009f2e:	dc02      	bgt.n	8009f36 <arm_abs_q15+0x22>
 8009f30:	fad7 f515 	qsub16	r5, r7, r5
 8009f34:	b22d      	sxth	r5, r5
 8009f36:	f824 5c08 	strh.w	r5, [r4, #-8]
 8009f3a:	f933 5c06 	ldrsh.w	r5, [r3, #-6]
 8009f3e:	2d00      	cmp	r5, #0
 8009f40:	dc02      	bgt.n	8009f48 <arm_abs_q15+0x34>
 8009f42:	fad7 f515 	qsub16	r5, r7, r5
 8009f46:	b22d      	sxth	r5, r5
 8009f48:	f824 5c06 	strh.w	r5, [r4, #-6]
 8009f4c:	f933 5c04 	ldrsh.w	r5, [r3, #-4]
 8009f50:	2d00      	cmp	r5, #0
 8009f52:	dc02      	bgt.n	8009f5a <arm_abs_q15+0x46>
 8009f54:	fad7 f515 	qsub16	r5, r7, r5
 8009f58:	b22d      	sxth	r5, r5
 8009f5a:	f824 5c04 	strh.w	r5, [r4, #-4]
 8009f5e:	f933 5c02 	ldrsh.w	r5, [r3, #-2]
 8009f62:	2d00      	cmp	r5, #0
 8009f64:	dd27      	ble.n	8009fb6 <arm_abs_q15+0xa2>
 8009f66:	3e01      	subs	r6, #1
 8009f68:	f824 5c02 	strh.w	r5, [r4, #-2]
 8009f6c:	f103 0308 	add.w	r3, r3, #8
 8009f70:	f104 0408 	add.w	r4, r4, #8
 8009f74:	d1d8      	bne.n	8009f28 <arm_abs_q15+0x14>
 8009f76:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 8009f7a:	eb01 01cc 	add.w	r1, r1, ip, lsl #3
 8009f7e:	f012 0203 	ands.w	r2, r2, #3
 8009f82:	d016      	beq.n	8009fb2 <arm_abs_q15+0x9e>
 8009f84:	f9b0 3000 	ldrsh.w	r3, [r0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	dd1f      	ble.n	8009fcc <arm_abs_q15+0xb8>
 8009f8c:	3a01      	subs	r2, #1
 8009f8e:	800b      	strh	r3, [r1, #0]
 8009f90:	d00f      	beq.n	8009fb2 <arm_abs_q15+0x9e>
 8009f92:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	dd1d      	ble.n	8009fd6 <arm_abs_q15+0xc2>
 8009f9a:	2a01      	cmp	r2, #1
 8009f9c:	804b      	strh	r3, [r1, #2]
 8009f9e:	d008      	beq.n	8009fb2 <arm_abs_q15+0x9e>
 8009fa0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	dc03      	bgt.n	8009fb0 <arm_abs_q15+0x9c>
 8009fa8:	2200      	movs	r2, #0
 8009faa:	fad2 f313 	qsub16	r3, r2, r3
 8009fae:	b21b      	sxth	r3, r3
 8009fb0:	808b      	strh	r3, [r1, #4]
 8009fb2:	bcf0      	pop	{r4, r5, r6, r7}
 8009fb4:	4770      	bx	lr
 8009fb6:	3e01      	subs	r6, #1
 8009fb8:	fad7 f515 	qsub16	r5, r7, r5
 8009fbc:	f103 0308 	add.w	r3, r3, #8
 8009fc0:	f824 5c02 	strh.w	r5, [r4, #-2]
 8009fc4:	f104 0408 	add.w	r4, r4, #8
 8009fc8:	d1ae      	bne.n	8009f28 <arm_abs_q15+0x14>
 8009fca:	e7d4      	b.n	8009f76 <arm_abs_q15+0x62>
 8009fcc:	2400      	movs	r4, #0
 8009fce:	fad4 f313 	qsub16	r3, r4, r3
 8009fd2:	b21b      	sxth	r3, r3
 8009fd4:	e7da      	b.n	8009f8c <arm_abs_q15+0x78>
 8009fd6:	2400      	movs	r4, #0
 8009fd8:	2a01      	cmp	r2, #1
 8009fda:	fad4 f313 	qsub16	r3, r4, r3
 8009fde:	b21b      	sxth	r3, r3
 8009fe0:	804b      	strh	r3, [r1, #2]
 8009fe2:	d1dd      	bne.n	8009fa0 <arm_abs_q15+0x8c>
 8009fe4:	e7e5      	b.n	8009fb2 <arm_abs_q15+0x9e>
 8009fe6:	bf00      	nop

08009fe8 <arm_cfft_radix4by2_q15>:
 8009fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fec:	084d      	lsrs	r5, r1, #1
 8009fee:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 8009ff2:	4616      	mov	r6, r2
 8009ff4:	d047      	beq.n	800a086 <arm_cfft_radix4by2_q15+0x9e>
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 800a0a0 <arm_cfft_radix4by2_q15+0xb8>
 8009ffc:	4696      	mov	lr, r2
 8009ffe:	4638      	mov	r0, r7
 800a000:	4621      	mov	r1, r4
 800a002:	462a      	mov	r2, r5
 800a004:	f04f 0c00 	mov.w	ip, #0
 800a008:	680b      	ldr	r3, [r1, #0]
 800a00a:	f8d0 a000 	ldr.w	sl, [r0]
 800a00e:	fa93 f32c 	shadd16	r3, r3, ip
 800a012:	fa9a fa2c 	shadd16	sl, sl, ip
 800a016:	fa93 f92a 	shadd16	r9, r3, sl
 800a01a:	fad3 fa1a 	qsub16	sl, r3, sl
 800a01e:	f85e 3b04 	ldr.w	r3, [lr], #4
 800a022:	f841 9b04 	str.w	r9, [r1], #4
 800a026:	fb23 f90a 	smuad	r9, r3, sl
 800a02a:	fb43 f31a 	smusdx	r3, r3, sl
 800a02e:	ea03 0308 	and.w	r3, r3, r8
 800a032:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 800a036:	3a01      	subs	r2, #1
 800a038:	f840 3b04 	str.w	r3, [r0], #4
 800a03c:	d1e4      	bne.n	800a008 <arm_cfft_radix4by2_q15+0x20>
 800a03e:	4629      	mov	r1, r5
 800a040:	2302      	movs	r3, #2
 800a042:	4632      	mov	r2, r6
 800a044:	4620      	mov	r0, r4
 800a046:	f000 f8e9 	bl	800a21c <arm_radix4_butterfly_q15>
 800a04a:	4638      	mov	r0, r7
 800a04c:	4629      	mov	r1, r5
 800a04e:	4632      	mov	r2, r6
 800a050:	2302      	movs	r3, #2
 800a052:	f000 f8e3 	bl	800a21c <arm_radix4_butterfly_q15>
 800a056:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800a05a:	4620      	mov	r0, r4
 800a05c:	f9b0 6000 	ldrsh.w	r6, [r0]
 800a060:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800a064:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800a068:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800a06c:	0076      	lsls	r6, r6, #1
 800a06e:	0064      	lsls	r4, r4, #1
 800a070:	0052      	lsls	r2, r2, #1
 800a072:	005b      	lsls	r3, r3, #1
 800a074:	8006      	strh	r6, [r0, #0]
 800a076:	8044      	strh	r4, [r0, #2]
 800a078:	8082      	strh	r2, [r0, #4]
 800a07a:	80c3      	strh	r3, [r0, #6]
 800a07c:	3008      	adds	r0, #8
 800a07e:	4285      	cmp	r5, r0
 800a080:	d1ec      	bne.n	800a05c <arm_cfft_radix4by2_q15+0x74>
 800a082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a086:	4629      	mov	r1, r5
 800a088:	2302      	movs	r3, #2
 800a08a:	f000 f8c7 	bl	800a21c <arm_radix4_butterfly_q15>
 800a08e:	4632      	mov	r2, r6
 800a090:	4629      	mov	r1, r5
 800a092:	4638      	mov	r0, r7
 800a094:	2302      	movs	r3, #2
 800a096:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a09a:	f000 b8bf 	b.w	800a21c <arm_radix4_butterfly_q15>
 800a09e:	bf00      	nop
 800a0a0:	ffff0000 	.word	0xffff0000

0800a0a4 <arm_cfft_radix4by2_inverse_q15>:
 800a0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a8:	084d      	lsrs	r5, r1, #1
 800a0aa:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 800a0ae:	4616      	mov	r6, r2
 800a0b0:	d047      	beq.n	800a142 <arm_cfft_radix4by2_inverse_q15+0x9e>
 800a0b2:	4604      	mov	r4, r0
 800a0b4:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 800a15c <arm_cfft_radix4by2_inverse_q15+0xb8>
 800a0b8:	4696      	mov	lr, r2
 800a0ba:	4638      	mov	r0, r7
 800a0bc:	4621      	mov	r1, r4
 800a0be:	462a      	mov	r2, r5
 800a0c0:	f04f 0c00 	mov.w	ip, #0
 800a0c4:	680b      	ldr	r3, [r1, #0]
 800a0c6:	f8d0 a000 	ldr.w	sl, [r0]
 800a0ca:	fa93 f32c 	shadd16	r3, r3, ip
 800a0ce:	fa9a fa2c 	shadd16	sl, sl, ip
 800a0d2:	fa93 f92a 	shadd16	r9, r3, sl
 800a0d6:	fad3 fa1a 	qsub16	sl, r3, sl
 800a0da:	f85e 3b04 	ldr.w	r3, [lr], #4
 800a0de:	f841 9b04 	str.w	r9, [r1], #4
 800a0e2:	fb43 f90a 	smusd	r9, r3, sl
 800a0e6:	fb23 f31a 	smuadx	r3, r3, sl
 800a0ea:	ea03 0308 	and.w	r3, r3, r8
 800a0ee:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 800a0f2:	3a01      	subs	r2, #1
 800a0f4:	f840 3b04 	str.w	r3, [r0], #4
 800a0f8:	d1e4      	bne.n	800a0c4 <arm_cfft_radix4by2_inverse_q15+0x20>
 800a0fa:	4629      	mov	r1, r5
 800a0fc:	2302      	movs	r3, #2
 800a0fe:	4632      	mov	r2, r6
 800a100:	4620      	mov	r0, r4
 800a102:	f000 fa35 	bl	800a570 <arm_radix4_butterfly_inverse_q15>
 800a106:	4638      	mov	r0, r7
 800a108:	4629      	mov	r1, r5
 800a10a:	4632      	mov	r2, r6
 800a10c:	2302      	movs	r3, #2
 800a10e:	f000 fa2f 	bl	800a570 <arm_radix4_butterfly_inverse_q15>
 800a112:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800a116:	4620      	mov	r0, r4
 800a118:	f9b0 6000 	ldrsh.w	r6, [r0]
 800a11c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800a120:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800a124:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800a128:	0076      	lsls	r6, r6, #1
 800a12a:	0064      	lsls	r4, r4, #1
 800a12c:	0052      	lsls	r2, r2, #1
 800a12e:	005b      	lsls	r3, r3, #1
 800a130:	8006      	strh	r6, [r0, #0]
 800a132:	8044      	strh	r4, [r0, #2]
 800a134:	8082      	strh	r2, [r0, #4]
 800a136:	80c3      	strh	r3, [r0, #6]
 800a138:	3008      	adds	r0, #8
 800a13a:	4285      	cmp	r5, r0
 800a13c:	d1ec      	bne.n	800a118 <arm_cfft_radix4by2_inverse_q15+0x74>
 800a13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a142:	4629      	mov	r1, r5
 800a144:	2302      	movs	r3, #2
 800a146:	f000 fa13 	bl	800a570 <arm_radix4_butterfly_inverse_q15>
 800a14a:	4632      	mov	r2, r6
 800a14c:	4629      	mov	r1, r5
 800a14e:	4638      	mov	r0, r7
 800a150:	2302      	movs	r3, #2
 800a152:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a156:	f000 ba0b 	b.w	800a570 <arm_radix4_butterfly_inverse_q15>
 800a15a:	bf00      	nop
 800a15c:	ffff0000 	.word	0xffff0000

0800a160 <arm_cfft_q15>:
 800a160:	b5e0      	push	{r5, r6, r7, lr}
 800a162:	2a01      	cmp	r2, #1
 800a164:	460f      	mov	r7, r1
 800a166:	4605      	mov	r5, r0
 800a168:	8801      	ldrh	r1, [r0, #0]
 800a16a:	461e      	mov	r6, r3
 800a16c:	d02f      	beq.n	800a1ce <arm_cfft_q15+0x6e>
 800a16e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800a172:	d026      	beq.n	800a1c2 <arm_cfft_q15+0x62>
 800a174:	d908      	bls.n	800a188 <arm_cfft_q15+0x28>
 800a176:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800a17a:	d017      	beq.n	800a1ac <arm_cfft_q15+0x4c>
 800a17c:	d91b      	bls.n	800a1b6 <arm_cfft_q15+0x56>
 800a17e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800a182:	d01e      	beq.n	800a1c2 <arm_cfft_q15+0x62>
 800a184:	b93e      	cbnz	r6, 800a196 <arm_cfft_q15+0x36>
 800a186:	bde0      	pop	{r5, r6, r7, pc}
 800a188:	2940      	cmp	r1, #64	@ 0x40
 800a18a:	d01a      	beq.n	800a1c2 <arm_cfft_q15+0x62>
 800a18c:	d90a      	bls.n	800a1a4 <arm_cfft_q15+0x44>
 800a18e:	2980      	cmp	r1, #128	@ 0x80
 800a190:	d00c      	beq.n	800a1ac <arm_cfft_q15+0x4c>
 800a192:	2e00      	cmp	r6, #0
 800a194:	d0f7      	beq.n	800a186 <arm_cfft_q15+0x26>
 800a196:	68aa      	ldr	r2, [r5, #8]
 800a198:	89a9      	ldrh	r1, [r5, #12]
 800a19a:	4638      	mov	r0, r7
 800a19c:	e8bd 40e0 	ldmia.w	sp!, {r5, r6, r7, lr}
 800a1a0:	f000 bb90 	b.w	800a8c4 <arm_bitreversal_16>
 800a1a4:	2910      	cmp	r1, #16
 800a1a6:	d00c      	beq.n	800a1c2 <arm_cfft_q15+0x62>
 800a1a8:	2920      	cmp	r1, #32
 800a1aa:	d1eb      	bne.n	800a184 <arm_cfft_q15+0x24>
 800a1ac:	686a      	ldr	r2, [r5, #4]
 800a1ae:	4638      	mov	r0, r7
 800a1b0:	f7ff ff1a 	bl	8009fe8 <arm_cfft_radix4by2_q15>
 800a1b4:	e7e6      	b.n	800a184 <arm_cfft_q15+0x24>
 800a1b6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a1ba:	d0f7      	beq.n	800a1ac <arm_cfft_q15+0x4c>
 800a1bc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a1c0:	d1e0      	bne.n	800a184 <arm_cfft_q15+0x24>
 800a1c2:	686a      	ldr	r2, [r5, #4]
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	4638      	mov	r0, r7
 800a1c8:	f000 f828 	bl	800a21c <arm_radix4_butterfly_q15>
 800a1cc:	e7da      	b.n	800a184 <arm_cfft_q15+0x24>
 800a1ce:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800a1d2:	d01d      	beq.n	800a210 <arm_cfft_q15+0xb0>
 800a1d4:	d907      	bls.n	800a1e6 <arm_cfft_q15+0x86>
 800a1d6:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800a1da:	d00e      	beq.n	800a1fa <arm_cfft_q15+0x9a>
 800a1dc:	d912      	bls.n	800a204 <arm_cfft_q15+0xa4>
 800a1de:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800a1e2:	d1cf      	bne.n	800a184 <arm_cfft_q15+0x24>
 800a1e4:	e014      	b.n	800a210 <arm_cfft_q15+0xb0>
 800a1e6:	2940      	cmp	r1, #64	@ 0x40
 800a1e8:	d012      	beq.n	800a210 <arm_cfft_q15+0xb0>
 800a1ea:	d902      	bls.n	800a1f2 <arm_cfft_q15+0x92>
 800a1ec:	2980      	cmp	r1, #128	@ 0x80
 800a1ee:	d004      	beq.n	800a1fa <arm_cfft_q15+0x9a>
 800a1f0:	e7c8      	b.n	800a184 <arm_cfft_q15+0x24>
 800a1f2:	2910      	cmp	r1, #16
 800a1f4:	d00c      	beq.n	800a210 <arm_cfft_q15+0xb0>
 800a1f6:	2920      	cmp	r1, #32
 800a1f8:	d1c4      	bne.n	800a184 <arm_cfft_q15+0x24>
 800a1fa:	686a      	ldr	r2, [r5, #4]
 800a1fc:	4638      	mov	r0, r7
 800a1fe:	f7ff ff51 	bl	800a0a4 <arm_cfft_radix4by2_inverse_q15>
 800a202:	e7bf      	b.n	800a184 <arm_cfft_q15+0x24>
 800a204:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a208:	d0f7      	beq.n	800a1fa <arm_cfft_q15+0x9a>
 800a20a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a20e:	d1b9      	bne.n	800a184 <arm_cfft_q15+0x24>
 800a210:	686a      	ldr	r2, [r5, #4]
 800a212:	2301      	movs	r3, #1
 800a214:	4638      	mov	r0, r7
 800a216:	f000 f9ab 	bl	800a570 <arm_radix4_butterfly_inverse_q15>
 800a21a:	e7b3      	b.n	800a184 <arm_cfft_q15+0x24>

0800a21c <arm_radix4_butterfly_q15>:
 800a21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a220:	b093      	sub	sp, #76	@ 0x4c
 800a222:	f021 0a03 	bic.w	sl, r1, #3
 800a226:	eb00 0c4a 	add.w	ip, r0, sl, lsl #1
 800a22a:	9210      	str	r2, [sp, #64]	@ 0x40
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	ea4f 0291 	mov.w	r2, r1, lsr #2
 800a232:	eb0c 050a 	add.w	r5, ip, sl
 800a236:	9101      	str	r1, [sp, #4]
 800a238:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a23a:	9303      	str	r3, [sp, #12]
 800a23c:	4482      	add	sl, r0
 800a23e:	9211      	str	r2, [sp, #68]	@ 0x44
 800a240:	f040 8124 	bne.w	800a48c <arm_radix4_butterfly_q15+0x270>
 800a244:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a246:	f8df e324 	ldr.w	lr, [pc, #804]	@ 800a56c <arm_radix4_butterfly_q15+0x350>
 800a24a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 800a24c:	f8cd a008 	str.w	sl, [sp, #8]
 800a250:	4693      	mov	fp, r2
 800a252:	4690      	mov	r8, r2
 800a254:	4657      	mov	r7, sl
 800a256:	2300      	movs	r3, #0
 800a258:	4691      	mov	r9, r2
 800a25a:	6830      	ldr	r0, [r6, #0]
 800a25c:	f8dc 2000 	ldr.w	r2, [ip]
 800a260:	6839      	ldr	r1, [r7, #0]
 800a262:	fa90 f023 	shadd16	r0, r0, r3
 800a266:	fa91 f123 	shadd16	r1, r1, r3
 800a26a:	fa90 f023 	shadd16	r0, r0, r3
 800a26e:	fa91 fa23 	shadd16	sl, r1, r3
 800a272:	fa92 f223 	shadd16	r2, r2, r3
 800a276:	6829      	ldr	r1, [r5, #0]
 800a278:	fa92 f223 	shadd16	r2, r2, r3
 800a27c:	fa91 f123 	shadd16	r1, r1, r3
 800a280:	fa90 f412 	qadd16	r4, r0, r2
 800a284:	fa91 f123 	shadd16	r1, r1, r3
 800a288:	fa9a f111 	qadd16	r1, sl, r1
 800a28c:	fa94 fa21 	shadd16	sl, r4, r1
 800a290:	f846 ab04 	str.w	sl, [r6], #4
 800a294:	fad4 f411 	qsub16	r4, r4, r1
 800a298:	fad0 f212 	qsub16	r2, r0, r2
 800a29c:	f85b 1b08 	ldr.w	r1, [fp], #8
 800a2a0:	fb21 f004 	smuad	r0, r1, r4
 800a2a4:	fb41 f114 	smusdx	r1, r1, r4
 800a2a8:	ea01 010e 	and.w	r1, r1, lr
 800a2ac:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 800a2b0:	6838      	ldr	r0, [r7, #0]
 800a2b2:	f847 1b04 	str.w	r1, [r7], #4
 800a2b6:	fa90 f023 	shadd16	r0, r0, r3
 800a2ba:	682c      	ldr	r4, [r5, #0]
 800a2bc:	fa90 f023 	shadd16	r0, r0, r3
 800a2c0:	fa94 f423 	shadd16	r4, r4, r3
 800a2c4:	f859 1b04 	ldr.w	r1, [r9], #4
 800a2c8:	fa94 f423 	shadd16	r4, r4, r3
 800a2cc:	fad0 f014 	qsub16	r0, r0, r4
 800a2d0:	faa2 f410 	qasx	r4, r2, r0
 800a2d4:	fae2 f210 	qsax	r2, r2, r0
 800a2d8:	fb21 fa02 	smuad	sl, r1, r2
 800a2dc:	fb41 f212 	smusdx	r2, r1, r2
 800a2e0:	ea02 020e 	and.w	r2, r2, lr
 800a2e4:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 800a2e8:	f84c 2b04 	str.w	r2, [ip], #4
 800a2ec:	f858 2b0c 	ldr.w	r2, [r8], #12
 800a2f0:	fb22 f104 	smuad	r1, r2, r4
 800a2f4:	fb42 f214 	smusdx	r2, r2, r4
 800a2f8:	ea02 020e 	and.w	r2, r2, lr
 800a2fc:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 800a300:	f845 2b04 	str.w	r2, [r5], #4
 800a304:	9a02      	ldr	r2, [sp, #8]
 800a306:	42b2      	cmp	r2, r6
 800a308:	d1a7      	bne.n	800a25a <arm_radix4_butterfly_q15+0x3e>
 800a30a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a30c:	9b03      	ldr	r3, [sp, #12]
 800a30e:	2a04      	cmp	r2, #4
 800a310:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800a314:	f240 8127 	bls.w	800a566 <arm_radix4_butterfly_q15+0x34a>
 800a318:	f8df a250 	ldr.w	sl, [pc, #592]	@ 800a56c <arm_radix4_butterfly_q15+0x350>
 800a31c:	920e      	str	r2, [sp, #56]	@ 0x38
 800a31e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a320:	9102      	str	r1, [sp, #8]
 800a322:	4608      	mov	r0, r1
 800a324:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800a328:	0889      	lsrs	r1, r1, #2
 800a32a:	0092      	lsls	r2, r2, #2
 800a32c:	0086      	lsls	r6, r0, #2
 800a32e:	9801      	ldr	r0, [sp, #4]
 800a330:	920d      	str	r2, [sp, #52]	@ 0x34
 800a332:	008c      	lsls	r4, r1, #2
 800a334:	009a      	lsls	r2, r3, #2
 800a336:	00db      	lsls	r3, r3, #3
 800a338:	4288      	cmp	r0, r1
 800a33a:	940a      	str	r4, [sp, #40]	@ 0x28
 800a33c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a33e:	4604      	mov	r4, r0
 800a340:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a342:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800a344:	910e      	str	r1, [sp, #56]	@ 0x38
 800a346:	bf28      	it	cs
 800a348:	460c      	movcs	r4, r1
 800a34a:	e9cd 0305 	strd	r0, r3, [sp, #20]
 800a34e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800a352:	9308      	str	r3, [sp, #32]
 800a354:	9307      	str	r3, [sp, #28]
 800a356:	2300      	movs	r3, #0
 800a358:	940c      	str	r4, [sp, #48]	@ 0x30
 800a35a:	9104      	str	r1, [sp, #16]
 800a35c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a35e:	9303      	str	r3, [sp, #12]
 800a360:	9b08      	ldr	r3, [sp, #32]
 800a362:	9a05      	ldr	r2, [sp, #20]
 800a364:	f8d3 9000 	ldr.w	r9, [r3]
 800a368:	9b07      	ldr	r3, [sp, #28]
 800a36a:	9f03      	ldr	r7, [sp, #12]
 800a36c:	f8d3 8000 	ldr.w	r8, [r3]
 800a370:	9b06      	ldr	r3, [sp, #24]
 800a372:	f8d3 e000 	ldr.w	lr, [r3]
 800a376:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a378:	4615      	mov	r5, r2
 800a37a:	1898      	adds	r0, r3, r2
 800a37c:	9a04      	ldr	r2, [sp, #16]
 800a37e:	4614      	mov	r4, r2
 800a380:	1899      	adds	r1, r3, r2
 800a382:	682a      	ldr	r2, [r5, #0]
 800a384:	6823      	ldr	r3, [r4, #0]
 800a386:	f8d0 b000 	ldr.w	fp, [r0]
 800a38a:	fa92 fc13 	qadd16	ip, r2, r3
 800a38e:	fad2 f213 	qsub16	r2, r2, r3
 800a392:	680b      	ldr	r3, [r1, #0]
 800a394:	fa9b f313 	qadd16	r3, fp, r3
 800a398:	fa9c fb23 	shadd16	fp, ip, r3
 800a39c:	fadc f323 	shsub16	r3, ip, r3
 800a3a0:	f04f 0c00 	mov.w	ip, #0
 800a3a4:	fa9b fb2c 	shadd16	fp, fp, ip
 800a3a8:	f8c5 b000 	str.w	fp, [r5]
 800a3ac:	4435      	add	r5, r6
 800a3ae:	fb28 fb03 	smuad	fp, r8, r3
 800a3b2:	fb48 f313 	smusdx	r3, r8, r3
 800a3b6:	ea03 030a 	and.w	r3, r3, sl
 800a3ba:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 800a3be:	f8d0 b000 	ldr.w	fp, [r0]
 800a3c2:	6003      	str	r3, [r0, #0]
 800a3c4:	f8d1 c000 	ldr.w	ip, [r1]
 800a3c8:	fadb fc1c 	qsub16	ip, fp, ip
 800a3cc:	4430      	add	r0, r6
 800a3ce:	faa2 f32c 	shasx	r3, r2, ip
 800a3d2:	fae2 f22c 	shsax	r2, r2, ip
 800a3d6:	fb29 fc02 	smuad	ip, r9, r2
 800a3da:	fb49 f212 	smusdx	r2, r9, r2
 800a3de:	ea02 020a 	and.w	r2, r2, sl
 800a3e2:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 800a3e6:	6022      	str	r2, [r4, #0]
 800a3e8:	4434      	add	r4, r6
 800a3ea:	fb2e f203 	smuad	r2, lr, r3
 800a3ee:	fb4e f313 	smusdx	r3, lr, r3
 800a3f2:	ea03 030a 	and.w	r3, r3, sl
 800a3f6:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 800a3fa:	9a02      	ldr	r2, [sp, #8]
 800a3fc:	600b      	str	r3, [r1, #0]
 800a3fe:	9b01      	ldr	r3, [sp, #4]
 800a400:	4417      	add	r7, r2
 800a402:	42bb      	cmp	r3, r7
 800a404:	4431      	add	r1, r6
 800a406:	d8bc      	bhi.n	800a382 <arm_radix4_butterfly_q15+0x166>
 800a408:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 800a40c:	440a      	add	r2, r1
 800a40e:	9208      	str	r2, [sp, #32]
 800a410:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a412:	9a07      	ldr	r2, [sp, #28]
 800a414:	9b03      	ldr	r3, [sp, #12]
 800a416:	440a      	add	r2, r1
 800a418:	9207      	str	r2, [sp, #28]
 800a41a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a41c:	9a06      	ldr	r2, [sp, #24]
 800a41e:	440a      	add	r2, r1
 800a420:	9206      	str	r2, [sp, #24]
 800a422:	9a05      	ldr	r2, [sp, #20]
 800a424:	3204      	adds	r2, #4
 800a426:	9205      	str	r2, [sp, #20]
 800a428:	9a04      	ldr	r2, [sp, #16]
 800a42a:	3204      	adds	r2, #4
 800a42c:	9204      	str	r2, [sp, #16]
 800a42e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a430:	3301      	adds	r3, #1
 800a432:	4293      	cmp	r3, r2
 800a434:	9303      	str	r3, [sp, #12]
 800a436:	d393      	bcc.n	800a360 <arm_radix4_butterfly_q15+0x144>
 800a438:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a43a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a43c:	2a04      	cmp	r2, #4
 800a43e:	f63f af6e 	bhi.w	800a31e <arm_radix4_butterfly_q15+0x102>
 800a442:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800a444:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a446:	689d      	ldr	r5, [r3, #8]
 800a448:	68de      	ldr	r6, [r3, #12]
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	6859      	ldr	r1, [r3, #4]
 800a44e:	fa92 f015 	qadd16	r0, r2, r5
 800a452:	3c01      	subs	r4, #1
 800a454:	fad2 f215 	qsub16	r2, r2, r5
 800a458:	f103 0310 	add.w	r3, r3, #16
 800a45c:	fa91 f516 	qadd16	r5, r1, r6
 800a460:	fad1 f116 	qsub16	r1, r1, r6
 800a464:	fa90 f625 	shadd16	r6, r0, r5
 800a468:	fad0 f025 	shsub16	r0, r0, r5
 800a46c:	f843 6c10 	str.w	r6, [r3, #-16]
 800a470:	f843 0c0c 	str.w	r0, [r3, #-12]
 800a474:	fae2 f021 	shsax	r0, r2, r1
 800a478:	faa2 f221 	shasx	r2, r2, r1
 800a47c:	f843 0c08 	str.w	r0, [r3, #-8]
 800a480:	f843 2c04 	str.w	r2, [r3, #-4]
 800a484:	d1df      	bne.n	800a446 <arm_radix4_butterfly_q15+0x22a>
 800a486:	b013      	add	sp, #76	@ 0x4c
 800a488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a48c:	2400      	movs	r4, #0
 800a48e:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 800a56c <arm_radix4_butterfly_q15+0x350>
 800a492:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800a494:	4623      	mov	r3, r4
 800a496:	4680      	mov	r8, r0
 800a498:	4691      	mov	r9, r2
 800a49a:	f8d8 0000 	ldr.w	r0, [r8]
 800a49e:	f8dc 2000 	ldr.w	r2, [ip]
 800a4a2:	f8da 1000 	ldr.w	r1, [sl]
 800a4a6:	fa90 f023 	shadd16	r0, r0, r3
 800a4aa:	fa91 f123 	shadd16	r1, r1, r3
 800a4ae:	fa90 f023 	shadd16	r0, r0, r3
 800a4b2:	fa91 fb23 	shadd16	fp, r1, r3
 800a4b6:	fa92 f223 	shadd16	r2, r2, r3
 800a4ba:	6829      	ldr	r1, [r5, #0]
 800a4bc:	fa92 f223 	shadd16	r2, r2, r3
 800a4c0:	fa91 f123 	shadd16	r1, r1, r3
 800a4c4:	fa90 f612 	qadd16	r6, r0, r2
 800a4c8:	fa91 f123 	shadd16	r1, r1, r3
 800a4cc:	fa9b f111 	qadd16	r1, fp, r1
 800a4d0:	fa96 fb21 	shadd16	fp, r6, r1
 800a4d4:	f848 bb04 	str.w	fp, [r8], #4
 800a4d8:	fad6 f611 	qsub16	r6, r6, r1
 800a4dc:	fad0 f212 	qsub16	r2, r0, r2
 800a4e0:	f857 1034 	ldr.w	r1, [r7, r4, lsl #3]
 800a4e4:	fb21 f006 	smuad	r0, r1, r6
 800a4e8:	fb41 f116 	smusdx	r1, r1, r6
 800a4ec:	ea01 010e 	and.w	r1, r1, lr
 800a4f0:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 800a4f4:	f8da 0000 	ldr.w	r0, [sl]
 800a4f8:	f84a 1b04 	str.w	r1, [sl], #4
 800a4fc:	fa90 f023 	shadd16	r0, r0, r3
 800a500:	682e      	ldr	r6, [r5, #0]
 800a502:	fa90 f023 	shadd16	r0, r0, r3
 800a506:	fa96 f623 	shadd16	r6, r6, r3
 800a50a:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800a50e:	fa96 f623 	shadd16	r6, r6, r3
 800a512:	fad0 f016 	qsub16	r0, r0, r6
 800a516:	faa2 f610 	qasx	r6, r2, r0
 800a51a:	fae2 f210 	qsax	r2, r2, r0
 800a51e:	fb21 fb02 	smuad	fp, r1, r2
 800a522:	fb41 f212 	smusdx	r2, r1, r2
 800a526:	ea02 020e 	and.w	r2, r2, lr
 800a52a:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 800a52e:	f84c 2b04 	str.w	r2, [ip], #4
 800a532:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800a536:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800a53a:	fb22 f106 	smuad	r1, r2, r6
 800a53e:	fb42 f216 	smusdx	r2, r2, r6
 800a542:	ea02 020e 	and.w	r2, r2, lr
 800a546:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 800a54a:	f845 2b04 	str.w	r2, [r5], #4
 800a54e:	9a03      	ldr	r2, [sp, #12]
 800a550:	f1b9 0901 	subs.w	r9, r9, #1
 800a554:	4414      	add	r4, r2
 800a556:	d1a0      	bne.n	800a49a <arm_radix4_butterfly_q15+0x27e>
 800a558:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a55a:	9b03      	ldr	r3, [sp, #12]
 800a55c:	2a04      	cmp	r2, #4
 800a55e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800a562:	f63f aed9 	bhi.w	800a318 <arm_radix4_butterfly_q15+0xfc>
 800a566:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a568:	4614      	mov	r4, r2
 800a56a:	e76c      	b.n	800a446 <arm_radix4_butterfly_q15+0x22a>
 800a56c:	ffff0000 	.word	0xffff0000

0800a570 <arm_radix4_butterfly_inverse_q15>:
 800a570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a574:	b093      	sub	sp, #76	@ 0x4c
 800a576:	f021 0a03 	bic.w	sl, r1, #3
 800a57a:	eb00 0c4a 	add.w	ip, r0, sl, lsl #1
 800a57e:	9210      	str	r2, [sp, #64]	@ 0x40
 800a580:	2b01      	cmp	r3, #1
 800a582:	ea4f 0291 	mov.w	r2, r1, lsr #2
 800a586:	eb0c 050a 	add.w	r5, ip, sl
 800a58a:	9101      	str	r1, [sp, #4]
 800a58c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a58e:	9303      	str	r3, [sp, #12]
 800a590:	4482      	add	sl, r0
 800a592:	9211      	str	r2, [sp, #68]	@ 0x44
 800a594:	f040 8124 	bne.w	800a7e0 <arm_radix4_butterfly_inverse_q15+0x270>
 800a598:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a59a:	f8df e324 	ldr.w	lr, [pc, #804]	@ 800a8c0 <arm_radix4_butterfly_inverse_q15+0x350>
 800a59e:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 800a5a0:	f8cd a008 	str.w	sl, [sp, #8]
 800a5a4:	4693      	mov	fp, r2
 800a5a6:	4690      	mov	r8, r2
 800a5a8:	4657      	mov	r7, sl
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	4691      	mov	r9, r2
 800a5ae:	6830      	ldr	r0, [r6, #0]
 800a5b0:	f8dc 2000 	ldr.w	r2, [ip]
 800a5b4:	6839      	ldr	r1, [r7, #0]
 800a5b6:	fa90 f023 	shadd16	r0, r0, r3
 800a5ba:	fa91 f123 	shadd16	r1, r1, r3
 800a5be:	fa90 f023 	shadd16	r0, r0, r3
 800a5c2:	fa91 fa23 	shadd16	sl, r1, r3
 800a5c6:	fa92 f223 	shadd16	r2, r2, r3
 800a5ca:	6829      	ldr	r1, [r5, #0]
 800a5cc:	fa92 f223 	shadd16	r2, r2, r3
 800a5d0:	fa91 f123 	shadd16	r1, r1, r3
 800a5d4:	fa90 f412 	qadd16	r4, r0, r2
 800a5d8:	fa91 f123 	shadd16	r1, r1, r3
 800a5dc:	fa9a f111 	qadd16	r1, sl, r1
 800a5e0:	fa94 fa21 	shadd16	sl, r4, r1
 800a5e4:	f846 ab04 	str.w	sl, [r6], #4
 800a5e8:	fad4 f411 	qsub16	r4, r4, r1
 800a5ec:	fad0 f212 	qsub16	r2, r0, r2
 800a5f0:	f85b 1b08 	ldr.w	r1, [fp], #8
 800a5f4:	fb41 f004 	smusd	r0, r1, r4
 800a5f8:	fb21 f114 	smuadx	r1, r1, r4
 800a5fc:	ea01 010e 	and.w	r1, r1, lr
 800a600:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 800a604:	6838      	ldr	r0, [r7, #0]
 800a606:	f847 1b04 	str.w	r1, [r7], #4
 800a60a:	fa90 f023 	shadd16	r0, r0, r3
 800a60e:	682c      	ldr	r4, [r5, #0]
 800a610:	fa90 f023 	shadd16	r0, r0, r3
 800a614:	fa94 f423 	shadd16	r4, r4, r3
 800a618:	f859 1b04 	ldr.w	r1, [r9], #4
 800a61c:	fa94 f423 	shadd16	r4, r4, r3
 800a620:	fad0 f014 	qsub16	r0, r0, r4
 800a624:	fae2 f410 	qsax	r4, r2, r0
 800a628:	faa2 f210 	qasx	r2, r2, r0
 800a62c:	fb41 fa02 	smusd	sl, r1, r2
 800a630:	fb21 f212 	smuadx	r2, r1, r2
 800a634:	ea02 020e 	and.w	r2, r2, lr
 800a638:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 800a63c:	f84c 2b04 	str.w	r2, [ip], #4
 800a640:	f858 2b0c 	ldr.w	r2, [r8], #12
 800a644:	fb42 f104 	smusd	r1, r2, r4
 800a648:	fb22 f214 	smuadx	r2, r2, r4
 800a64c:	ea02 020e 	and.w	r2, r2, lr
 800a650:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 800a654:	f845 2b04 	str.w	r2, [r5], #4
 800a658:	9a02      	ldr	r2, [sp, #8]
 800a65a:	42b2      	cmp	r2, r6
 800a65c:	d1a7      	bne.n	800a5ae <arm_radix4_butterfly_inverse_q15+0x3e>
 800a65e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a660:	9b03      	ldr	r3, [sp, #12]
 800a662:	2a04      	cmp	r2, #4
 800a664:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800a668:	f240 8127 	bls.w	800a8ba <arm_radix4_butterfly_inverse_q15+0x34a>
 800a66c:	f8df a250 	ldr.w	sl, [pc, #592]	@ 800a8c0 <arm_radix4_butterfly_inverse_q15+0x350>
 800a670:	920e      	str	r2, [sp, #56]	@ 0x38
 800a672:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a674:	9102      	str	r1, [sp, #8]
 800a676:	4608      	mov	r0, r1
 800a678:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800a67c:	0889      	lsrs	r1, r1, #2
 800a67e:	0092      	lsls	r2, r2, #2
 800a680:	0086      	lsls	r6, r0, #2
 800a682:	9801      	ldr	r0, [sp, #4]
 800a684:	920d      	str	r2, [sp, #52]	@ 0x34
 800a686:	008c      	lsls	r4, r1, #2
 800a688:	009a      	lsls	r2, r3, #2
 800a68a:	00db      	lsls	r3, r3, #3
 800a68c:	4288      	cmp	r0, r1
 800a68e:	940a      	str	r4, [sp, #40]	@ 0x28
 800a690:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a692:	4604      	mov	r4, r0
 800a694:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a696:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800a698:	910e      	str	r1, [sp, #56]	@ 0x38
 800a69a:	bf28      	it	cs
 800a69c:	460c      	movcs	r4, r1
 800a69e:	e9cd 0305 	strd	r0, r3, [sp, #20]
 800a6a2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800a6a6:	9308      	str	r3, [sp, #32]
 800a6a8:	9307      	str	r3, [sp, #28]
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	940c      	str	r4, [sp, #48]	@ 0x30
 800a6ae:	9104      	str	r1, [sp, #16]
 800a6b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a6b2:	9303      	str	r3, [sp, #12]
 800a6b4:	9b08      	ldr	r3, [sp, #32]
 800a6b6:	9a05      	ldr	r2, [sp, #20]
 800a6b8:	f8d3 9000 	ldr.w	r9, [r3]
 800a6bc:	9b07      	ldr	r3, [sp, #28]
 800a6be:	9f03      	ldr	r7, [sp, #12]
 800a6c0:	f8d3 8000 	ldr.w	r8, [r3]
 800a6c4:	9b06      	ldr	r3, [sp, #24]
 800a6c6:	f8d3 e000 	ldr.w	lr, [r3]
 800a6ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6cc:	4615      	mov	r5, r2
 800a6ce:	1898      	adds	r0, r3, r2
 800a6d0:	9a04      	ldr	r2, [sp, #16]
 800a6d2:	4614      	mov	r4, r2
 800a6d4:	1899      	adds	r1, r3, r2
 800a6d6:	682a      	ldr	r2, [r5, #0]
 800a6d8:	6823      	ldr	r3, [r4, #0]
 800a6da:	f8d0 b000 	ldr.w	fp, [r0]
 800a6de:	fa92 fc13 	qadd16	ip, r2, r3
 800a6e2:	fad2 f213 	qsub16	r2, r2, r3
 800a6e6:	680b      	ldr	r3, [r1, #0]
 800a6e8:	fa9b f313 	qadd16	r3, fp, r3
 800a6ec:	fa9c fb23 	shadd16	fp, ip, r3
 800a6f0:	fadc f323 	shsub16	r3, ip, r3
 800a6f4:	f04f 0c00 	mov.w	ip, #0
 800a6f8:	fa9b fb2c 	shadd16	fp, fp, ip
 800a6fc:	f8c5 b000 	str.w	fp, [r5]
 800a700:	4435      	add	r5, r6
 800a702:	fb48 fb03 	smusd	fp, r8, r3
 800a706:	fb28 f313 	smuadx	r3, r8, r3
 800a70a:	ea03 030a 	and.w	r3, r3, sl
 800a70e:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 800a712:	f8d0 b000 	ldr.w	fp, [r0]
 800a716:	6003      	str	r3, [r0, #0]
 800a718:	f8d1 c000 	ldr.w	ip, [r1]
 800a71c:	fadb fc1c 	qsub16	ip, fp, ip
 800a720:	4430      	add	r0, r6
 800a722:	fae2 f32c 	shsax	r3, r2, ip
 800a726:	faa2 f22c 	shasx	r2, r2, ip
 800a72a:	fb49 fc02 	smusd	ip, r9, r2
 800a72e:	fb29 f212 	smuadx	r2, r9, r2
 800a732:	ea02 020a 	and.w	r2, r2, sl
 800a736:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 800a73a:	6022      	str	r2, [r4, #0]
 800a73c:	4434      	add	r4, r6
 800a73e:	fb4e f203 	smusd	r2, lr, r3
 800a742:	fb2e f313 	smuadx	r3, lr, r3
 800a746:	ea03 030a 	and.w	r3, r3, sl
 800a74a:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 800a74e:	9a02      	ldr	r2, [sp, #8]
 800a750:	600b      	str	r3, [r1, #0]
 800a752:	9b01      	ldr	r3, [sp, #4]
 800a754:	4417      	add	r7, r2
 800a756:	42bb      	cmp	r3, r7
 800a758:	4431      	add	r1, r6
 800a75a:	d8bc      	bhi.n	800a6d6 <arm_radix4_butterfly_inverse_q15+0x166>
 800a75c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 800a760:	440a      	add	r2, r1
 800a762:	9208      	str	r2, [sp, #32]
 800a764:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a766:	9a07      	ldr	r2, [sp, #28]
 800a768:	9b03      	ldr	r3, [sp, #12]
 800a76a:	440a      	add	r2, r1
 800a76c:	9207      	str	r2, [sp, #28]
 800a76e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a770:	9a06      	ldr	r2, [sp, #24]
 800a772:	440a      	add	r2, r1
 800a774:	9206      	str	r2, [sp, #24]
 800a776:	9a05      	ldr	r2, [sp, #20]
 800a778:	3204      	adds	r2, #4
 800a77a:	9205      	str	r2, [sp, #20]
 800a77c:	9a04      	ldr	r2, [sp, #16]
 800a77e:	3204      	adds	r2, #4
 800a780:	9204      	str	r2, [sp, #16]
 800a782:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a784:	3301      	adds	r3, #1
 800a786:	4293      	cmp	r3, r2
 800a788:	9303      	str	r3, [sp, #12]
 800a78a:	d393      	bcc.n	800a6b4 <arm_radix4_butterfly_inverse_q15+0x144>
 800a78c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a78e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a790:	2a04      	cmp	r2, #4
 800a792:	f63f af6e 	bhi.w	800a672 <arm_radix4_butterfly_inverse_q15+0x102>
 800a796:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800a798:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a79a:	689d      	ldr	r5, [r3, #8]
 800a79c:	68de      	ldr	r6, [r3, #12]
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	6859      	ldr	r1, [r3, #4]
 800a7a2:	fa92 f015 	qadd16	r0, r2, r5
 800a7a6:	3c01      	subs	r4, #1
 800a7a8:	fad2 f215 	qsub16	r2, r2, r5
 800a7ac:	f103 0310 	add.w	r3, r3, #16
 800a7b0:	fa91 f516 	qadd16	r5, r1, r6
 800a7b4:	fad1 f116 	qsub16	r1, r1, r6
 800a7b8:	fa90 f625 	shadd16	r6, r0, r5
 800a7bc:	fad0 f025 	shsub16	r0, r0, r5
 800a7c0:	f843 6c10 	str.w	r6, [r3, #-16]
 800a7c4:	f843 0c0c 	str.w	r0, [r3, #-12]
 800a7c8:	faa2 f021 	shasx	r0, r2, r1
 800a7cc:	fae2 f221 	shsax	r2, r2, r1
 800a7d0:	f843 0c08 	str.w	r0, [r3, #-8]
 800a7d4:	f843 2c04 	str.w	r2, [r3, #-4]
 800a7d8:	d1df      	bne.n	800a79a <arm_radix4_butterfly_inverse_q15+0x22a>
 800a7da:	b013      	add	sp, #76	@ 0x4c
 800a7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e0:	2400      	movs	r4, #0
 800a7e2:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 800a8c0 <arm_radix4_butterfly_inverse_q15+0x350>
 800a7e6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800a7e8:	4623      	mov	r3, r4
 800a7ea:	4680      	mov	r8, r0
 800a7ec:	4691      	mov	r9, r2
 800a7ee:	f8d8 0000 	ldr.w	r0, [r8]
 800a7f2:	f8dc 2000 	ldr.w	r2, [ip]
 800a7f6:	f8da 1000 	ldr.w	r1, [sl]
 800a7fa:	fa90 f023 	shadd16	r0, r0, r3
 800a7fe:	fa91 f123 	shadd16	r1, r1, r3
 800a802:	fa90 f023 	shadd16	r0, r0, r3
 800a806:	fa91 fb23 	shadd16	fp, r1, r3
 800a80a:	fa92 f223 	shadd16	r2, r2, r3
 800a80e:	6829      	ldr	r1, [r5, #0]
 800a810:	fa92 f223 	shadd16	r2, r2, r3
 800a814:	fa91 f123 	shadd16	r1, r1, r3
 800a818:	fa90 f612 	qadd16	r6, r0, r2
 800a81c:	fa91 f123 	shadd16	r1, r1, r3
 800a820:	fa9b f111 	qadd16	r1, fp, r1
 800a824:	fa96 fb21 	shadd16	fp, r6, r1
 800a828:	f848 bb04 	str.w	fp, [r8], #4
 800a82c:	fad6 f611 	qsub16	r6, r6, r1
 800a830:	fad0 f212 	qsub16	r2, r0, r2
 800a834:	f857 1034 	ldr.w	r1, [r7, r4, lsl #3]
 800a838:	fb41 f006 	smusd	r0, r1, r6
 800a83c:	fb21 f116 	smuadx	r1, r1, r6
 800a840:	ea01 010e 	and.w	r1, r1, lr
 800a844:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 800a848:	f8da 0000 	ldr.w	r0, [sl]
 800a84c:	f84a 1b04 	str.w	r1, [sl], #4
 800a850:	fa90 f023 	shadd16	r0, r0, r3
 800a854:	682e      	ldr	r6, [r5, #0]
 800a856:	fa90 f023 	shadd16	r0, r0, r3
 800a85a:	fa96 f623 	shadd16	r6, r6, r3
 800a85e:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800a862:	fa96 f623 	shadd16	r6, r6, r3
 800a866:	fad0 f016 	qsub16	r0, r0, r6
 800a86a:	fae2 f610 	qsax	r6, r2, r0
 800a86e:	faa2 f210 	qasx	r2, r2, r0
 800a872:	fb41 fb02 	smusd	fp, r1, r2
 800a876:	fb21 f212 	smuadx	r2, r1, r2
 800a87a:	ea02 020e 	and.w	r2, r2, lr
 800a87e:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 800a882:	f84c 2b04 	str.w	r2, [ip], #4
 800a886:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800a88a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800a88e:	fb42 f106 	smusd	r1, r2, r6
 800a892:	fb22 f216 	smuadx	r2, r2, r6
 800a896:	ea02 020e 	and.w	r2, r2, lr
 800a89a:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 800a89e:	f845 2b04 	str.w	r2, [r5], #4
 800a8a2:	9a03      	ldr	r2, [sp, #12]
 800a8a4:	f1b9 0901 	subs.w	r9, r9, #1
 800a8a8:	4414      	add	r4, r2
 800a8aa:	d1a0      	bne.n	800a7ee <arm_radix4_butterfly_inverse_q15+0x27e>
 800a8ac:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a8ae:	9b03      	ldr	r3, [sp, #12]
 800a8b0:	2a04      	cmp	r2, #4
 800a8b2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800a8b6:	f63f aed9 	bhi.w	800a66c <arm_radix4_butterfly_inverse_q15+0xfc>
 800a8ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8bc:	4614      	mov	r4, r2
 800a8be:	e76c      	b.n	800a79a <arm_radix4_butterfly_inverse_q15+0x22a>
 800a8c0:	ffff0000 	.word	0xffff0000

0800a8c4 <arm_bitreversal_16>:
 800a8c4:	b1f1      	cbz	r1, 800a904 <arm_bitreversal_16+0x40>
 800a8c6:	b4f0      	push	{r4, r5, r6, r7}
 800a8c8:	2400      	movs	r4, #0
 800a8ca:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 800a8ce:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 800a8d2:	886d      	ldrh	r5, [r5, #2]
 800a8d4:	08ad      	lsrs	r5, r5, #2
 800a8d6:	089b      	lsrs	r3, r3, #2
 800a8d8:	f830 6015 	ldrh.w	r6, [r0, r5, lsl #1]
 800a8dc:	f830 7013 	ldrh.w	r7, [r0, r3, lsl #1]
 800a8e0:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 800a8e4:	006e      	lsls	r6, r5, #1
 800a8e6:	005b      	lsls	r3, r3, #1
 800a8e8:	f820 7015 	strh.w	r7, [r0, r5, lsl #1]
 800a8ec:	3302      	adds	r3, #2
 800a8ee:	1cb5      	adds	r5, r6, #2
 800a8f0:	3402      	adds	r4, #2
 800a8f2:	b2a4      	uxth	r4, r4
 800a8f4:	5ac6      	ldrh	r6, [r0, r3]
 800a8f6:	5b47      	ldrh	r7, [r0, r5]
 800a8f8:	52c7      	strh	r7, [r0, r3]
 800a8fa:	42a1      	cmp	r1, r4
 800a8fc:	5346      	strh	r6, [r0, r5]
 800a8fe:	d8e4      	bhi.n	800a8ca <arm_bitreversal_16+0x6>
 800a900:	bcf0      	pop	{r4, r5, r6, r7}
 800a902:	4770      	bx	lr
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop

0800a908 <atoi>:
 800a908:	220a      	movs	r2, #10
 800a90a:	2100      	movs	r1, #0
 800a90c:	f000 b87a 	b.w	800aa04 <strtol>

0800a910 <_strtol_l.constprop.0>:
 800a910:	2b24      	cmp	r3, #36	@ 0x24
 800a912:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a916:	4686      	mov	lr, r0
 800a918:	4690      	mov	r8, r2
 800a91a:	d801      	bhi.n	800a920 <_strtol_l.constprop.0+0x10>
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d106      	bne.n	800a92e <_strtol_l.constprop.0+0x1e>
 800a920:	f000 f894 	bl	800aa4c <__errno>
 800a924:	2316      	movs	r3, #22
 800a926:	6003      	str	r3, [r0, #0]
 800a928:	2000      	movs	r0, #0
 800a92a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a92e:	4834      	ldr	r0, [pc, #208]	@ (800aa00 <_strtol_l.constprop.0+0xf0>)
 800a930:	460d      	mov	r5, r1
 800a932:	462a      	mov	r2, r5
 800a934:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a938:	5d06      	ldrb	r6, [r0, r4]
 800a93a:	f016 0608 	ands.w	r6, r6, #8
 800a93e:	d1f8      	bne.n	800a932 <_strtol_l.constprop.0+0x22>
 800a940:	2c2d      	cmp	r4, #45	@ 0x2d
 800a942:	d12d      	bne.n	800a9a0 <_strtol_l.constprop.0+0x90>
 800a944:	782c      	ldrb	r4, [r5, #0]
 800a946:	2601      	movs	r6, #1
 800a948:	1c95      	adds	r5, r2, #2
 800a94a:	f033 0210 	bics.w	r2, r3, #16
 800a94e:	d109      	bne.n	800a964 <_strtol_l.constprop.0+0x54>
 800a950:	2c30      	cmp	r4, #48	@ 0x30
 800a952:	d12a      	bne.n	800a9aa <_strtol_l.constprop.0+0x9a>
 800a954:	782a      	ldrb	r2, [r5, #0]
 800a956:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a95a:	2a58      	cmp	r2, #88	@ 0x58
 800a95c:	d125      	bne.n	800a9aa <_strtol_l.constprop.0+0x9a>
 800a95e:	786c      	ldrb	r4, [r5, #1]
 800a960:	2310      	movs	r3, #16
 800a962:	3502      	adds	r5, #2
 800a964:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a968:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a96c:	2200      	movs	r2, #0
 800a96e:	fbbc f9f3 	udiv	r9, ip, r3
 800a972:	4610      	mov	r0, r2
 800a974:	fb03 ca19 	mls	sl, r3, r9, ip
 800a978:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a97c:	2f09      	cmp	r7, #9
 800a97e:	d81b      	bhi.n	800a9b8 <_strtol_l.constprop.0+0xa8>
 800a980:	463c      	mov	r4, r7
 800a982:	42a3      	cmp	r3, r4
 800a984:	dd27      	ble.n	800a9d6 <_strtol_l.constprop.0+0xc6>
 800a986:	1c57      	adds	r7, r2, #1
 800a988:	d007      	beq.n	800a99a <_strtol_l.constprop.0+0x8a>
 800a98a:	4581      	cmp	r9, r0
 800a98c:	d320      	bcc.n	800a9d0 <_strtol_l.constprop.0+0xc0>
 800a98e:	d101      	bne.n	800a994 <_strtol_l.constprop.0+0x84>
 800a990:	45a2      	cmp	sl, r4
 800a992:	db1d      	blt.n	800a9d0 <_strtol_l.constprop.0+0xc0>
 800a994:	fb00 4003 	mla	r0, r0, r3, r4
 800a998:	2201      	movs	r2, #1
 800a99a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a99e:	e7eb      	b.n	800a978 <_strtol_l.constprop.0+0x68>
 800a9a0:	2c2b      	cmp	r4, #43	@ 0x2b
 800a9a2:	bf04      	itt	eq
 800a9a4:	782c      	ldrbeq	r4, [r5, #0]
 800a9a6:	1c95      	addeq	r5, r2, #2
 800a9a8:	e7cf      	b.n	800a94a <_strtol_l.constprop.0+0x3a>
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d1da      	bne.n	800a964 <_strtol_l.constprop.0+0x54>
 800a9ae:	2c30      	cmp	r4, #48	@ 0x30
 800a9b0:	bf0c      	ite	eq
 800a9b2:	2308      	moveq	r3, #8
 800a9b4:	230a      	movne	r3, #10
 800a9b6:	e7d5      	b.n	800a964 <_strtol_l.constprop.0+0x54>
 800a9b8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a9bc:	2f19      	cmp	r7, #25
 800a9be:	d801      	bhi.n	800a9c4 <_strtol_l.constprop.0+0xb4>
 800a9c0:	3c37      	subs	r4, #55	@ 0x37
 800a9c2:	e7de      	b.n	800a982 <_strtol_l.constprop.0+0x72>
 800a9c4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a9c8:	2f19      	cmp	r7, #25
 800a9ca:	d804      	bhi.n	800a9d6 <_strtol_l.constprop.0+0xc6>
 800a9cc:	3c57      	subs	r4, #87	@ 0x57
 800a9ce:	e7d8      	b.n	800a982 <_strtol_l.constprop.0+0x72>
 800a9d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9d4:	e7e1      	b.n	800a99a <_strtol_l.constprop.0+0x8a>
 800a9d6:	1c53      	adds	r3, r2, #1
 800a9d8:	d108      	bne.n	800a9ec <_strtol_l.constprop.0+0xdc>
 800a9da:	2322      	movs	r3, #34	@ 0x22
 800a9dc:	f8ce 3000 	str.w	r3, [lr]
 800a9e0:	4660      	mov	r0, ip
 800a9e2:	f1b8 0f00 	cmp.w	r8, #0
 800a9e6:	d0a0      	beq.n	800a92a <_strtol_l.constprop.0+0x1a>
 800a9e8:	1e69      	subs	r1, r5, #1
 800a9ea:	e006      	b.n	800a9fa <_strtol_l.constprop.0+0xea>
 800a9ec:	b106      	cbz	r6, 800a9f0 <_strtol_l.constprop.0+0xe0>
 800a9ee:	4240      	negs	r0, r0
 800a9f0:	f1b8 0f00 	cmp.w	r8, #0
 800a9f4:	d099      	beq.n	800a92a <_strtol_l.constprop.0+0x1a>
 800a9f6:	2a00      	cmp	r2, #0
 800a9f8:	d1f6      	bne.n	800a9e8 <_strtol_l.constprop.0+0xd8>
 800a9fa:	f8c8 1000 	str.w	r1, [r8]
 800a9fe:	e794      	b.n	800a92a <_strtol_l.constprop.0+0x1a>
 800aa00:	080230d5 	.word	0x080230d5

0800aa04 <strtol>:
 800aa04:	4613      	mov	r3, r2
 800aa06:	460a      	mov	r2, r1
 800aa08:	4601      	mov	r1, r0
 800aa0a:	4802      	ldr	r0, [pc, #8]	@ (800aa14 <strtol+0x10>)
 800aa0c:	6800      	ldr	r0, [r0, #0]
 800aa0e:	f7ff bf7f 	b.w	800a910 <_strtol_l.constprop.0>
 800aa12:	bf00      	nop
 800aa14:	200088f8 	.word	0x200088f8

0800aa18 <memset>:
 800aa18:	4402      	add	r2, r0
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d100      	bne.n	800aa22 <memset+0xa>
 800aa20:	4770      	bx	lr
 800aa22:	f803 1b01 	strb.w	r1, [r3], #1
 800aa26:	e7f9      	b.n	800aa1c <memset+0x4>

0800aa28 <strncmp>:
 800aa28:	b510      	push	{r4, lr}
 800aa2a:	b16a      	cbz	r2, 800aa48 <strncmp+0x20>
 800aa2c:	3901      	subs	r1, #1
 800aa2e:	1884      	adds	r4, r0, r2
 800aa30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa34:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d103      	bne.n	800aa44 <strncmp+0x1c>
 800aa3c:	42a0      	cmp	r0, r4
 800aa3e:	d001      	beq.n	800aa44 <strncmp+0x1c>
 800aa40:	2a00      	cmp	r2, #0
 800aa42:	d1f5      	bne.n	800aa30 <strncmp+0x8>
 800aa44:	1ad0      	subs	r0, r2, r3
 800aa46:	bd10      	pop	{r4, pc}
 800aa48:	4610      	mov	r0, r2
 800aa4a:	e7fc      	b.n	800aa46 <strncmp+0x1e>

0800aa4c <__errno>:
 800aa4c:	4b01      	ldr	r3, [pc, #4]	@ (800aa54 <__errno+0x8>)
 800aa4e:	6818      	ldr	r0, [r3, #0]
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	200088f8 	.word	0x200088f8

0800aa58 <__libc_init_array>:
 800aa58:	b570      	push	{r4, r5, r6, lr}
 800aa5a:	4d0d      	ldr	r5, [pc, #52]	@ (800aa90 <__libc_init_array+0x38>)
 800aa5c:	4c0d      	ldr	r4, [pc, #52]	@ (800aa94 <__libc_init_array+0x3c>)
 800aa5e:	1b64      	subs	r4, r4, r5
 800aa60:	10a4      	asrs	r4, r4, #2
 800aa62:	2600      	movs	r6, #0
 800aa64:	42a6      	cmp	r6, r4
 800aa66:	d109      	bne.n	800aa7c <__libc_init_array+0x24>
 800aa68:	4d0b      	ldr	r5, [pc, #44]	@ (800aa98 <__libc_init_array+0x40>)
 800aa6a:	4c0c      	ldr	r4, [pc, #48]	@ (800aa9c <__libc_init_array+0x44>)
 800aa6c:	f000 f826 	bl	800aabc <_init>
 800aa70:	1b64      	subs	r4, r4, r5
 800aa72:	10a4      	asrs	r4, r4, #2
 800aa74:	2600      	movs	r6, #0
 800aa76:	42a6      	cmp	r6, r4
 800aa78:	d105      	bne.n	800aa86 <__libc_init_array+0x2e>
 800aa7a:	bd70      	pop	{r4, r5, r6, pc}
 800aa7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa80:	4798      	blx	r3
 800aa82:	3601      	adds	r6, #1
 800aa84:	e7ee      	b.n	800aa64 <__libc_init_array+0xc>
 800aa86:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa8a:	4798      	blx	r3
 800aa8c:	3601      	adds	r6, #1
 800aa8e:	e7f2      	b.n	800aa76 <__libc_init_array+0x1e>
 800aa90:	080231e0 	.word	0x080231e0
 800aa94:	080231e0 	.word	0x080231e0
 800aa98:	080231e0 	.word	0x080231e0
 800aa9c:	080231e4 	.word	0x080231e4

0800aaa0 <memcpy>:
 800aaa0:	440a      	add	r2, r1
 800aaa2:	4291      	cmp	r1, r2
 800aaa4:	f100 33ff 	add.w	r3, r0, #4294967295
 800aaa8:	d100      	bne.n	800aaac <memcpy+0xc>
 800aaaa:	4770      	bx	lr
 800aaac:	b510      	push	{r4, lr}
 800aaae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aab2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aab6:	4291      	cmp	r1, r2
 800aab8:	d1f9      	bne.n	800aaae <memcpy+0xe>
 800aaba:	bd10      	pop	{r4, pc}

0800aabc <_init>:
 800aabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aabe:	bf00      	nop
 800aac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aac2:	bc08      	pop	{r3}
 800aac4:	469e      	mov	lr, r3
 800aac6:	4770      	bx	lr

0800aac8 <_fini>:
 800aac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaca:	bf00      	nop
 800aacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aace:	bc08      	pop	{r3}
 800aad0:	469e      	mov	lr, r3
 800aad2:	4770      	bx	lr
